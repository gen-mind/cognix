Collaboard Database Documentation

IBV.Database

Server

Web.collaboard.app

Author

Dennis Vroegop

Table of Contents

Table of Contents 2

localhost 12

User databases 14

IBV.Database Database 15

Tables 17

[auth].[t_role] 21

[auth].[t_user] 23

[auth].[t_user_role] 25


-----

[conversion].[t_conversion_booking_history] 30

[conversion].[t_convertable_file_type] 32

[conversion].[t_image_resizing_booking] 34

[conversion].[t_image_resizing_booking_history] 36

[conversion].[t_state_machine_status] 38

[dbo].[t_blob_status] 40

[dbo].[t_caches] 41

[dbo].[t_canvasshotter_booking] 43

[dbo].[t_canvasshotter_booking_history] 45

[dbo].[t_configuration] 47

[dbo].[t_events] 49

[dbo].[t_language] 50

[dbo].[t_newsletter_subscriber] 52

[dbo].[t_online_user] 54

[dbo].[t_project] 57

[dbo].[t_project_copy_booking] 60

[dbo].[t_project_copy_booking_history] 63

[dbo].[t_project_participant] 65

[dbo].[t_project_tag] 67

[dbo].[t_project_type] 69

[dbo].[t project type translation] 71


-----

[dbo].[t_project_upgrade_booking_history] 75

[dbo].[t_quicklink] 77

[dbo].[t_quicklink_tile] 79

[dbo].[t_state_machine_status] 81

[dbo].[t_telemetrydata] 83

[dbo].[t_template_translation] 84

[dbo].[t_tile_relation] 86

[dbo].[t_tile_relation_anchor] 90

[dbo].[t_tile_relation_line] 91

[dbo].[t_tile_relation_line_style] 92

[dbo].[t_tile_relation_startend_symbol] 93

[dbo].[t_tile_relation_style] 94

[dbo].[t_tile_relation_type] 95

[dbo].[t_tile_type] 96

[dbo].[t_tile_voting] 97

[dbo].[t_tilecopy_copiedrelation] 99

[dbo].[t_tilecopy_copiedtile] 101

[dbo].[t_tilecopy_sourcetile] 104

[dbo].[t_tilestatus] 106

[dbo].[t_tilestatus_copy_booking] 111

[dbo].[t tilestatus copy booking history] 114


-----

[dbo].[t_tilestatus_upgrade_booking] 118

[dbo].[t_traces] 121

[dbo].[t_user] 122

[licensing].[t_billing_type] 125

[licensing].[t_customer] 127

[licensing].[t_import_data] 129

[licensing].[t_license_file_history] 131

[licensing].[t_object_type] 133

[licensing].[t_order] 135

[licensing].[t_orderline] 137

[licensing].[t_payment] 139

[licensing].[t_payment_method] 141

[licensing].[t_price] 143

[licensing].[t_pricelist] 145

[licensing].[t_product] 147

[licensing].[t_promo_code] 149

[licensing].[t_promo_type] 151

[licensing].[t_status] 153

[licensing].[t_subscription] 155

[licensing].[t_subscription_device] 158

[licensing].[t subscription user] 160


-----

[mft].[t_chunkingmachine_history] 165

[mft].[t_chunkingmachine_status] 168

[mft].[t_mergemachine] 170

[mft].[t_mergemachine_history] 173

[mft].[t_mergemachine_status] 175

[mft].[t_state_machine_status] 177

[mft].[t_storagemachine_status] 178

[mft].[t_storageoperations] 180

[mft].[t_storageoperations_history] 183

[mft].[t_storageoperationtype] 186

Stored Procedures 188

[auth].[p_user_add_role] 196

[auth].[p_user_delete] 197

[auth].[p_user_get_by_username] 198

[auth].[p_user_get_password] 200

[auth].[p_user_get_roles] 201

[auth].[p_user_insert] 202

[auth].[p_user_remove_role] 204

[auth].[p_user_update] 205

[auth].[p_user_update_password] 207

[conversion].[p conversion book] 208


-----

[conversion].[p_conversion_book_history] 211

[conversion].[p_conversion_insert] 213

[conversion].[p_conversion_unbook] 215

[conversion].[p_image_resizing_book] 216

[conversion].[p_image_resizing_book_fallback] 217

[conversion].[p_image_resizing_book_history] 218

[conversion].[p_image_resizing_booking_insert] 220

[conversion].[p_image_resizing_unbook] 222

[dbo].[p_cache_load] 223

[dbo].[p_cache_publishid_get] 224

[dbo].[p_canvasshotter_book] 225

[dbo].[p_canvasshotter_booking_history_search] 226

[dbo].[p_canvasshotter_booking_insert_conditional] 228

[dbo].[p_canvasshotter_fallback] 230

[dbo].[p_canvasshotter_history] 231

[dbo].[p_canvasshotter_unbook] 233

[dbo].[p_configuration_get_all] 234

[dbo].[p_configuration_load] 235

[dbo].[p_configuration_set] 236

[dbo].[p_get_all_template_types] 237

[dbo].[p insert event] 238


-----

[dbo].[p_language_get_all] 240

[dbo].[p_language_insert] 241

[dbo].[p_language_is_id_valid] 242

[dbo].[p_newsletter_subscriber_insert] 243

[dbo].[p_online_user_book] 245

[dbo].[p_online_user_check_connected] 246

[dbo].[p_online_user_delete] 247

[dbo].[p_online_user_get_by_connectionid] 248

[dbo].[p_online_user_get_by_username] 250

[dbo].[p_online_user_get_first_by_project_id] 252

[dbo].[p_online_user_get_projectid] 253

[dbo].[p_online_user_insert] 254

[dbo].[p_online_user_search_backend] 256

[dbo].[p_online_user_set_disconnected] 258

[dbo].[p_online_user_unbook] 259

[dbo].[p_online_user_unbook_forgot] 260

[dbo].[p_online_user_update_keepalive] 261

[dbo].[p_project_copy_book] 262

[dbo].[p_project_copy_fallback] 263

[dbo].[p_project_copy_history] 264

[dbo].[p project copy history search] 266


-----

[dbo].[p_project_copy_unbook] 270

[dbo].[p_project_delete_template] 271

[dbo].[p_project_get_by_id] 272

[dbo].[p_project_get_by_userid] 274

[dbo].[p_project_get_connectionid_for_presenter] 275

[dbo].[p_project_get_containeruri] 276

[dbo].[p_project_get_coparticipating_projects] 277

[dbo].[p_project_get_coparticipating_users] 279

[dbo].[p_project_get_licensed_projects] 281

[dbo].[p_project_get_participating_projects] 283

[dbo].[p_project_get_participating_projects_count] 286

[dbo].[p_project_get_templates] 287

[dbo].[p_project_insert] 289

[dbo].[p_project_participant_delete] 291

[dbo].[p_project_participant_get_by_coparticipant] 292

[dbo].[p_project_participant_get_by_projectid] 293

[dbo].[p_project_participant_get_by_projectid_and_userid] 294

[dbo].[p_project_participant_get_by_userid] 295

[dbo].[p_project_participant_insert] 296

[dbo].[p_project_participant_update] 297

[dbo].[p project remove user as presenter in all] 298


-----

[dbo].[p_project_set_presenter] 301

[dbo].[p_project_setlock] 302

[dbo].[p_project_setversion] 303

[dbo].[p_project_tag_delete] 304

[dbo].[p_project_tag_get_by_projectid] 305

[dbo].[p_project_tag_get_by_projectids] 306

[dbo].[p_project_tag_insert] 308

[dbo].[p_project_update] 309

[dbo].[p_project_update_background] 310

[dbo].[p_project_update_canvas_size_ratio] 311

[dbo].[p_project_update_deleted] 312

[dbo].[p_project_update_owner] 313

[dbo].[p_project_update_sas_token] 315

[dbo].[p_project_update_template] 316

[dbo].[p_project_update_thumbnail] 318

[dbo].[p_project_update_zoom_offset] 319

[dbo].[p_project_upgrade_book] 320

[dbo].[p_project_upgrade_fallback] 321

[dbo].[p_project_upgrade_history] 322

[dbo].[p_project_upgrade_insert] 324

[dbo].[p project upgrade unbook] 326


-----

[dbo].[p_projecttypes_delete] 329

[dbo].[p_projecttypes_get_all_template_types] 330

[dbo].[p_projecttypes_insert_new_projecttype] 332

[dbo].[p_projecttypes_update] 334

[dbo].[p_projecttypes_verify_if_template] 336

[dbo].[p_quicklink_delete] 337

[dbo].[p_quicklink_get_by_id] 338

[dbo].[p_quicklink_get_by_projectid] 339

[dbo].[p_quicklink_get_tiles_for_quicklink] 341

[dbo].[p_quicklink_insert] 342

[dbo].[p_quicklink_remove_tile_from_quicklinks] 344

[dbo].[p_quicklink_update] 345

[dbo].[p_storage_eraser_book] 347

[dbo].[p_storage_eraser_unbook] 348

[dbo].[p_telemetry_insert] 349

[dbo].[p_tile_relation_by_participating_tile] 350

[dbo].[p_tile_relation_delete] 353

[dbo].[p_tile_relation_delete_all_by_tileid] 354

[dbo].[p_tile_relation_get_by_projectid] 355

[dbo].[p_tile_relation_get_by_projectid_paged] 356

[dbo].[p tile relation insert] 358


-----

[dbo].[p_tile_relation_with_tile] 362

[dbo].[p_tile_voting_get_by_projectid_and_user_id] 364

[dbo].[p_tile_voting_get_by_projectid_and_user_id_paged] 365

[dbo].[p_tile_voting_update] 367

[dbo].[p_tilecopy_cleanup] 369

[dbo].[p_tilecopy_getcopiedtiles_by_token] 370

[dbo].[p_tilecopy_getrelations_by_token] 372

[dbo].[p_tilecopy_getsourcetiles_by_token] 374

[dbo].[p_tilecopy_insertcopiedtile] 375

[dbo].[p_tilecopy_insertrelation] 379

[dbo].[p_tilecopy_insertsourcetile] 381

[dbo].[p_tilestatus_copy_book] 383

[dbo].[p_tilestatus_copy_fallback] 384

[dbo].[p_tilestatus_copy_history] 385

[dbo].[p_tilestatus_copy_history_search] 387

[dbo].[p_tilestatus_copy_insert] 389

[dbo].[p_tilestatus_copy_unbook] 391

[dbo].[p_tilestatus_delete] 392

[dbo].[p_tilestatus_get_by_id] 394

[dbo].[p_tilestatus_get_by_parenttile] 396

[dbo].[p tilestatus get by projectid] 398


-----

[dbo].[p_tilestatus_get_by_projectid_with_thumbnails] 402

[dbo].[p_tilestatus_get_max_zindex] 404

[dbo].[p_tilestatus_get_thumbnails_for_tile] 405

[dbo].[p_tilestatus_get_toplevel_by_projectid] 407

[dbo].[p_tilestatus_get_upgradable_for_project] 408

[dbo].[p_tilestatus_gettree_by_id] 410

[dbo].[p_tilestatus_insert] 413

[dbo].[p_tilestatus_stroke_by_tileid] 416

[dbo].[p_tilestatus_stroke_insert] 417

[dbo].[p_tilestatus_stroke_update] 418

[dbo].[p_tilestatus_unlock_by_ids] 419

[dbo].[p_tilestatus_unlock_by_lockedby] 420

[dbo].[p_tilestatus_unlock_by_project_lockedby] 421

[dbo].[p_tilestatus_unlock_forgot] 423

[dbo].[p_tilestatus_update] 424

[dbo].[p_tilestatus_update_blobstatusid] 426

[dbo].[p_tilestatus_update_containertype] 428

[dbo].[p_tilestatus_update_content] 430

[dbo].[p_tilestatus_update_grouped] 431

[dbo].[p_tilestatus_update_lock] 433

[dbo].[p tilestatus update pinning] 435


-----

[dbo].[p_tilestatus_update_voting] 438

[dbo].[p_tilestatus_update_zindex] 439

[dbo].[p_tilestatus_upgrade_book] 440

[dbo].[p_tilestatus_upgrade_file] 441

[dbo].[p_tilestatus_upgrade_insert] 442

[dbo].[p_tilestatus_upgrade_unbook] 444

[dbo].[p_update_blobstatus_for_thumbnails] 445

[dbo].[p_user_get_all] 446

[dbo].[p_user_get_by_project] 447

[dbo].[p_user_get_by_project_count] 448

[dbo].[p_user_get_by_userid] 449

[dbo].[p_user_get_by_username] 450

[dbo].[p_user_insert] 452

[dbo].[p_user_update] 454

[licensing].[p_billing_type_delete] 456

[licensing].[p_billing_type_get_all] 457

[licensing].[p_billing_type_get_by_id] 458

[licensing].[p_billing_type_insert] 459

[licensing].[p_billing_type_update] 460

[licensing].[p_customer_delete] 461

[licensing].[p customer get all] 462


-----

[licensing].[p_customer_get_by_username] 464

[licensing].[p_customer_insert] 465

[licensing].[p_customer_search] 466

[licensing].[p_customer_update] 467

[licensing].[p_import_data_book] 468

[licensing].[p_import_data_delete] 470

[licensing].[p_import_data_insert] 471

[licensing].[p_import_data_unbook] 473

[licensing].[p_license_file_history_get_by_id] 474

[licensing].[p_license_file_history_insert] 475

[licensing].[p_license_file_history_search] 476

[licensing].[p_order_delete] 478

[licensing].[p_order_get_all] 479

[licensing].[p_order_get_by_id] 480

[licensing].[p_order_insert] 481

[licensing].[p_order_search] 483

[licensing].[p_order_update] 485

[licensing].[p_orderline_delete] 487

[licensing].[p_orderline_get_all] 488

[licensing].[p_orderline_get_by_id] 489

[licensing].[p orderline get by orderid] 490


-----

[licensing].[p_orderline_update] 493

[licensing].[p_payment_delete] 495

[licensing].[p_payment_get_all] 496

[licensing].[p_payment_get_by_id] 497

[licensing].[p_payment_insert] 498

[licensing].[p_payment_method_delete] 500

[licensing].[p_payment_method_get_all] 501

[licensing].[p_payment_method_get_by_id] 502

[licensing].[p_payment_method_insert] 503

[licensing].[p_payment_method_update] 504

[licensing].[p_payment_search] 505

[licensing].[p_payment_update] 507

[licensing].[p_price_delete] 508

[licensing].[p_price_get_all] 509

[licensing].[p_price_get_by_id] 510

[licensing].[p_price_get_by_pricelistid] 511

[licensing].[p_price_insert] 512

[licensing].[p_price_update] 514

[licensing].[p_pricelist_delete] 515

[licensing].[p_pricelist_get_all] 516

[licensing].[p pricelist get by id] 517


-----

[licensing].[p_pricelist_update] 520

[licensing].[p_product_delete] 521

[licensing].[p_product_get_all] 522

[licensing].[p_product_get_by_id] 523

[licensing].[p_product_get_by_productfamily] 524

[licensing].[p_product_insert] 525

[licensing].[p_product_update] 527

[licensing].[p_promo_code_delete] 529

[licensing].[p_promo_code_get_all] 530

[licensing].[p_promo_code_get_by_code] 531

[licensing].[p_promo_code_get_by_id] 532

[licensing].[p_promo_code_get_by_promotypeid] 533

[licensing].[p_promo_code_insert] 535

[licensing].[p_promo_code_update] 537

[licensing].[p_promo_type_delete] 539

[licensing].[p_promo_type_get_all] 540

[licensing].[p_promo_type_get_by_id] 541

[licensing].[p_promo_type_insert] 542

[licensing].[p_promo_type_update] 543

[licensing].[p_subscription_delete] 544

[licensing].[p subscription device delete] 545


-----

[licensing].[p_subscription_device_get_by_id] 547

[licensing].[p_subscription_device_get_by_subscriptionid] 548

[licensing].[p_subscription_device_get_by_subscriptionid_devicecode]
549

[licensing].[p_subscription_device_insert] 550

[licensing].[p_subscription_device_update] 552

[licensing].[p_subscription_get_all] 553

[licensing].[p_subscription_get_by_customerid] 554

[licensing].[p_subscription_get_by_customerid_productfamilycode]
555

[licensing].[p_subscription_get_by_id] 557

[licensing].[p_subscription_get_by_subscriptiondevice] 558

[licensing].[p_subscription_get_by_subscriptionuser] 560

[licensing].[p_subscription_insert] 562

[licensing].[p_subscription_search] 564

[licensing].[p_subscription_update] 566

[licensing].[p_subscription_user_delete] 568

[licensing].[p_subscription_user_get_all] 569

[licensing].[p_subscription_user_get_by_id] 570

[licensing].[p_subscription_user_get_by_subscriptionid_username]
571

[licensing].[p_subscription_user_insert] 572


-----

[licensing].[p_subscription_user_update] 575

[mft].[p_check_download_available] 576

[mft].[p_check_storageoperation_finished] 577

[mft].[p_check_upload_finished] 578

[mft].[p_chunkingmachine_book] 579

[mft].[p_chunkingmachine_completed] 581

[mft].[p_chunkingmachine_insert] 582

[mft].[p_chunkingmachine_unbook] 584

[mft].[p_cleaningmachine_bookchunking] 586

[mft].[p_cleaningmachine_bookmergemoving] 588

[mft].[p_cleaningmachine_bookmerging] 590

[mft].[p_cleaningmachine_move_chunkinghistory] 592

[mft].[p_cleaningmachine_move_mergehistory] 593

[mft].[p_cleaningmachine_unbookchunking] 594

[mft].[p_cleaningmachine_unbookmerging] 596

[mft].[p_cleaningmachinenotcompleted_bookchunking] 597

[mft].[p_cleaningmachinenotcompleted_bookchunkingmoving] 599

[mft].[p_cleaningmachinenotcompleted_bookmerging] 601

[mft].[p_configuration_load_documentexplorer] 603

[mft].[p_get_activity_from_chunking] 604

[mft].[p get activity from merge] 605


-----

[mft].[p_mergemachine_book] 607

[mft].[p_mergemachine_insert] 609

[mft].[p_mergemachine_ready_to_process] 611

[mft].[p_mergemachine_unbook] 612

[mft].[p_storagemachine_book] 613

[mft].[p_storagemachine_insert] 614

[mft].[p_storagemachine_unbook] 616

[mft].[p_storageoperations_move_history] 617

Scalar-valued Functions 618

[conversion].[fn_GetConvertableFileTypeId] 619

[conversion].[fn_GetStateMachineStatusId] 620

[dbo].[fn_GetBlobStatus] 621

[dbo].[fn_GetCacheId] 622

[dbo].[fn_GetOfficeconverterMachineStatusId] 623

[dbo].[fn_GetStateMachineStatusId] 624

[dbo].[fn_GetTileType] 626

[licensing].[fn_ApplyFilter] 628

[mft].[fn_GetChunkingMachineStatusId] 629

[mft].[fn_GetMergeMachineStatusId] 631

[mft].[fn_GetStateMachineStatusId] 633

[mft].[fn GetStorageMachineStatusId] 634


-----

# localhost

Databases (1)

IBV.Database

Server Properties

Property

Value

Product

Microsoft SQL Server

Version

15.0.4123.1

Language

English

Platform

NT x64

Edition

Developer Edition (64-bit)

Engine Edition

3 (Enterprise)

Processors


-----

6.2 (9200)

Physical Memory

41082

Is Clustered

False

Root Directory

C:\

Collation

SQL_Latin1_General_CP1_CI_AS

Server Settings

Property

Value

Default data file path

/var/opt/mssql/data/

Default backup file path

/var/opt/mssql/data

Default log file path

/var/opt/mssql/data/

Recovery Interval (minutes)

0i


-----

Default backup media retention

0

Compress Backup

False

Advanced Server Settings

Property

Value

Locks

0

Nested triggers enabled

True

Allow triggers to fire others

True

Default language

English

Network packet size

4096

Default fulltext language LCID

1033

Two-digit year cutoff


-----

10

Cursor threshold

-1

Max text replication size

65536

Parallelism cost threshold

5

Max degree of parallelism

0

Min server memory

16

Max server memory

2147483647

Scan for startup procs

False

Transform noise words

False

CLR enabled

False

Blocked process threshold


-----

False

Optimize for ad hoc workloads

False

CLR strict security

True

## User databases

Databases (1)

IBV.Database

**IBV.Database Database**

Database Properties

Property

Value

SQL Server Version

Max

Compatibility Level


-----

Last backup time

- 

Last log backup time

- 

Creation date

May 14 2021

Users

4

Database Encryption Enabled

False

Database Encryption Algorithm

None

Database size

80.00 MB

Unallocated space

62.36 MB

Database Options

Property

Value

Compatibility Level


-----

SQL_Latin1_General_CP1_CI_AS

Restrict access

MULTI_USER

Is read-only

False

Auto close

False

Auto shrink

False

Database status

ONLINE

In standby

False

Cleanly shutdown

False

Supplemental logging enabled

False

Snapshot isolation state

OFF

Read committed snapshot on

False


-----

FULL

Page verify option

CHECKSUM

Auto create statistics

True

Auto update statistics

True

Auto update statistics asynchronously

False

ANSI NULL default

False

ANSI NULL enabled

False

ANSI padding enabled

False

ANSI warnings enabled

False

Arithmetic abort enabled

False

Concatenating NULL yields NULL

False


-----

False

Quoted Identifier On

False

Recursive triggers enabled

False

Close cursors on commit

False

Local cursors by default

False

Fulltext enabled

True

Trustworthy

False

Database chaining

False

Forced parameterization

False

Master key encrypted by server

False

Published

False


-----

False

Merge published

False

Is distribution database

False

Sync with backup

False

Service broker GUID

ee0fd386-a58c-49c6-8264-7625d43833e4

Service broker enabled

True

Log reuse wait

OLDEST_PAGE

Date correlation

False

CDC enabled

False

Encrypted

False

Honor broker priority

False


-----

English

Default fulltext language LCID

1033

Nested triggers enabled

True

Transform noise words

False

Two-digit year cutoff

2049

Containment

NONE

Target recovery time

60

Database owner

sa

Files

Name

Type

Size

Maxsize


-----

IBV.Database

Data

72,00 MB

unlimited

64,00 MB

/var/opt/mssql/data/IBV.Database_Primary.mdf

IBV.Database_log

Log

8,00 MB

2048,00 GB

64,00 MB

/var/opt/mssql/data/IBV.Database_Primary.ldf

**Tables**

Objects

Name

auth.t_role All available roles for authentication

auth.t_user All users, used by authentication

auth.t user role Authenticated users and their roles


-----

conversion.t_conversion_booking_history Office Conversion state
machine history

conversion.t_convertable_file_type Types of files that can be
converted

conversion.t_image_resizing_booking Image resizer state machine

conversion.t_image_resizing_booking_history Image resizer state
machine history

conversion.t_state_machine_status State of state machine

dbo.t_blob_status State of blob

dbo.t_caches Configuration Cache

dbo.t_canvasshotter_booking Screenshot of project state machine

dbo.t_canvasshotter_booking_history Screenshot of project state
machine history

dbo.t_configuration Configuration data

dbo.t_events Events

dbo.t_language Languages used for translating templates

dbo.t_newsletter_subscriber Subcsribers to the newsletter

dbo.t_online_user A user who is currently in a project

dbo.t_project All projects

dbo.t_project_copy_booking Copy project state machine

dbo.t_project_copy_booking_history Copy project state machine
history

dbo.t_project_participant Users who have access to a project


-----

dbo.t_project_type The type of project (user project or template)

dbo.t_project_type_translation The project template type translation

dbo.t_project_upgrade_booking Upgrade mechanism state machine

dbo.t_project_upgrade_booking_history Upgrade mechanism state
machine history

dbo.t_quicklink Quicklinks in a project

dbo.t_quicklink_tile Linking table between quicklinks and the tiles

dbo.t_state_machine_status Status of the state machine

dbo.t_telemetrydata Data for telemetry

dbo.t_template_translation Translated entries for the templates

dbo.t_tile_relation Relation between tiles

dbo.t_tile_relation_anchor The type of anchor for a relation

dbo.t_tile_relation_line The type of line between relation

dbo.t_tile_relation_line_style The line styles for a relation

dbo.t_tile_relation_startend_symbol The symbol used for the relation
line start

dbo.t_tile_relation_style The style of the relation

dbo.t_tile_relation_type The type of the relation

dbo.t_tile_type The type of the tile

dbo.t_tile_voting Voting for the tile

dbo.t_tilecopy_copiedrelation All copied relations for a copy
command


-----

dbo.t_tilecopy_sourcetile All source tiles used in a copy command

dbo.t_tilestatus The tiles

dbo.t_tilestatus_copy_booking Copy of a tile state machine

dbo.t_tilestatus_copy_booking_history Copy of a tile state machine
history

dbo.t_tilestatus_stroke The stroke for inking in a tile

dbo.t_tilestatus_upgrade_booking Tile update mechanism state
machine

dbo.t_traces Debug / Trace information

dbo.t_user The user as used in tiles and projects

licensing.t_billing_type The type of billing

licensing.t_customer The registered customer

licensing.t_import_data Licensing data that has been imported from
an external file

licensing.t_license_file_history History of all licensing files

licensing.t_object_type Type of object used in look-up tables for
licensing

licensing.t_order The orders

licensing.t_orderline The line in an order

licensing.t_payment The payments made

licensing.t_payment_method The methods of payment

licensing.t_price The price

li i t i li t Th i li t


-----

licensing.t_promo_code Promo codes

licensing.t_promo_type The types of promo code

licensing.t_status The status of the licensing related objects

licensing.t_subscription Subscriptions

licensing.t_subscription_device The devices allowed to use a
subscription

licensing.t_subscription_user The users allowed to use a subscription

mft.t_chunkingmachine State machine for the chunking service
(download Blobs)

mft.t_chunkingmachine_history State machine for the chunking
service history

mft.t_chunkingmachine_status Status of the chunking service state
machine

mft.t_mergemachine State machine for the merging service (upload
Blobs)

mft.t_mergemachine_history State machine for the merging service
history

mft.t_mergemachine_status Status of the merging service state
machine

mft.t_state_machine_status All states for the MFT state machines

mft.t_storagemachine_status State of the Storage state machine

mft.t_storageoperations State machine for the Storage service (file
operations)

mft.t_storageoperations_history State machine for the Storage
service history


-----

**[auth].[t_role]**

MS_Description

All available roles for authentication

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:21 vrijdag 14 mei 2021

Last Modified

06:53:21 vrijdag 14 mei 2021

Columns

Key

Name


-----

Nullability

id

int

4

NOT NULL

name

nvarchar(250)

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_role

id

True

SQL Script

[ h] [ l ]


-----

[id] [int] NOT NULL,

[name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [auth].[t_role] ADD CONSTRAINT [PK_t_role]
PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'All available
roles for authentication', 'SCHEMA', N'auth', 'TABLE', N't_role',
NULL, NULL

GO

Uses

[auth]

Used By

[auth].[t_user_role]

[auth].[p_user_add_role]

[auth].[p_user_get_roles]

[auth].[p_user_remove_role]

**[auth].[t_user]**


-----

MS_Description

All users, used by authentication

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:21 vrijdag 14 mei 2021

Last Modified

06:53:21 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default


-----

16

NOT NULL

username

nvarchar(250)

500

NOT NULL

firstname

nvarchar(250)

500

NULL allowed

lastname

nvarchar(250)

500

NULL allowed

email

nvarchar(250)

500


-----

phonenumber

nvarchar(50)

100

NULL allowed

language

nvarchar(50)

100

NULL allowed

photourl

nvarchar(500)

1000

NULL allowed

creationdate

datetime

8

NULL allowed


-----

datetime

8

NULL allowed

terms_accepted

datetime

8

NULL allowed

isverified

bit

1

NOT NULL

((0))

passwordhash

nvarchar(250)

500

NULL allowed

lockout_enabled

bit


-----

NOT NULL

((1))

lockout_end_date

datetime

8

NULL allowed

otp_security_key

nvarchar(250)

500

NULL allowed

external_provider

nvarchar(50)

100

NULL allowed

authentication_mode

int

4

NOT NULL


-----

Indexes

Key

Name

Key Columns

Unique

PK_t_user

id

True

IX_t_user_username

username

True

SQL Script

CREATE TABLE [auth].[t_user]

(

[id] [uniqueidentifier] NOT NULL,

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[firstname] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lastname] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,


-----

NULL,

[phonenumber] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[language] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[photourl] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[creationdate] [datetime] NULL,

[lastlogindate] [datetime] NULL,

[terms_accepted] [datetime] NULL,

[isverified] [bit] NOT NULL CONSTRAINT [DF_t_user_isverified]
DEFAULT ((0)),

[passwordhash] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lockout_enabled] [bit] NOT NULL CONSTRAINT

[DF_t_user_lockout_enabled] DEFAULT ((1)),

[lockout_end_date] [datetime] NULL,

[otp_security_key] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[external_provider] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[authentication_mode] [int] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [auth].[t_user] ADD CONSTRAINT [PK_t_user]


-----

CREATE UNIQUE NONCLUSTERED INDEX [IX_t_user_username] ON

[auth].[t_user] ([username]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'All users, used
by authentication', 'SCHEMA', N'auth', 'TABLE', N't_user', NULL,
NULL

GO

Uses

[auth]

Used By

[auth].[t_user_role]

[auth].[p_user_add_role]

[auth].[p_user_delete]

[auth].[p_user_get_by_username]

[auth].[p_user_get_password]

[auth].[p_user_get_roles]

[auth].[p_user_insert]

[auth].[p_user_remove_role]

[auth].[p_user_update]

[auth].[p_user_update_password]


-----

MS_Description

Authenticated users and their roles

Properties

Property

Value

Row Count (~)

1

Created

06:53:21 vrijdag 14 mei 2021

Last Modified

06:53:21 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

useridi


-----

NOT NULL

roleid

int

4

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_user_role

userid, roleid

True

Foreign Keys

Name

Columns

FK_t_user_role_t_role

roleid->[auth].[t_role].[id]

FK_t_user_role_t_user


-----

SQL Script

CREATE TABLE [auth].[t_user_role]

(

[userid] [uniqueidentifier] NOT NULL,

[roleid] [int] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [auth].[t_user_role] ADD CONSTRAINT

[PK_t_user_role] PRIMARY KEY CLUSTERED ([userid], [roleid]) ON

[PRIMARY]

GO

ALTER TABLE [auth].[t_user_role] ADD CONSTRAINT

[FK_t_user_role_t_role] FOREIGN KEY ([roleid]) REFERENCES

[auth].[t_role] ([id])

GO

ALTER TABLE [auth].[t_user_role] ADD CONSTRAINT

[FK_t_user_role_t_user] FOREIGN KEY ([userid]) REFERENCES

[auth].[t_user] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Authenticated
users and their roles', 'SCHEMA', N'auth', 'TABLE', N't_user_role',
NULL, NULL

GO


-----

[auth].[t_role]

[auth].[t_user]

[auth]

Used By

[auth].[p_user_add_role]

[auth].[p_user_delete]

[auth].[p_user_get_roles]

[auth].[p_user_remove_role]

**[conversion].[t_conversion_booking]**

MS_Description

Office Conversion state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)


-----

06:53:15 vrijdag 14 mei 2021

Last Modified

06:53:15 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

id

int

4

NOT NULL

1 - 1

entityid

uniqueidentifier

16


-----

updatedby

nvarchar(200)

400

NULL allowed

creationdate

datetime

8

NOT NULL

(getutcdate())

lastupdate

datetime

8

NULL allowed

bookedby

uniqueidentifier

16


-----

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

domain

nvarchar(200)

400

NULL allowed

username

nvarchar(200)

400


-----

filename

nvarchar(250)

500

NOT NULL

destinationfolder

nvarchar(250)

500

NULL allowed

convertablefiletypeid

int

4

NOT NULL

((1))

projectid

int


-----

stateMachinestatusid

int

4

NOT NULL

((0))

machineid

uniqueidentifier

16

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK__t_conver__3213E83F8EEC23CD

id

True


-----

IX_t_conversion_booking_statemachinestatusid

stateMachinestatusid

Foreign Keys

Name

Columns

t_conversion_booking_t_convertable_file_type

convertablefiletypeid->[conversion].[t_convertable_file_type].

[convertablefiletypeid]

t_conversion_booking_t_state_machine_status

stateMachinestatusid->[conversion].[t_state_machine_status].

[statemachinestatusid]

SQL Script

CREATE TABLE [conversion].[t_conversion_booking]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[entityid] [uniqueidentifier] NOT NULL,

[updatedby] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[creationdate] [datetime] NOT NULL CONSTRAINT

[DF_t_conversion_booking_creationdate] DEFAULT (getutcdate()),

[lastupdate] [datetime] NULL,

[bookedby] [uniqueidentifier] NULL,


-----

[retry] [int] NOT NULL CONSTRAINT

[DF__t_convers__retry__00AA174D] DEFAULT ((0)),

[domain] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filename] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[destinationfolder] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[convertablefiletypeid] [int] NOT NULL CONSTRAINT

[DF_t_conversion_booking_convertablefiletype] DEFAULT ((1)),

[projectid] [int] NOT NULL,

[stateMachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_conversion_booking_statemachinestatusid] DEFAULT ((0)),

[machineid] [uniqueidentifier] NULL

) ON [PRIMARY]

GO

ALTER TABLE [conversion].[t_conversion_booking] ADD
CONSTRAINT [PK__t_conver__3213E83F8EEC23CD] PRIMARY KEY
CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_conversion_booking_statemachinestatusid] ON [conversion].

[t_conversion_booking] ([stateMachinestatusid]) ON [PRIMARY]

GO


-----

CONSTRAINT [t_conversion_booking_t_convertable_file_type]
FOREIGN KEY ([convertablefiletypeid]) REFERENCES [conversion].

[t_convertable_file_type] ([convertablefiletypeid])

GO

ALTER TABLE [conversion].[t_conversion_booking] ADD
CONSTRAINT [t_conversion_booking_t_state_machine_status]
FOREIGN KEY ([stateMachinestatusid]) REFERENCES [conversion].

[t_state_machine_status] ([statemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Office
Conversion state machine', 'SCHEMA', N'conversion', 'TABLE',
N't_conversion_booking', NULL, NULL

GO

Uses

[conversion].[t_convertable_file_type]

[conversion].[t_state_machine_status]

[conversion]

Used By

[conversion].[p_conversion_book]

[conversion].[p_conversion_book_fallback]

[conversion].[p_conversion_book_history]

[conversion].[p_conversion_insert]

[conversion].[p_conversion_unbook]


-----

MS_Description

Office Conversion state machine history

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:15 vrijdag 14 mei 2021

Last Modified

06:53:15 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability


-----

id

int

4

NOT NULL

entityid

uniqueidentifier

16

NOT NULL

updatedby

nvarchar(200)

400

NULL allowed

creationdate

datetime

8

NOT NULL

lastupdate


-----

NULL allowed

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

domain

nvarchar(200)

400


-----

username

nvarchar(200)

400

NOT NULL

filename

nvarchar(250)

500

NOT NULL

destinationfolder

nvarchar(250)

500

NULL allowed

convertablefiletypeid

int

4

NOT NULL


-----

int

4

NOT NULL

stateMachinestatusid

int

4

NOT NULL

machineid

uniqueidentifier

16

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK__t_conver__3213E83F06B78952

id


-----

SQL Script

CREATE TABLE [conversion].[t_conversion_booking_history]

(

[id] [int] NOT NULL,

[entityid] [uniqueidentifier] NOT NULL,

[updatedby] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[creationdate] [datetime] NOT NULL,

[lastupdate] [datetime] NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF__t_convers__retry__056ECC6A] DEFAULT ((0)),

[domain] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filename] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[destinationfolder] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[convertablefiletypeid] [int] NOT NULL,

[projectid] [int] NOT NULL,


-----

[machineid] [uniqueidentifier] NULL

) ON [PRIMARY]

GO

ALTER TABLE [conversion].[t_conversion_booking_history] ADD
CONSTRAINT [PK__t_conver__3213E83F06B78952] PRIMARY KEY
CLUSTERED ([id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Office
Conversion state machine history', 'SCHEMA', N'conversion',
'TABLE', N't_conversion_booking_history', NULL, NULL

GO

Uses

[conversion]

Used By

[conversion].[p_conversion_book_history]

**[conversion].[t_convertable_file_type]**

MS_Description

Types of files that can be converted

Properties


-----

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

5

Created

06:53:15 vrijdag 14 mei 2021

Last Modified

06:53:15 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

convertablefiletypeid

int

4

NOT NULL


-----

200

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_convertable_file_type

convertablefiletypeid

True

SQL Script

CREATE TABLE [conversion].[t_convertable_file_type]

(

[convertablefiletypeid] [int] NOT NULL,

[description] [nvarchar] (100) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [conversion].[t_convertable_file_type] ADD
CONSTRAINT [PK_t_convertable_file_type] PRIMARY KEY
CLUSTERED ([convertablefiletypeid]) ON [PRIMARY]


-----

EXEC sp_addextendedproperty N'MS_Description', N'Types of files
that can be converted', 'SCHEMA', N'conversion', 'TABLE',
N't_convertable_file_type', NULL, NULL

GO

Uses

[conversion]

Used By

[conversion].[t_conversion_booking]

**[conversion].[t_image_resizing_booking]**

MS_Description

Image resizer state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)


-----

06:53:15 vrijdag 14 mei 2021

Last Modified

06:53:15 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

imageresizingbookingid

int

4

NOT NULL

1 - 1

tileid

uniqueidentifier

16


-----

updatedby

nvarchar(200)

400

NULL allowed

creationdate

datetime

8

NOT NULL

(getutcdate())

lastupdate

datetime

8

NULL allowed

fileName

nvarchar(250)

500


-----

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

projectid

int


-----

stateMachinestatusid

int

4

NOT NULL

((0))

machineid

uniqueidentifier

16

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_image_resizing_booking

imageresizingbookingid

True


-----

IX_t_image_resizing_booking_statemachinestatusid

stateMachinestatusid

Foreign Keys

Name

Columns

FK_t_image_resizing_booking_statemachinestatusid

stateMachinestatusid->[conversion].[t_state_machine_status].

[statemachinestatusid]

SQL Script

CREATE TABLE [conversion].[t_image_resizing_booking]

(

[imageresizingbookingid] [int] NOT NULL IDENTITY(1, 1),

[tileid] [uniqueidentifier] NOT NULL,

[updatedby] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[creationdate] [datetime] NOT NULL CONSTRAINT

[DF_t_image_resizing_creationdate] DEFAULT (getutcdate()),

[lastupdate] [datetime] NULL,

[fileName] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,


-----

[DF__t_image_r__retry__7CD98669] DEFAULT ((0)),

[projectid] [int] NOT NULL,

[stateMachinestatusid] [int] NOT NULL CONSTRAINT

[DF__t_image_r__state__7DCDAAA2] DEFAULT ((0)),

[machineid] [uniqueidentifier] NULL

) ON [PRIMARY]

GO

ALTER TABLE [conversion].[t_image_resizing_booking] ADD
CONSTRAINT [PK_t_image_resizing_booking] PRIMARY KEY
CLUSTERED ([imageresizingbookingid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_image_resizing_booking_statemachinestatusid] ON

[conversion].[t_image_resizing_booking] ([stateMachinestatusid])
ON [PRIMARY]

GO

ALTER TABLE [conversion].[t_image_resizing_booking] ADD
CONSTRAINT [FK_t_image_resizing_booking_statemachinestatusid]
FOREIGN KEY ([stateMachinestatusid]) REFERENCES [conversion].

[t_state_machine_status] ([statemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Image resizer
state machine', 'SCHEMA', N'conversion', 'TABLE',
N't_image_resizing_booking', NULL, NULL

GO


-----

[conversion]

Used By

[conversion].[p_image_resizing_book]

[conversion].[p_image_resizing_book_fallback]

[conversion].[p_image_resizing_book_history]

[conversion].[p_image_resizing_booking_insert]

[conversion].[p_image_resizing_unbook]

**[conversion].[t_image_resizing_booking_history]**

MS_Description

Image resizer state machine history

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created


-----

Last Modified

06:53:15 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

imageresizingbookingid

int

4

NOT NULL

tileid

uniqueidentifier

16

NOT NULL

updatedby


-----

400

NULL allowed

creationdate

datetime

8

NOT NULL

lastupdate

datetime

8

NULL allowed

fileName

nvarchar(250)

500

NULL allowed

bookedby

uniqueidentifier

16


-----

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

projectid

int

4

NOT NULL

stateMachinestatusid

int

4

NOT NULL

((0))


-----

machineid

uniqueidentifier

16

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK__t_image___1D6DA3FD05CCFB3B

imageresizingbookingid

True

SQL Script

CREATE TABLE [conversion].[t_image_resizing_booking_history]

(

[imageresizingbookingid] [int] NOT NULL,

[tileid] [uniqueidentifier] NOT NULL,

[updatedby] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[creationdate] [datetime] NOT NULL,


-----

[fileName] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF__t_image_r__retry__038683F8] DEFAULT ((0)),

[projectid] [int] NOT NULL,

[stateMachinestatusid] [int] NOT NULL CONSTRAINT

[DF__t_image_r__state__047AA831] DEFAULT ((0)),

[machineid] [uniqueidentifier] NULL

) ON [PRIMARY]

GO

ALTER TABLE [conversion].[t_image_resizing_booking_history] ADD
CONSTRAINT [PK__t_image___1D6DA3FD05CCFB3B] PRIMARY KEY
CLUSTERED ([imageresizingbookingid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Image resizer
state machine history', 'SCHEMA', N'conversion', 'TABLE',
N't_image_resizing_booking_history', NULL, NULL

GO

Uses

[conversion]

Used By


-----

**[conversion].[t_state_machine_status]**

MS_Description

State of state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

5

Created

06:53:15 vrijdag 14 mei 2021

Last Modified

06:53:15 vrijdag 14 mei 2021

Columns

Key

Name

Data Type


-----

Nullability

statemachinestatusid

int

4

NOT NULL

statemachinestatusdescription

nvarchar(50)

100

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_state_machine_status

statemachinestatusid

True

SQL Script

[ i ] [ hi ]


-----

[statemachinestatusid] [int] NOT NULL,

[statemachinestatusdescription] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [conversion].[t_state_machine_status] ADD
CONSTRAINT [PK_t_state_machine_status] PRIMARY KEY
CLUSTERED ([statemachinestatusid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'State of state
machine', 'SCHEMA', N'conversion', 'TABLE',
N't_state_machine_status', NULL, NULL

GO

Uses

[conversion]

Used By

[conversion].[t_conversion_booking]

[conversion].[t_image_resizing_booking]

**[dbo].[t_blob_status]**

MS D i i


-----

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

7

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

blobstatusid

int


-----

blobdescription

nvarchar(50)

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_blob_status

blobstatusid

True

SQL Script

CREATE TABLE [dbo].[t_blob_status]

(

[blobstatusid] [int] NOT NULL,

[blobdescription] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]


-----

[PK_t_blob_status] PRIMARY KEY CLUSTERED ([blobstatusid]) ON

[PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'State of blob ',
'SCHEMA', N'dbo', 'TABLE', N't_blob_status', NULL, NULL

GO

Used By

[dbo].[t_tilestatus]

**[dbo].[t_caches]**

MS_Description

Configuration Cache

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

2

Created


-----

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

cacheid

smallint

2

NOT NULL

publishid

uniqueidentifier

16

NOT NULL

pollingtimeinseconds

smallint


-----

cachename

nvarchar(50)

100

NOT NULL

cachedescription

nvarchar(50)

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK__t_caches__59913613F81D6554

cacheid

True

SQL Script

CREATE TABLE [dbo].[t_caches]


-----

[publishid] [uniqueidentifier] NOT NULL,

[pollingtimeinseconds] [smallint] NOT NULL,

[cachename] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[cachedescription] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_caches] ADD CONSTRAINT

[PK__t_caches__59913613F81D6554] PRIMARY KEY CLUSTERED
([cacheid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Configuration
Cache', 'SCHEMA', N'dbo', 'TABLE', N't_caches', NULL, NULL

GO

Used By

[dbo].[p_cache_load]

[dbo].[p_cache_publishid_get]

[dbo].[p_configuration_load]

[dbo].[p_configuration_set]

**[dbo].[t_canvasshotter_booking]**


-----

MS_Description

Screenshot of project state machine

Properties

Property

Value

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

canvasshotterid


-----

NOT NULL

1 - 1

creationdate

datetime

8

NOT NULL

(getutcdate())

userid

int

4

NOT NULL

projectid

int

4

NOT NULL


-----

datetime

8

NOT NULL

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))


-----

int

4

NOT NULL

((1))

Indexes

Key

Name

Key Columns

Unique

PK_t_canvasshotter_booking

canvasshotterid

True

nci_wi_t_project_7ADAB38961944CA62EFA69AF2981E8A3

bookedby, bookingdate

Foreign Keys

Name

Columns

FK_t_canvasshotter_booking_projectid


-----

FK_t_canvasshotter_booking_statemachinestatusid

statemachinestatusid->[dbo].[t_state_machine_status].

[statemachinestatusid]

FK_t_canvasshotter_booking_userid

userid->[dbo].[t_user].[userid]

SQL Script

CREATE TABLE [dbo].[t_canvasshotter_booking]

(

[canvasshotterid] [int] NOT NULL IDENTITY(1, 1),

[creationdate] [datetime] NOT NULL CONSTRAINT

[DF_t_canvasshotter_booking_creationdate] DEFAULT (getutcdate()),

[userid] [int] NOT NULL,

[projectid] [int] NOT NULL,

[lastupdate] [datetime] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF_t_canvasshotter_booking_retry] DEFAULT ((0)),

[statemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_canvasshotter_booking_statemachinestatusid] DEFAULT ((1))

) ON [PRIMARY]

GO


-----

[PK_t_canvasshotter_booking] PRIMARY KEY CLUSTERED
([canvasshotterid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[nci_wi_t_project_7ADAB38961944CA62EFA69AF2981E8A3] ON

[dbo].[t_canvasshotter_booking] ([bookedby], [bookingdate]) ON

[PRIMARY]

GO

ALTER TABLE [dbo].[t_canvasshotter_booking] ADD CONSTRAINT

[FK_t_canvasshotter_booking_projectid] FOREIGN KEY ([projectid])
REFERENCES [dbo].[t_project] ([projectid])

GO

ALTER TABLE [dbo].[t_canvasshotter_booking] ADD CONSTRAINT

[FK_t_canvasshotter_booking_statemachinestatusid] FOREIGN KEY
([statemachinestatusid]) REFERENCES [dbo].

[t_state_machine_status] ([statemachinestatusid])

GO

ALTER TABLE [dbo].[t_canvasshotter_booking] ADD CONSTRAINT

[FK_t_canvasshotter_booking_userid] FOREIGN KEY ([userid])
REFERENCES [dbo].[t_user] ([userid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Screenshot of
project state machine', 'SCHEMA', N'dbo', 'TABLE',
N't_canvasshotter_booking', NULL, NULL

GO

Uses


-----

[dbo].[t_state_machine_status]

[dbo].[t_user]

Used By

[dbo].[p_canvasshotter_book]

[dbo].[p_canvasshotter_booking_insert_conditional]

[dbo].[p_canvasshotter_fallback]

[dbo].[p_canvasshotter_history]

[dbo].[p_canvasshotter_unbook]

**[dbo].[t_canvasshotter_booking_history]**

MS_Description

Screenshot of project state machine history

Properties

Property

Value

Heap

True

Row Count (~)


-----

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Name

Data Type

Max Length (Bytes)

Nullability

canvasshotterid

int

4

NOT NULL

creationdate

datetime

8

NULL allowed

userid

int

4

NOT NULL


-----

NOT NULL

lastupdate

datetime

8

NOT NULL

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

statemachinestatusid

int


-----

SQL Script

CREATE TABLE [dbo].[t_canvasshotter_booking_history]

(

[canvasshotterid] [int] NOT NULL,

[creationdate] [datetime] NULL,

[userid] [int] NOT NULL,

[projectid] [int] NOT NULL,

[lastupdate] [datetime] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL,

[statemachinestatusid] [int] NOT NULL

) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Screenshot of
project state machine history', 'SCHEMA', N'dbo', 'TABLE',
N't_canvasshotter_booking_history', NULL, NULL

GO

Used By

[dbo].[p_canvasshotter_booking_history_search]


-----

**[dbo].[t_configuration]**

MS_Description

Configuration data

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

129

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)


-----

Default

key

nvarchar(100)

200

NOT NULL

value

nvarchar(max)

max

NOT NULL

description

nvarchar(250)

500

NOT NULL

AppDomain

nvarchar(50)

100

NOT NULL

(N'*')


-----

Indexes

Key

Name

Key Columns

Unique

PK__tmp_ms_x__DFD83CAE83521136

key

True

SQL Script

CREATE TABLE [dbo].[t_configuration]

(

[key] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[value] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[description] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[AppDomain] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT

[DF_t_configuration_AppDomain] DEFAULT (N'*')

) ON [PRIMARY]

GO

ALTER TABLE [dbo] [t configuration] ADD CONSTRAINT


-----

([key]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Configuration
data', 'SCHEMA', N'dbo', 'TABLE', N't_configuration', NULL, NULL

GO

Used By

[dbo].[p_configuration_get_all]

[dbo].[p_configuration_load]

[dbo].[p_configuration_set]

**[dbo].[t_events]**

MS_Description

Events

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Heap


-----

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

ID

int

4

NOT NULL

1 - 1

Message

nvarchar(max)


-----

NULL allowed

Params

nvarchar(max)

max

NULL allowed

LastUpdate

datetime

8

NULL allowed

(getutcdate())

SQL Script

CREATE TABLE [dbo].[t_events]

(

[ID] [int] NOT NULL IDENTITY(1, 1),

[Message] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[Params] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[LastUpdate] [datetime] NULL CONSTRAINT


-----

GO

EXEC sp_addextendedproperty N'MS_Description', N'Events',
'SCHEMA', N'dbo', 'TABLE', N't_events', NULL, NULL

GO

Used By

[dbo].[p_insert_event]

**[dbo].[t_language]**

MS_Description

Languages used for translating templates

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

1

Created

06:53:02 vrijdag 14 mei 2021


-----

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

languageId

int

4

NOT NULL

1 - 1

languageCode

nvarchar(25)

50

NULL allowed

( ' ')


-----

lcid

int

4

NULL allowed

name_english

nvarchar(250)

500

NULL allowed

name_native

nvarchar(250)

500

NULL allowed

Indexes

Key

Name

Key Columns

Unique


-----

languageId

True

SQL Script

CREATE TABLE [dbo].[t_language]

(

[languageId] [int] NOT NULL IDENTITY(1, 1),

[languageCode] [nvarchar] (25) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT

[DF_t_language_languageCode] DEFAULT (N'en/US'),

[lcid] [int] NULL,

[name_english] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[name_native] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_language] ADD CONSTRAINT

[PK_t_language] PRIMARY KEY CLUSTERED ([languageId]) ON

[PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Languages used
for translating templates', 'SCHEMA', N'dbo', 'TABLE', N't_language',
NULL, NULL

GO


-----

Used By

[dbo].[t_project_type_translation]

[dbo].[t_template_translation]

[dbo].[p_language_get_all]

[dbo].[p_language_insert]

[dbo].[p_language_is_id_valid]

**[dbo].[t_newsletter_subscriber]**

MS_Description

Subcsribers to the newsletter

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified


-----

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

email

nvarchar(250)

500

NOT NULL

firstname

nvarchar(50)


-----

lastname

nvarchar(50)

100

NULL allowed

language

nvarchar(50)

100

NULL allowed

creationdate

datetime

8

NOT NULL

is_active

bit

1

NOT NULL


-----

Key

Name

Key Columns

Unique

PK_t_newsletter_subscriber

id

True

SQL Script

CREATE TABLE [dbo].[t_newsletter_subscriber]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[email] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[firstname] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lastname] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[language] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[creationdate] [datetime] NOT NULL,

[is_active] [bit] NOT NULL

) ON [PRIMARY]


-----

ALTER TABLE [dbo].[t_newsletter_subscriber] ADD CONSTRAINT

[PK_t_newsletter_subscriber] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Subcsribers to
the newsletter', 'SCHEMA', N'dbo', 'TABLE',
N't_newsletter_subscriber', NULL, NULL

GO

Used By

[dbo].[p_newsletter_subscriber_insert]

**[dbo].[t_online_user]**

MS_Description

A user who is currently in a project

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)


-----

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

connectionid

nvarchar(50)

100

NOT NULL

machineid

uniqueidentifier

16

NOT NULL


-----

creationdate

datetime

8

NOT NULL

(getutcdate())

userid

int

4

NOT NULL

projectid

int

4

NULL allowed

logindate

datetime

8

NOT NULL

lastupdate


-----

NOT NULL

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

statemachinestatusid

int


-----

((1))

ispresenting

bit

1

NOT NULL

((0))

isdisconnected

bit

1

NOT NULL

((0))

Indexes

Key

Name

Key Columns

Unique

PK_t_online_user

connectionid

True


-----

projectid

IX_FK_t_online_user_t_state_machine_status

statemachinestatusid

IX_FK_t_online_user_t_user

userid

Foreign Keys

Name

Columns

FK_t_online_user_t_project

projectid->[dbo].[t_project].[projectid]

FK_t_online_user_t_state_machine_status

statemachinestatusid->[dbo].[t_state_machine_status].

[statemachinestatusid]

FK_t_online_user_t_user

userid->[dbo].[t_user].[userid]

SQL Script

CREATE TABLE [dbo].[t_online_user]


-----

SQL_Latin1_General_CP1_CI_AS NOT NULL,

[machineid] [uniqueidentifier] NOT NULL,

[creationdate] [datetime] NOT NULL CONSTRAINT

[DF_t_online_user_creationdate] DEFAULT (getutcdate()),

[userid] [int] NOT NULL,

[projectid] [int] NULL,

[logindate] [datetime] NOT NULL,

[lastupdate] [datetime] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT [DF_t_online_user_retry]
DEFAULT ((0)),

[statemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_online_user_statemachinestatusid] DEFAULT ((1)),

[ispresenting] [bit] NOT NULL CONSTRAINT

[DF__t_online___ispre__787EE5A0] DEFAULT ((0)),

[isdisconnected] [bit] NOT NULL CONSTRAINT

[DF__t_online___isdis__797309D9] DEFAULT ((0))

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_online_user] ADD CONSTRAINT

[PK_t_online_user] PRIMARY KEY CLUSTERED ([connectionid]) ON

[PRIMARY]

GO


-----

GO

CREATE NONCLUSTERED INDEX

[IX_FK_t_online_user_t_state_machine_status] ON [dbo].

[t_online_user] ([statemachinestatusid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_t_online_user_t_user] ON

[dbo].[t_online_user] ([userid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_online_user] ADD CONSTRAINT

[FK_t_online_user_t_project] FOREIGN KEY ([projectid])
REFERENCES [dbo].[t_project] ([projectid])

GO

ALTER TABLE [dbo].[t_online_user] ADD CONSTRAINT

[FK_t_online_user_t_state_machine_status] FOREIGN KEY
([statemachinestatusid]) REFERENCES [dbo].

[t_state_machine_status] ([statemachinestatusid])

GO

ALTER TABLE [dbo].[t_online_user] ADD CONSTRAINT

[FK_t_online_user_t_user] FOREIGN KEY ([userid]) REFERENCES

[dbo].[t_user] ([userid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'A user who is
currently in a project', 'SCHEMA', N'dbo', 'TABLE', N't_online_user',
NULL, NULL

GO


-----

[dbo].[t_state_machine_status]

[dbo].[t_user]

Used By

[dbo].[p_online_user_book]

[dbo].[p_online_user_check_connected]

[dbo].[p_online_user_delete]

[dbo].[p_online_user_get_by_connectionid]

[dbo].[p_online_user_get_by_username]

[dbo].[p_online_user_get_first_by_project_id]

[dbo].[p_online_user_get_projectid]

[dbo].[p_online_user_insert]

[dbo].[p_online_user_search_backend]

[dbo].[p_online_user_set_disconnected]

[dbo].[p_online_user_unbook]

[dbo].[p_online_user_unbook_forgot]

[dbo].[p_online_user_update_keepalive]

[dbo].[p_project_get_connectionid_for_presenter]

[dbo].[p_tilestatus_unlock_forgot]

[dbo].[p_tilestatus_update]

[dbo].[p_tilestatus_update_content]

[dbo].[p tilestatus update lock]


-----

**[dbo].[t_project]**

MS_Description

All projects

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type


-----

Nullability

Identity

Default

projectid

int

4

NOT NULL

1 - 1

containeruri

nvarchar(500)

1000

NOT NULL

createdby

int

4

NOT NULL

creationdate


-----

NOT NULL

lastupdate

datetime

8

NULL allowed

presenter

nvarchar(250)

500

NULL allowed

description

nvarchar(250)

500

NOT NULL

(' ')

createdbyuniquemachineid


-----

16

NOT NULL

('00000000-0000-0000-0000-000000000000')

updatedby

int

4

NULL allowed

zoomfactor

float

8

NOT NULL

((0))

offsetx

float

8

NOT NULL

((0))


-----

float

8

NOT NULL

((0))

deleted

bit

1

NOT NULL

((0))

projecttypeid

int

4

NOT NULL

((0))

thumbnail

varbinary(max)

max

NULL allowed


-----

backgroundcolor

nvarchar(7)

14

NULL allowed

canvas_size_ratio

int

4

NULL allowed

upgradeversion

int

4

NOT NULL

((1))

islocked

bit

1

NOT NULL


-----

Indexes

Key

Name

Key Columns

Unique

PK_t_project

projectid

True

nci_wi_t_project_9ADAB38961944CA62EFA69AF2981E8A3

createdby, deleted

SQL Script

CREATE TABLE [dbo].[t_project]

(

[projectid] [int] NOT NULL IDENTITY(1, 1),

[containeruri] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[createdby] [int] NOT NULL,

[creationdate] [datetime] NOT NULL,

[lastupdate] [datetime] NULL,


-----

SQL_Latin1_General_CP1_CI_AS NULL,

[description] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT

[DF_t_project_description] DEFAULT (' '),

[createdbyuniquemachineid] [uniqueidentifier] NOT NULL
CONSTRAINT [DF_t_project_createdbyuniquemachineid] DEFAULT
('00000000-0000-0000-0000-000000000000'),

[updatedby] [int] NULL,

[zoomfactor] [float] NOT NULL CONSTRAINT

[DF_t_project_zoomfactor] DEFAULT ((0)),

[offsetx] [float] NOT NULL CONSTRAINT [DF_t_project_offsetx]
DEFAULT ((0)),

[offsety] [float] NOT NULL CONSTRAINT [DF_t_project_offsety]
DEFAULT ((0)),

[deleted] [bit] NOT NULL CONSTRAINT [DF_t_project_deleted_1]
DEFAULT ((0)),

[projecttypeid] [int] NOT NULL CONSTRAINT

[DF_t_project_projecttypeid] DEFAULT ((0)),

[thumbnail] [varbinary] (max) NULL,

[backgroundcolor] [nvarchar] (7) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[canvas_size_ratio] [int] NULL,

[upgradeversion] [int] NOT NULL CONSTRAINT

[DF__t_project__upgra__7E37BEF6] DEFAULT ((1)),

[islocked] [bit] NOT NULL CONSTRAINT

[DF__t_project__isloc__7F2BE32F] DEFAULT ((0))

) ON [PRIMARY]


-----

ALTER TABLE [dbo].[t_project] ADD CONSTRAINT [PK_t_project]
PRIMARY KEY CLUSTERED ([projectid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[nci_wi_t_project_9ADAB38961944CA62EFA69AF2981E8A3] ON

[dbo].[t_project] ([createdby], [deleted]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'All projects',
'SCHEMA', N'dbo', 'TABLE', N't_project', NULL, NULL

GO

Used By

[dbo].[t_canvasshotter_booking]

[dbo].[t_online_user]

[dbo].[t_project_participant]

[dbo].[t_project_tag]

[dbo].[t_quicklink]

[dbo].[t_template_translation]

[dbo].[t_tile_relation]

[dbo].[t_tile_voting]

[dbo].[t_tilestatus]

[dbo].[p_online_user_search_backend]

[dbo] [p project delete template]


-----

[dbo].[p_project_get_by_userid]

[dbo].[p_project_get_connectionid_for_presenter]

[dbo].[p_project_get_containeruri]

[dbo].[p_project_get_coparticipating_projects]

[dbo].[p_project_get_coparticipating_users]

[dbo].[p_project_get_licensed_projects]

[dbo].[p_project_get_participating_projects]

[dbo].[p_project_get_participating_projects_count]

[dbo].[p_project_get_templates]

[dbo].[p_project_insert]

[dbo].[p_project_remove_user_as_presenter_in_all]

[dbo].[p_project_search_backend]

[dbo].[p_project_set_presenter]

[dbo].[p_project_setlock]

[dbo].[p_project_setversion]

[dbo].[p_project_update]

[dbo].[p_project_update_background]

[dbo].[p_project_update_canvas_size_ratio]

[dbo].[p_project_update_deleted]

[dbo].[p_project_update_owner]

[dbo].[p project update sas token]


-----

[dbo].[p_project_update_thumbnail]

[dbo].[p_project_update_zoom_offset]

[dbo].[p_projecttypes_convert_to_template]

**[dbo].[t_project_copy_booking]**

MS_Description

Copy project state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

07:45:07 maandag 17 mei 2021

Columns


-----

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

Id

int

4

NOT NULL

1 - 1

creationdate

datetime

8

NOT NULL

(getutcdate())

projectid

int


-----

description

nvarchar(250)

500

NULL allowed

isfromtemplate

bit

1

NOT NULL

((0))

clientconnectionid

nvarchar(50)

100

NOT NULL

username

nvarchar(200)

400


-----

appver

nvarchar(50)

100

NOT NULL

uniquedeviceid

uniqueidentifier

16

NOT NULL

lastupdate

datetime

8

NULL allowed

bookedby

uniqueidentifier

16


-----

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

statemachinestatusid

int

4

NOT NULL

((0))

xoffset

float


-----

((0.0))

yoffset

float

8

NULL allowed

((0.0))

templateid

int

4

NULL allowed

((0))

Indexes

Key

Name

Key Columns

Unique

PK__t_projec__3214EC07E8388610

Id


-----

IX_t_project_copy_booking_statemachinestatusid

statemachinestatusid

Foreign Keys

Name

Columns

t_project_copy_booking_t_state_machine_status

statemachinestatusid->[dbo].[t_state_machine_status].

[statemachinestatusid]

SQL Script

CREATE TABLE [dbo].[t_project_copy_booking]

(

[Id] [int] NOT NULL IDENTITY(1, 1),

[creationdate] [datetime] NOT NULL CONSTRAINT

[DF_t_project_copy_booking_creationdate] DEFAULT (getutcdate()),

[projectid] [int] NOT NULL,

[description] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[isfromtemplate] [bit] NOT NULL CONSTRAINT

[DF_t_project_copy_booking_isfromtemplate] DEFAULT ((0)),

[clientconnectionid] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,


-----

SQL_Latin1_General_CP1_CI_AS NOT NULL,

[appver] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[uniquedeviceid] [uniqueidentifier] NOT NULL,

[lastupdate] [datetime] NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF_t_project_copy_booking_retry] DEFAULT ((0)),

[statemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_project_copy_booking_statemachinestatusid] DEFAULT ((0)),

[xoffset] [float] NULL CONSTRAINT

[DF__t_project__xoffs__06CD04F7] DEFAULT ((0.0)),

[yoffset] [float] NULL CONSTRAINT

[DF__t_project__yoffs__07C12930] DEFAULT ((0.0)),

[templateid] [int] NULL CONSTRAINT

[DF__t_project__templ__2A363CC5] DEFAULT ((0))

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_copy_booking] ADD CONSTRAINT

[PK__t_projec__3214EC07E8388610] PRIMARY KEY CLUSTERED
([Id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_project_copy_booking_statemachinestatusid] ON [dbo].

[t project copy booking] ([statemachinestatusid]) ON [PRIMARY]


-----

ALTER TABLE [dbo].[t_project_copy_booking] ADD CONSTRAINT

[t_project_copy_booking_t_state_machine_status] FOREIGN KEY
([statemachinestatusid]) REFERENCES [dbo].

[t_state_machine_status] ([statemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Copy project
state machine', 'SCHEMA', N'dbo', 'TABLE',
N't_project_copy_booking', NULL, NULL

GO

Uses

[dbo].[t_state_machine_status]

Used By

[dbo].[p_project_copy_book]

[dbo].[p_project_copy_fallback]

[dbo].[p_project_copy_history]

[dbo].[p_project_copy_insert]

[dbo].[p_project_copy_unbook]

**[dbo].[t_project_copy_booking_history]**

MS_Description

C j hi hi


-----

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

Id

int


-----

creationdate

datetime

8

NOT NULL

projectid

int

4

NOT NULL

description

nvarchar(250)

500

NULL allowed

isfromtemplate

bit

1

NOT NULL


-----

nvarchar(50)

100

NOT NULL

username

nvarchar(200)

400

NOT NULL

appver

nvarchar(50)

100

NOT NULL

uniquedeviceid

uniqueidentifier

16

NOT NULL

lastupdate

datetime


-----

NULL allowed

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

statemachinestatusid

int

4

NOT NULL


-----

xoffset

float

8

NULL allowed

((0.0))

yoffset

float

8

NULL allowed

((0.0))

templateid

int

4

NULL allowed

((0))

Indexes

Key

Name

Key Columns

Unique


-----

Id

True

SQL Script

CREATE TABLE [dbo].[t_project_copy_booking_history]

(

[Id] [int] NOT NULL,

[creationdate] [datetime] NOT NULL,

[projectid] [int] NOT NULL,

[description] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[isfromtemplate] [bit] NOT NULL,

[clientconnectionid] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[appver] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[uniquedeviceid] [uniqueidentifier] NOT NULL,

[lastupdate] [datetime] NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL,


-----

[xoffset] [float] NULL CONSTRAINT

[DF__t_project__xoffs__0B91BA14] DEFAULT ((0.0)),

[yoffset] [float] NULL CONSTRAINT

[DF__t_project__yoffs__0D7A0286] DEFAULT ((0.0)),

[templateid] [int] NULL CONSTRAINT

[DF__t_project__templ__0C85DE4D] DEFAULT ((0))

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_copy_booking_history] ADD
CONSTRAINT [PK__t_projec__3214EC07FBB3D762] PRIMARY KEY
CLUSTERED ([Id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Copy project
state machine history', 'SCHEMA', N'dbo', 'TABLE',
N't_project_copy_booking_history', NULL, NULL

GO

Used By

[dbo].[p_project_copy_history]

[dbo].[p_project_copy_history_search]

**[dbo].[t_project_participant]**


-----

Properties

Property

Value

Row Count (~)

2

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

projectid

int

4

NOT NULL


-----

userid

int

4

NOT NULL

permission

tinyint

1

NOT NULL

lastaccessdate

datetime

8

NOT NULL

(getutcdate())

Indexes

Key

Name

Key Columns

Unique

PK t j t ti i t 1


-----

True

IX_FK_t_project_participant_projectid

projectid

IX_t_project_participant_userid

userid

Foreign Keys

Name

Columns

FK_t_project_participant_projectid

projectid->[dbo].[t_project].[projectid]

t_project_participant_userid

userid->[dbo].[t_user].[userid]

SQL Script

CREATE TABLE [dbo].[t_project_participant]

(

[projectid] [int] NOT NULL,

[userid] [int] NOT NULL,

[permission] [tinyint] NOT NULL,


-----

[DF__t_project__lasta__0E6E26BF] DEFAULT (getutcdate())

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_participant] ADD CONSTRAINT

[PK_t_project_participant_1] PRIMARY KEY CLUSTERED
([projectid], [userid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_FK_t_project_participant_projectid] ON [dbo].

[t_project_participant] ([projectid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_project_participant_userid]
ON [dbo].[t_project_participant] ([userid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_participant] ADD CONSTRAINT

[FK_t_project_participant_projectid] FOREIGN KEY ([projectid])
REFERENCES [dbo].[t_project] ([projectid])

GO

ALTER TABLE [dbo].[t_project_participant] ADD CONSTRAINT

[t_project_participant_userid] FOREIGN KEY ([userid])
REFERENCES [dbo].[t_user] ([userid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Users who have
access to a project', 'SCHEMA', N'dbo', 'TABLE',
N't_project_participant', NULL, NULL

GO


-----

[dbo].[t_project]

[dbo].[t_user]

Used By

[dbo].[p_project_get_coparticipating_projects]

[dbo].[p_project_get_coparticipating_users]

[dbo].[p_project_get_licensed_projects]

[dbo].[p_project_get_participating_projects]

[dbo].[p_project_get_participating_projects_count]

[dbo].[p_project_participant_delete]

[dbo].[p_project_participant_get_by_coparticipant]

[dbo].[p_project_participant_get_by_projectid]

[dbo].[p_project_participant_get_by_projectid_and_userid]

[dbo].[p_project_participant_get_by_userid]

[dbo].[p_project_participant_insert]

[dbo].[p_project_participant_update]

[dbo].[p_project_search_backend]

[dbo].[p_project_update_owner]

[dbo].[p_projecttypes_convert_to_template]

[dbo].[p_user_get_by_project]

[dbo].[p_user_get_by_project_count]


-----

MS_Description

Tags for the project

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability


-----

int

4

NOT NULL

tag

nvarchar(250)

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_project_tag

projectid, tag

True

Foreign Keys

Name

Columns

FK_t_project_tag_t_project


-----

SQL Script

CREATE TABLE [dbo].[t_project_tag]

(

[projectid] [int] NOT NULL,

[tag] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_tag] ADD CONSTRAINT

[PK_t_project_tag] PRIMARY KEY CLUSTERED ([projectid], [tag])
ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_tag] ADD CONSTRAINT

[FK_t_project_tag_t_project] FOREIGN KEY ([projectid])
REFERENCES [dbo].[t_project] ([projectid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Tags for the
project', 'SCHEMA', N'dbo', 'TABLE', N't_project_tag', NULL, NULL

GO

Uses

[dbo].[t_project]

Used By


-----

[dbo].[p_project_tag_delete]

[dbo].[p_project_tag_get_by_projectid]

[dbo].[p_project_tag_get_by_projectids]

[dbo].[p_project_tag_insert]

**[dbo].[t_project_type]**

MS_Description

The type of project (user project or template)

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021


-----

Key

Name

Data Type

Max Length (Bytes)

Nullability

projecttypeid

int

4

NOT NULL

description

nvarchar(250)

500

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_project_type


-----

True

SQL Script

CREATE TABLE [dbo].[t_project_type]

(

[projecttypeid] [int] NOT NULL,

[description] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_type] ADD CONSTRAINT

[PK_t_project_type] PRIMARY KEY CLUSTERED ([projecttypeid])
ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The type of
project (user project or template)', 'SCHEMA', N'dbo', 'TABLE',
N't_project_type', NULL, NULL

GO

Used By

[dbo].[t_project_type_translation]

[dbo].[p_get_all_template_types]

[dbo].[p_projecttypes_delete]

[dbo] [p projecttypes get all template types]


-----

[dbo].[p_projecttypes_update]

[dbo].[p_projecttypes_verify_if_template]

**[dbo].[t_project_type_translation]**

MS_Description

The project template type translation

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

1

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key


-----

Data Type

Max Length (Bytes)

Nullability

Identity

translationid

int

4

NOT NULL

1 - 1

projecttypeid

int

4

NOT NULL

languageid

int

4

NOT NULL

description


-----

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_project_type_translation

translationid

True

IX_t_project_type_translation_language

languageid

IX_t_project_type_translation_project_type

projecttypeid

Foreign Keys

Name

Columns


-----

languageid->[dbo].[t_language].[languageId]

FK_t_project_type_translation_t_project_type

projecttypeid->[dbo].[t_project_type].[projecttypeid]

SQL Script

CREATE TABLE [dbo].[t_project_type_translation]

(

[translationid] [int] NOT NULL IDENTITY(1, 1),

[projecttypeid] [int] NOT NULL,

[languageid] [int] NOT NULL,

[description] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_type_translation] ADD CONSTRAINT

[PK_t_project_type_translation] PRIMARY KEY CLUSTERED
([translationid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_project_type_translation_language] ON [dbo].

[t_project_type_translation] ([languageid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_project_type_translation_project_type] ON [dbo].

[ j l i ] ([ j id]) [ ]


-----

ALTER TABLE [dbo].[t_project_type_translation] ADD CONSTRAINT

[FK_t_project_type_translation_t_language] FOREIGN KEY
([languageid]) REFERENCES [dbo].[t_language] ([languageId])

GO

ALTER TABLE [dbo].[t_project_type_translation] ADD CONSTRAINT

[FK_t_project_type_translation_t_project_type] FOREIGN KEY
([projecttypeid]) REFERENCES [dbo].[t_project_type]
([projecttypeid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The project
template type translation', 'SCHEMA', N'dbo', 'TABLE',
N't_project_type_translation', NULL, NULL

GO

Uses

[dbo].[t_language]

[dbo].[t_project_type]

Used By

[dbo].[p_projecttypes_delete]

[dbo].[p_projecttypes_get_all_template_types]

[dbo].[p_projecttypes_insert_new_projecttype]

[dbo].[p_projecttypes_update]

**[dbo].[t_project_upgrade_booking]**


-----

MS_Description

Upgrade mechanism state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity


-----

Id

int

4

NOT NULL

1 - 1

creationdate

datetime

8

NOT NULL

(getutcdate())

username

nvarchar(200)

400

NOT NULL

projectid

int

4

NOT NULL


-----

currentversion

int

4

NOT NULL

desiredversion

int

4

NOT NULL

uniquedeviceid

uniqueidentifier

16

NOT NULL

bookedby

uniqueidentifier

16

NULL allowed


-----

datetime

8

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

statemachinestatusid

int

4

NOT NULL

((0))


-----

Indexes

Key

Name

Key Columns

Unique

PK__t_projec__3214EC07606140C7

Id

True

IX_t_project_upgrade_booking_statemachinestatusid

statemachinestatusid

Foreign Keys

Name

Columns

t_project_upgrade_booking_t_state_machine_status

statemachinestatusid->[dbo].[t_state_machine_status].

[statemachinestatusid]

SQL Script

CREATE TABLE [dbo].[t_project_upgrade_booking]

(

[ d] [i ] ( )


-----

[DF_t_project_upgrade_booking_creationdate] DEFAULT
(getutcdate()),

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[projectid] [int] NOT NULL,

[currentversion] [int] NOT NULL,

[desiredversion] [int] NOT NULL,

[uniquedeviceid] [uniqueidentifier] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[lastupdate] [datetime] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF_t_project_upgrade_booking_retry] DEFAULT ((0)),

[statemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_project_upgrade_booking_statemachinestatusid] DEFAULT
((0))

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_upgrade_booking] ADD
CONSTRAINT [PK__t_projec__3214EC07606140C7] PRIMARY KEY
CLUSTERED ([Id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_project_upgrade_booking_statemachinestatusid] ON [dbo].

[t_project_upgrade_booking] ([statemachinestatusid]) ON

[PRIMARY]


-----

ALTER TABLE [dbo].[t_project_upgrade_booking] ADD
CONSTRAINT [t_project_upgrade_booking_t_state_machine_status]
FOREIGN KEY ([statemachinestatusid]) REFERENCES [dbo].

[t_state_machine_status] ([statemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Upgrade
mechanism state machine', 'SCHEMA', N'dbo', 'TABLE',
N't_project_upgrade_booking', NULL, NULL

GO

Uses

[dbo].[t_state_machine_status]

Used By

[dbo].[t_tilestatus_upgrade_booking]

[dbo].[p_project_upgrade_book]

[dbo].[p_project_upgrade_fallback]

[dbo].[p_project_upgrade_history]

[dbo].[p_project_upgrade_insert]

[dbo].[p_project_upgrade_unbook]

**[dbo].[t_project_upgrade_booking_history]**

MS D i i


-----

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Id

int


-----

creationdate

datetime

8

NOT NULL

username

nvarchar(200)

400

NOT NULL

projectid

int

4

NOT NULL

currentversion

int

4

NOT NULL

desiredversion

int


-----

uniquedeviceid

uniqueidentifier

16

NOT NULL

bookedby

uniqueidentifier

16

NULL allowed

lastupdate

datetime

8

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int


-----

statemachinestatusid

int

4

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK__t_projec__3214EC07BF041967

Id

True

SQL Script

CREATE TABLE [dbo].[t_project_upgrade_booking_history]

(

[Id] [int] NOT NULL,

[creationdate] [datetime] NOT NULL,

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,


-----

[desiredversion] [int] NOT NULL,

[uniquedeviceid] [uniqueidentifier] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[lastupdate] [datetime] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL,

[statemachinestatusid] [int] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_project_upgrade_booking_history] ADD
CONSTRAINT [PK__t_projec__3214EC07BF041967] PRIMARY KEY
CLUSTERED ([Id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Upgrade
mechanism state machine history', 'SCHEMA', N'dbo', 'TABLE',
N't_project_upgrade_booking_history', NULL, NULL

GO

Used By

[dbo].[p_project_upgrade_history]

**[dbo].[t_quicklink]**


-----

MS_Description

Quicklinks in a project

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default


-----

int

4

NOT NULL

1 - 1

projectid

int

4

NOT NULL

createdby

int

4

NOT NULL

creationdate

datetime

8

NOT NULL


-----

datetime

8

NOT NULL

lastupdatedby

int

4

NOT NULL

thumbnail

varbinary(max)

max

NULL allowed

name

nvarchar(250)

500

NULL allowed


-----

16

NOT NULL

isdeleted

bit

1

NOT NULL

((0))

Indexes

Key

Name

Key Columns

Unique

PK__t_quickl__C76188A2EB00B22B

quicklinkid

True

IX_t_quicklink_project

projectid


-----

Name

Columns

FK_t_quicklink_project

projectid->[dbo].[t_project].[projectid]

FK_t_quicklink_user

createdby->[dbo].[t_user].[userid]

SQL Script

CREATE TABLE [dbo].[t_quicklink]

(

[quicklinkid] [int] NOT NULL IDENTITY(1, 1),

[projectid] [int] NOT NULL,

[createdby] [int] NOT NULL,

[creationdate] [datetime] NOT NULL,

[lastupdate] [datetime] NOT NULL,

[lastupdatedby] [int] NOT NULL,

[thumbnail] [varbinary] (max) NULL,

[name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NULL,

[createdbyuniquemachineid] [uniqueidentifier] NOT NULL,

[isdeleted] [bit] NOT NULL CONSTRAINT

[DF__t_quickli__isdel__123EB7A3] DEFAULT ((0))


-----

GO

ALTER TABLE [dbo].[t_quicklink] ADD CONSTRAINT

[PK__t_quickl__C76188A2EB00B22B] PRIMARY KEY CLUSTERED
([quicklinkid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_quicklink_project] ON

[dbo].[t_quicklink] ([projectid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_quicklink] ADD CONSTRAINT

[FK_t_quicklink_project] FOREIGN KEY ([projectid]) REFERENCES

[dbo].[t_project] ([projectid])

GO

ALTER TABLE [dbo].[t_quicklink] ADD CONSTRAINT

[FK_t_quicklink_user] FOREIGN KEY ([createdby]) REFERENCES

[dbo].[t_user] ([userid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Quicklinks in a
project', 'SCHEMA', N'dbo', 'TABLE', N't_quicklink', NULL, NULL

GO

Uses

[dbo].[t_project]

[dbo].[t_user]

Used By

[db ] [ i kli k il ]


-----

[dbo].[p_quicklink_get_by_id]

[dbo].[p_quicklink_get_by_projectid]

[dbo].[p_quicklink_insert]

[dbo].[p_quicklink_remove_tile_from_quicklinks]

[dbo].[p_quicklink_update]

**[dbo].[t_quicklink_tile]**

MS_Description

Linking table between quicklinks and the tiles

Properties

Property

Value

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns


-----

Name

Data Type

Max Length (Bytes)

Nullability

Identity

quicklink_tile_id

int

4

NOT NULL

1 - 1

quicklinkid

int

4

NOT NULL

tileid

uniqueidentifier

16

NOT NULL


-----

Key

Name

Key Columns

Unique

PK__t_quickl__55D4B02AD02744FD

quicklink_tile_id

True

IX_t_quicklink_tile_quicklinkid

quicklinkid

Foreign Keys

Name

Columns

FK_t_quicklink_tile_quicklinks

quicklinkid->[dbo].[t_quicklink].[quicklinkid]

FK_t_quicklink_tile_tileid

tileid->[dbo].[t_tilestatus].[tileid]

SQL Script

CREATE TABLE [dbo].[t_quicklink_tile]


-----

[quicklinkid] [int] NOT NULL,

[tileid] [uniqueidentifier] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_quicklink_tile] ADD CONSTRAINT

[PK__t_quickl__55D4B02AD02744FD] PRIMARY KEY CLUSTERED
([quicklink_tile_id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_quicklink_tile_quicklinkid]
ON [dbo].[t_quicklink_tile] ([quicklinkid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_quicklink_tile] ADD CONSTRAINT

[FK_t_quicklink_tile_quicklinks] FOREIGN KEY ([quicklinkid])
REFERENCES [dbo].[t_quicklink] ([quicklinkid])

GO

ALTER TABLE [dbo].[t_quicklink_tile] ADD CONSTRAINT

[FK_t_quicklink_tile_tileid] FOREIGN KEY ([tileid]) REFERENCES

[dbo].[t_tilestatus] ([tileid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Linking table
between quicklinks and the tiles', 'SCHEMA', N'dbo', 'TABLE',
N't_quicklink_tile', NULL, NULL

GO

Uses


-----

[dbo].[t_tilestatus]

Used By

[dbo].[p_quicklink_get_tiles_for_quicklink]

[dbo].[p_quicklink_insert]

[dbo].[p_quicklink_remove_tile_from_quicklinks]

[dbo].[p_quicklink_update]

**[dbo].[t_state_machine_status]**

MS_Description

Status of the state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

7

Created

06:53:02 vrijdag 14 mei 2021


-----

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

statemachinestatusid

int

4

NOT NULL

statemachinestatusdescription

nvarchar(50)

100

NULL allowed

Indexes

Key

Name

Key Columns


-----

PK_t_state_machine_status

statemachinestatusid

True

SQL Script

CREATE TABLE [dbo].[t_state_machine_status]

(

[statemachinestatusid] [int] NOT NULL,

[statemachinestatusdescription] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_state_machine_status] ADD CONSTRAINT

[PK_t_state_machine_status] PRIMARY KEY CLUSTERED
([statemachinestatusid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Status of the
state machine', 'SCHEMA', N'dbo', 'TABLE', N't_state_machine_status',
NULL, NULL

GO

Used By

[dbo].[t_canvasshotter_booking]


-----

[dbo].[t_project_copy_booking]

[dbo].[t_project_upgrade_booking]

[dbo].[t_tilestatus]

[dbo].[t_tilestatus_copy_booking]

[dbo].[t_tilestatus_upgrade_booking]

**[dbo].[t_telemetrydata]**

MS_Description

Data for telemetry

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified


-----

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

LogEntryId

int

4

NOT NULL

1 - 1

CreationDateTime

datetime

8

NOT NULL

LogEntry

nvarchar(1024)


-----

Indexes

Key

Name

Key Columns

Unique

PK_t_telemetrydata

LogEntryId

True

SQL Script

CREATE TABLE [dbo].[t_telemetrydata]

(

[LogEntryId] [int] NOT NULL IDENTITY(1, 1),

[CreationDateTime] [datetime] NOT NULL,

[LogEntry] [nvarchar] (1024) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_telemetrydata] ADD CONSTRAINT

[PK_t_telemetrydata] PRIMARY KEY CLUSTERED ([LogEntryId]) ON

[PRIMARY]


-----

telemetry', 'SCHEMA', N'dbo', 'TABLE', N't_telemetrydata', NULL,
NULL

GO

Used By

[dbo].[p_telemetry_insert]

**[dbo].[t_template_translation]**

MS_Description

Translated entries for the templates

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified


-----

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

translationid

int

4

NOT NULL

1 - 1

(2)

projectid

int

4

NOT NULL

(2)

languageid


-----

NOT NULL

description

nvarchar(250)

500

NULL allowed

extendeddescription

nvarchar(max)

max

NULL allowed

moreinfourl

nvarchar(250)

500

NULL allowed

Indexes

Key

Name

Key Columns


-----

PK_t_template_translation

translationid

True

UK_t_template_translation

projectid, languageid

True

IX_t_template_translation_language

languageid

IX_t_template_translation_project

projectid

Foreign Keys

Name

Columns

FK_t_template_translation_t_language

languageid->[dbo].[t_language].[languageId]

FK_t_template_translation_t_project

projectid->[dbo].[t_project].[projectid]


-----

CREATE TABLE [dbo].[t_template_translation]

(

[translationid] [int] NOT NULL IDENTITY(1, 1),

[projectid] [int] NOT NULL,

[languageid] [int] NOT NULL,

[description] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[extendeddescription] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[moreinfourl] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_template_translation] ADD CONSTRAINT

[PK_t_template_translation] PRIMARY KEY CLUSTERED
([translationid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_template_translation_language] ON [dbo].

[t_template_translation] ([languageid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_template_translation_project] ON [dbo].

[t_template_translation] ([projectid]) ON [PRIMARY]

GO


-----

[UK_t_template_translation] UNIQUE NONCLUSTERED ([projectid],

[languageid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_template_translation] ADD CONSTRAINT

[FK_t_template_translation_t_language] FOREIGN KEY
([languageid]) REFERENCES [dbo].[t_language] ([languageId])

GO

ALTER TABLE [dbo].[t_template_translation] ADD CONSTRAINT

[FK_t_template_translation_t_project] FOREIGN KEY ([projectid])
REFERENCES [dbo].[t_project] ([projectid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Translated
entries for the templates', 'SCHEMA', N'dbo', 'TABLE',
N't_template_translation', NULL, NULL

GO

Uses

[dbo].[t_language]

[dbo].[t_project]

Used By

[dbo].[p_project_delete_template]

[dbo].[p_project_get_templates]

[dbo].[p_project_update_template]

[dbo].[p_projecttypes_convert_to_template]


-----

MS_Description

Relation between tiles

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability


-----

tilerelationid

int

4

NOT NULL

1 - 1

projectid

int

4

NOT NULL

tileid

uniqueidentifier

16

NOT NULL

related_tileid

uniqueidentifier

16

NOT NULL


-----

int

4

NOT NULL

tilerelationanchoridorigin

int

4

NOT NULL

tilerelationanchoriddestination

int

4

NOT NULL

tilerelationstartendsymbolorigin

int

4

NOT NULL

tilerelationstartendsymboldestination

int


-----

NOT NULL

tilerelationlineid

int

4

NOT NULL

color

nvarchar(7)

14

NOT NULL

thickness

int

4

NOT NULL

Indexes

Key

Name

Key Columns


-----

PK_t_tile_relation_1

tilerelationid

True

IX_FK__t_tile_re__tiler__5E74FADA

tilerelationstartendsymbolorigin

IX_FK__t_tile_re__tiler__5F691F13

tilerelationstartendsymboldestination

IX_FK_t_tile_relation_t_project

projectid

IX_FK_tilerelationanchor

tilerelationanchoridorigin

IX_FK_tilerelationanchoriddestination

tilerelationanchoriddestination

IX_FK_tilerelationstyle

tilerelationstyleid


-----

related_tileid

IX_t_tile_relation_tileid_t_tilestatus

tileid

Foreign Keys

Name

Columns

FK__t_tile_re__tiler__5E74FADA

tilerelationstartendsymbolorigin->[dbo].

[t_tile_relation_startend_symbol].[tilerelationstartendsymbol]

FK__t_tile_re__tiler__5F691F13

tilerelationstartendsymboldestination->[dbo].

[t_tile_relation_startend_symbol].[tilerelationstartendsymbol]

FK_t_tile_relation_t_project

projectid->[dbo].[t_project].[projectid]

FK_t_tile_relation_t_tile_relation_line

tilerelationlineid->[dbo].[t_tile_relation_line].[tilerelationlineid]

FK_tilerelationanchor

tilerelationanchoridorigin->[dbo].[t_tile_relation_anchor].

[tilerelationanchorid]

FK_tilerelationanchoriddestination


-----

FK_tilerelationstyle

tilerelationstyleid->[dbo].[t_tile_relation_style].[tilerelationstyleid]

t_tile_relation_related_tileid_t_tilestatus

related_tileid->[dbo].[t_tilestatus].[tileid]

t_tile_relation_tileid_t_tilestatus

tileid->[dbo].[t_tilestatus].[tileid]

SQL Script

CREATE TABLE [dbo].[t_tile_relation]

(

[tilerelationid] [int] NOT NULL IDENTITY(1, 1),

[projectid] [int] NOT NULL,

[tileid] [uniqueidentifier] NOT NULL,

[related_tileid] [uniqueidentifier] NOT NULL,

[tilerelationstyleid] [int] NOT NULL,

[tilerelationanchoridorigin] [int] NOT NULL,

[tilerelationanchoriddestination] [int] NOT NULL,

[tilerelationstartendsymbolorigin] [int] NOT NULL,

[tilerelationstartendsymboldestination] [int] NOT NULL,

[tilerelationlineid] [int] NOT NULL,

[color] [nvarchar] (7) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,


-----

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[PK_t_tile_relation_1] PRIMARY KEY CLUSTERED ([tilerelationid])
ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_t_tile_relation_t_project]
ON [dbo].[t_tile_relation] ([projectid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_tile_relation_related_tileid_t_tilestatus] ON [dbo].

[t_tile_relation] ([related_tileid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_tile_relation_tileid_t_tilestatus] ON [dbo].[t_tile_relation]
([tileid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_FK_tilerelationanchoriddestination] ON [dbo].[t_tile_relation]
([tilerelationanchoriddestination]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_tilerelationanchor] ON

[dbo].[t_tile_relation] ([tilerelationanchoridorigin]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK__t_tile_re__tiler__5F691F13]
ON [dbo].[t tile relation] ([tilerelationstartendsymboldestination])


-----

GO

CREATE NONCLUSTERED INDEX

[IX_FK__t_tile_re__tiler__5E74FADA] ON [dbo].[t_tile_relation]
([tilerelationstartendsymbolorigin]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_tilerelationstyle] ON

[dbo].[t_tile_relation] ([tilerelationstyleid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[FK__t_tile_re__tiler__5E74FADA] FOREIGN KEY
([tilerelationstartendsymbolorigin]) REFERENCES [dbo].

[t_tile_relation_startend_symbol] ([tilerelationstartendsymbol])

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[FK__t_tile_re__tiler__5F691F13] FOREIGN KEY
([tilerelationstartendsymboldestination]) REFERENCES [dbo].

[t_tile_relation_startend_symbol] ([tilerelationstartendsymbol])

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[FK_t_tile_relation_t_project] FOREIGN KEY ([projectid])
REFERENCES [dbo].[t_project] ([projectid])

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[FK_t_tile_relation_t_tile_relation_line] FOREIGN KEY
([tilerelationlineid]) REFERENCES [dbo].[t_tile_relation_line]
([tilerelationlineid])

GO


-----

[FK_tilerelationanchor] FOREIGN KEY ([tilerelationanchoridorigin])
REFERENCES [dbo].[t_tile_relation_anchor] ([tilerelationanchorid])

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[FK_tilerelationanchoriddestination] FOREIGN KEY
([tilerelationanchoriddestination]) REFERENCES [dbo].

[t_tile_relation_anchor] ([tilerelationanchorid])

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[FK_tilerelationstyle] FOREIGN KEY ([tilerelationstyleid])
REFERENCES [dbo].[t_tile_relation_style] ([tilerelationstyleid])

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[t_tile_relation_related_tileid_t_tilestatus] FOREIGN KEY
([related_tileid]) REFERENCES [dbo].[t_tilestatus] ([tileid])

GO

ALTER TABLE [dbo].[t_tile_relation] ADD CONSTRAINT

[t_tile_relation_tileid_t_tilestatus] FOREIGN KEY ([tileid])
REFERENCES [dbo].[t_tilestatus] ([tileid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Relation
between tiles', 'SCHEMA', N'dbo', 'TABLE', N't_tile_relation', NULL,
NULL

GO

Uses

[dbo].[t project]


-----

[dbo].[t_tile_relation_line]

[dbo].[t_tile_relation_startend_symbol]

[dbo].[t_tile_relation_style]

[dbo].[t_tilestatus]

Used By

[dbo].[p_tile_relation_by_participating_tile]

[dbo].[p_tile_relation_delete]

[dbo].[p_tile_relation_delete_all_by_tileid]

[dbo].[p_tile_relation_get_by_projectid]

[dbo].[p_tile_relation_get_by_projectid_paged]

[dbo].[p_tile_relation_insert]

[dbo].[p_tile_relation_update]

[dbo].[p_tile_relation_with_tile]

[dbo].[p_tilestatus_delete]

**[dbo].[t_tile_relation_anchor]**

MS_Description

The type of anchor for a relation

Properties


-----

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

5

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

tilerelationanchorid

int

4

NOT NULL


-----

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_tile_relation_anchor

tilerelationanchorid

True

SQL Script

CREATE TABLE [dbo].[t_tile_relation_anchor]

(

[tilerelationanchorid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation_anchor] ADD CONSTRAINT

[PK_t_tile_relation_anchor] PRIMARY KEY CLUSTERED
([tilerelationanchorid]) ON [PRIMARY]


-----

EXEC sp_addextendedproperty N'MS_Description', N'The type of
anchor for a relation', 'SCHEMA', N'dbo', 'TABLE',
N't_tile_relation_anchor', NULL, NULL

GO

Used By

[dbo].[t_tile_relation]

**[dbo].[t_tile_relation_line]**

MS_Description

The type of line between relation

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:02 vrijdag 14 mei 2021


-----

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

tilerelationlineid

int

4

NOT NULL

description

nvarchar(50)

100

NOT NULL

Indexes

Key

Name

Key Columns


-----

PK_t_tile_relation_line

tilerelationlineid

True

SQL Script

CREATE TABLE [dbo].[t_tile_relation_line]

(

[tilerelationlineid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation_line] ADD CONSTRAINT

[PK_t_tile_relation_line] PRIMARY KEY CLUSTERED
([tilerelationlineid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The type of line
between relation', 'SCHEMA', N'dbo', 'TABLE', N't_tile_relation_line',
NULL, NULL

GO

Used By

[dbo].[t_tile_relation]


-----

MS_Description

The line styles for a relation

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability


-----

int

4

NOT NULL

description

nvarchar(50)

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_tile_relation_line_style

tilerelationlinestyleid

True

SQL Script

CREATE TABLE [dbo].[t_tile_relation_line_style]

(

[tilerelationlinestyleid] [int] NOT NULL,


-----

SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation_line_style] ADD CONSTRAINT

[PK_t_tile_relation_line_style] PRIMARY KEY CLUSTERED
([tilerelationlinestyleid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The line styles
for a relation', 'SCHEMA', N'dbo', 'TABLE', N't_tile_relation_line_style',
NULL, NULL

GO

**[dbo].[t_tile_relation_startend_symbol]**

MS_Description

The symbol used for the relation line start

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS


-----

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

tilerelationstartendsymbol

int

4

NOT NULL

description

nvarchar(50)

100

NOT NULL

Indexes


-----

Name

Key Columns

Unique

PK_t_tile_relation_startend_symbol

tilerelationstartendsymbol

True

SQL Script

CREATE TABLE [dbo].[t_tile_relation_startend_symbol]

(

[tilerelationstartendsymbol] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation_startend_symbol] ADD
CONSTRAINT [PK_t_tile_relation_startend_symbol] PRIMARY KEY
CLUSTERED ([tilerelationstartendsymbol]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The symbol
used for the relation line start', 'SCHEMA', N'dbo', 'TABLE',
N't_tile_relation_startend_symbol', NULL, NULL

GO


-----

Used By

[dbo].[t_tile_relation]

**[dbo].[t_tile_relation_style]**

MS_Description

The style of the relation

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key


-----

Max Length (Bytes)

Nullability

tilerelationstyleid

int

4

NOT NULL

description

nvarchar(50)

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_tile_relation_style

tilerelationstyleid

True


-----

[tilerelationstyleid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation_style] ADD CONSTRAINT

[PK_t_tile_relation_style] PRIMARY KEY CLUSTERED
([tilerelationstyleid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The style of the
relation ', 'SCHEMA', N'dbo', 'TABLE', N't_tile_relation_style', NULL,
NULL

GO

Used By

[dbo].[t_tile_relation]

**[dbo].[t_tile_relation_type]**

MS_Description

The type of the relation


-----

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

4

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

tilerelationtypeid

int

4

NOT NULL


-----

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_tile_relation_type

tilerelationtypeid

True

SQL Script

CREATE TABLE [dbo].[t_tile_relation_type]

(

[tilerelationtypeid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_relation_type] ADD CONSTRAINT

[PK_t_tile_relation_type] PRIMARY KEY CLUSTERED
([tilerelationtypeid]) ON [PRIMARY]


-----

EXEC sp_addextendedproperty N'MS_Description', N'The type of the
relation', 'SCHEMA', N'dbo', 'TABLE', N't_tile_relation_type', NULL,
NULL

GO

**[dbo].[t_tile_type]**

MS_Description

The type of the tile

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

17

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021


-----

Key

Name

Data Type

Max Length (Bytes)

Nullability

tiletypeid

int

4

NOT NULL

tiledescription

nvarchar(50)

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_tile_type


-----

True

SQL Script

CREATE TABLE [dbo].[t_tile_type]

(

[tiletypeid] [int] NOT NULL,

[tiledescription] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_type] ADD CONSTRAINT [PK_tile_type]
PRIMARY KEY CLUSTERED ([tiletypeid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The type of the
tile', 'SCHEMA', N'dbo', 'TABLE', N't_tile_type', NULL, NULL

GO

Used By

[dbo].[t_tilestatus]

**[dbo].[t_tile_voting]**


-----

Voting for the tile

Properties

Property

Value

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

tileid

uniqueidentifier

16


-----

userid

int

4

NOT NULL

projectid

int

4

NOT NULL

rate

int

4

NOT NULL

((0))

thumb 0.1 thumb down, 0.0 no thub, 1.0 thumb up

decimal(18,9)

9

NOT NULL

((0 0))


-----

Indexes

Key

Name

Key Columns

Unique

PK_t_tile_thumb

tileid, userid

True

IX_FK_Projectid

projectid

IX_FK__t_tile_th__tilei__75586032

tileid

IX_FK__t_tile_th__useri__764C846B

userid

Foreign Keys

Name

Columns

FK t tile th tilei 75586032


-----

FK__t_tile_th__useri__764C846B

userid->[dbo].[t_user].[userid]

FK_Projectid

projectid->[dbo].[t_project].[projectid]

SQL Script

CREATE TABLE [dbo].[t_tile_voting]

(

[tileid] [uniqueidentifier] NOT NULL,

[userid] [int] NOT NULL,

[projectid] [int] NOT NULL,

[rate] [int] NOT NULL CONSTRAINT [DF_t_tile_thumb_rate]
DEFAULT ((0)),

[thumb] [decimal] (18, 9) NOT NULL CONSTRAINT

[DF_t_tile_voting_thumb] DEFAULT ((0.0))

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_voting] ADD CONSTRAINT

[PK_t_tile_thumb] PRIMARY KEY CLUSTERED ([tileid], [userid])
ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_Projectid] ON [dbo].

[t_tile_voting] ([projectid]) ON [PRIMARY]

GO


-----

ON [dbo].[t_tile_voting] ([tileid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_FK__t_tile_th__useri__764C846B] ON [dbo].[t_tile_voting]
([userid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tile_voting] ADD CONSTRAINT

[FK__t_tile_th__tilei__75586032] FOREIGN KEY ([tileid])
REFERENCES [dbo].[t_tilestatus] ([tileid])

GO

ALTER TABLE [dbo].[t_tile_voting] ADD CONSTRAINT

[FK__t_tile_th__useri__764C846B] FOREIGN KEY ([userid])
REFERENCES [dbo].[t_user] ([userid])

GO

ALTER TABLE [dbo].[t_tile_voting] ADD CONSTRAINT

[FK_Projectid] FOREIGN KEY ([projectid]) REFERENCES [dbo].

[t_project] ([projectid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Voting for the
tile', 'SCHEMA', N'dbo', 'TABLE', N't_tile_voting', NULL, NULL

GO

EXEC sp_addextendedproperty N'MS_Description', N'0.1 thumb
down, 0.0 no thub, 1.0 thumb up', 'SCHEMA', N'dbo', 'TABLE',
N't_tile_voting', 'COLUMN', N'thumb'

GO


-----

[dbo].[t_tilestatus]

[dbo].[t_user]

Used By

[dbo].[p_tile_voting_get_by_projectid_and_user_id]

[dbo].[p_tile_voting_get_by_projectid_and_user_id_paged]

[dbo].[p_tile_voting_update]

[dbo].[p_tilestatus_delete]

[dbo].[p_tilestatus_update_blobstatusid]

**[dbo].[t_tilecopy_copiedrelation]**

MS_Description

All copied relations for a copy command

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)


-----

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

token

uniqueidentifier

16

NOT NULL


-----

datetime

8

NOT NULL

usernamecreator

nvarchar(50)

100

NOT NULL

sourceprojectid

int

4

NOT NULL

targetprojectid

int

4

NULL allowed

tilerelationid

int


-----

NOT NULL

projectid

int

4

NOT NULL

tileid

uniqueidentifier

16

NOT NULL

related_tileid

uniqueidentifier

16

NOT NULL

tilerelationstyleid

int

4

NOT NULL


-----

tilerelationanchoridorigin

int

4

NOT NULL

tilerelationanchoriddestination

int

4

NOT NULL

tilerelationstartendsymbolorigin

int

4

NOT NULL

tilerelationstartendsymboldestination

int

4

NOT NULL

tilerelationlineid

int


-----

NOT NULL

color

nvarchar(7)

14

NOT NULL

thickness

int

4

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_tilecopy_copiedrelatoin

id

True


-----

token

SQL Script

CREATE TABLE [dbo].[t_tilecopy_copiedrelation]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[token] [uniqueidentifier] NOT NULL,

[copyfinishedtimestamp] [datetime] NOT NULL,

[usernamecreator] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[sourceprojectid] [int] NOT NULL,

[targetprojectid] [int] NULL,

[tilerelationid] [int] NOT NULL,

[projectid] [int] NOT NULL,

[tileid] [uniqueidentifier] NOT NULL,

[related_tileid] [uniqueidentifier] NOT NULL,

[tilerelationstyleid] [int] NOT NULL,

[tilerelationanchoridorigin] [int] NOT NULL,

[tilerelationanchoriddestination] [int] NOT NULL,

[tilerelationstartendsymbolorigin] [int] NOT NULL,

[tilerelationstartendsymboldestination] [int] NOT NULL,


-----

NOT NULL,

[thickness] [int] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilecopy_copiedrelation] ADD CONSTRAINT

[PK_t_tilecopy_copiedrelatoin] PRIMARY KEY CLUSTERED ([id])
ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_tilecopy_copiedrelation_token] ON [dbo].

[t_tilecopy_copiedrelation] ([token]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'All copied
relations for a copy command', 'SCHEMA', N'dbo', 'TABLE',
N't_tilecopy_copiedrelation', NULL, NULL

GO

Used By

[dbo].[p_tilecopy_cleanup]

[dbo].[p_tilecopy_getrelations_by_token]

[dbo].[p_tilecopy_insertrelation]

**[dbo].[t_tilecopy_copiedtile]**


-----

All copied tiles for a copy command

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id


-----

NOT NULL

1 - 1

token

uniqueidentifier

16

NOT NULL

copyfinishedtimestamp

datetime

8

NOT NULL

usernamecreator

nvarchar(50)

100

NOT NULL

sourceprojectid

int


-----

targetprojectid

int

4

NULL allowed

tileid

uniqueidentifier

16

NOT NULL

projectid

int

4

NOT NULL

parentid

uniqueidentifier

16

NULL allowed


-----

int

4

NOT NULL

tilecontent

nvarchar(max)

max

NULL allowed

positionx

float

8

NOT NULL

positiony

float

8

NOT NULL

height

float


-----

NOT NULL

width

float

8

NOT NULL

zindex

int

4

NOT NULL

scalex

float

8

NOT NULL

scaley

float

8

NOT NULL


-----

rotation

float

8

NOT NULL

totalthumbup

int

4

NOT NULL

totlathumbdown

int

4

NOT NULL

overallrating

decimal(2,1)

5

NOT NULL

totalrates

int


-----

NOT NULL

ispinned

bit

1

NOT NULL

backgroundcolor

nvarchar(7)

14

NULL allowed

originalfilename

nvarchar(255)

510

NULL allowed

lockeduser

nvarchar(50)

100

NULL allowed


-----

lockedby

nvarchar(50)

100

NULL allowed

lockeddate

datetime

8

NULL allowed

lastupdate

datetime

8

NOT NULL

blobstatusid

int

4

NOT NULL

oldId

uniqueidentifier


-----

NULL allowed

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

statemachinestatusid

int

4

NOT NULL


-----

Indexes

Key

Name

Key Columns

Unique

PK_t_tilecopy_copiedtile

id

True

IX_tilecopy_copiedtile_token

token

SQL Script

CREATE TABLE [dbo].[t_tilecopy_copiedtile]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[token] [uniqueidentifier] NOT NULL,

[copyfinishedtimestamp] [datetime] NOT NULL,

[usernamecreator] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[sourceprojectid] [int] NOT NULL,

[targetprojectid] [int] NULL,


-----

[projectid] [int] NOT NULL,

[parentid] [uniqueidentifier] NULL,

[tiletype] [int] NOT NULL,

[tilecontent] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[positionx] [float] NOT NULL,

[positiony] [float] NOT NULL,

[height] [float] NOT NULL,

[width] [float] NOT NULL,

[zindex] [int] NOT NULL,

[scalex] [float] NOT NULL,

[scaley] [float] NOT NULL,

[rotation] [float] NOT NULL,

[totalthumbup] [int] NOT NULL,

[totlathumbdown] [int] NOT NULL,

[overallrating] [decimal] (2, 1) NOT NULL,

[totalrates] [int] NOT NULL,

[ispinned] [bit] NOT NULL,

[backgroundcolor] [nvarchar] (7) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[originalfilename] [nvarchar] (255) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,


-----

SQL_Latin1_General_CP1_CI_AS NULL,

[lockedby] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lockeddate] [datetime] NULL,

[lastupdate] [datetime] NOT NULL,

[blobstatusid] [int] NOT NULL,

[oldId] [uniqueidentifier] NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL,

[statemachinestatusid] [int] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilecopy_copiedtile] ADD CONSTRAINT

[PK_t_tilecopy_copiedtile] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_tilecopy_copiedtile_token] ON

[dbo].[t_tilecopy_copiedtile] ([token]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'All copied tiles
for a copy command', 'SCHEMA', N'dbo', 'TABLE',
N't_tilecopy_copiedtile', NULL, NULL

GO


-----

Used By

[dbo].[p_tilecopy_cleanup]

[dbo].[p_tilecopy_getcopiedtiles_by_token]

[dbo].[p_tilecopy_insertcopiedtile]

**[dbo].[t_tilecopy_sourcetile]**

MS_Description

All source tiles used in a copy command

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:02 vrijdag 14 mei 2021


-----

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

token

uniqueidentifier

16

NOT NULL

copyfinishedtimestamp

datetime

8

NOT NULL


-----

nvarchar(50)

100

NOT NULL

sourceprojectid

int

4

NOT NULL

targetprojectid

int

4

NULL allowed

tileid

uniqueidentifier

16

NOT NULL

Indexes

Key


-----

Key Columns

Unique

PK_t_tilecopy_sourcetile

id

True

IX_tilecopy_sourcetile_token

token

SQL Script

CREATE TABLE [dbo].[t_tilecopy_sourcetile]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[token] [uniqueidentifier] NOT NULL,

[copyfinishedtimestamp] [datetime] NOT NULL,

[usernamecreator] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[sourceprojectid] [int] NOT NULL,

[targetprojectid] [int] NULL,

[tileid] [uniqueidentifier] NOT NULL

) ON [PRIMARY]


-----

[PK_t_tilecopy_sourcetile] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_tilecopy_sourcetile_token] ON

[dbo].[t_tilecopy_sourcetile] ([token]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'All source tiles
used in a copy command', 'SCHEMA', N'dbo', 'TABLE',
N't_tilecopy_sourcetile', NULL, NULL

GO

Used By

[dbo].[p_tilecopy_cleanup]

[dbo].[p_tilecopy_getsourcetiles_by_token]

[dbo].[p_tilecopy_insertsourcetile]

**[dbo].[t_tilestatus]**

MS_Description

The tiles

Properties

Property

V l


-----

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

tileid

uniqueidentifier

16

NOT NULL

(2)


-----

NOT NULL

parentid

uniqueidentifier

16

NULL allowed

tiletype

int

4

NOT NULL

((0))

tilecontent

nvarchar(max)

max

NULL allowed

positionx

float


-----

((0))

positiony

float

8

NOT NULL

((0))

height

float

8

NOT NULL

((0))

width

float

8

NOT NULL

((0))

zindex

int


-----

((0))

scalex

float

8

NOT NULL

((1))

scaley

float

8

NOT NULL

((1))

rotation

float

8

NOT NULL

((0))

totalthumbup

int


-----

((0))

totlathumbdown

int

4

NOT NULL

((0))

overallrating

decimal(2,1)

5

NOT NULL

((0.0))

totalrates

int

4

NOT NULL

((0))

ispinned

bit


-----

((0))

backgroundcolor

nvarchar(7)

14

NULL allowed

lockeduser

nvarchar(50)

100

NULL allowed

lockedby lockedby is the uniquemachineid on client

nvarchar(50)

100

NULL allowed

lockeddate

datetime

8

NULL allowed


-----

datetime

8

NOT NULL

(3)

blobstatusid

int

4

NOT NULL

((1))

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry


-----

NOT NULL

((0))

(2)

statemachinestatusid

int

4

NOT NULL

((0))

originalfilename

nvarchar(255)

510

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_tilestatus


-----

True

IX_FK_t_tilestatus_t_blob_status

blobstatusid

IX_FK_t_tilestatus_t_project

projectid

IX_FK_t_tilestatus_t_tile_type

tiletype

IX_t_tilestatus_blobstatusid

blobstatusid

IX_t_tilestatus_bookedby

bookedby

IX_t_tilestatus_lookedby

lockedby

IX_t_tilestatus_parentid

parentid


-----

IX_t_tilestatus_projectid_blobstatusid

projectid, blobstatusid

IX_t_tilestatus_statemachinestatusid

statemachinestatusid

IX_t_tilestatus_t_state_machine_status

statemachinestatusid

Foreign Keys

Name

Columns

FK_t_tilestatus_t_blob_status

blobstatusid->[dbo].[t_blob_status].[blobstatusid]

FK_t_tilestatus_t_project

projectid->[dbo].[t_project].[projectid]

FK_t_tilestatus_t_tile_type

tiletype->[dbo].[t_tile_type].[tiletypeid]

t_tilestatus_t_state_machine_status

statemachinestatusid->[dbo].[t_state_machine_status].

[statemachinestatusid]

SQL S i t


-----

[tileid] [uniqueidentifier] NOT NULL,

[projectid] [int] NOT NULL,

[parentid] [uniqueidentifier] NULL,

[tiletype] [int] NOT NULL CONSTRAINT [DF_t_tilestatus_tiletype]
DEFAULT ((0)),

[tilecontent] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[positionx] [float] NOT NULL CONSTRAINT

[DF_t_tilestatus_centerx] DEFAULT ((0)),

[positiony] [float] NOT NULL CONSTRAINT

[DF_t_tilestatus_centery] DEFAULT ((0)),

[height] [float] NOT NULL CONSTRAINT [DF_t_tilestatus_height]
DEFAULT ((0)),

[width] [float] NOT NULL CONSTRAINT [DF_t_tilestatus_width]
DEFAULT ((0)),

[zindex] [int] NOT NULL CONSTRAINT [DF_t_tilestatus_zindex]
DEFAULT ((0)),

[scalex] [float] NOT NULL CONSTRAINT [DF_t_tilestatus_scale]
DEFAULT ((1)),

[scaley] [float] NOT NULL CONSTRAINT [DF_t_tilestatus_scaley]
DEFAULT ((1)),

[rotation] [float] NOT NULL CONSTRAINT

[DF_t_tilestatus_rotation] DEFAULT ((0)),

[totalthumbup] [int] NOT NULL CONSTRAINT

[DF t tilestatus totalthumbup] DEFAULT ((0)),


-----

[DF_t_tilestatus_totlathumbdown] DEFAULT ((0)),

[overallrating] [decimal] (2, 1) NOT NULL CONSTRAINT

[DF_t_tilestatus_overalrating] DEFAULT ((0.0)),

[totalrates] [int] NOT NULL CONSTRAINT

[DF_t_tilestatus_totalrates] DEFAULT ((0)),

[ispinned] [bit] NOT NULL CONSTRAINT [DF_t_tilestatus_ispinned]
DEFAULT ((0)),

[backgroundcolor] [nvarchar] (7) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lockeduser] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lockedby] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lockeddate] [datetime] NULL,

[lastupdate] [datetime] NOT NULL,

[blobstatusid] [int] NOT NULL CONSTRAINT

[DF_t_tilestatus_blobstatusid] DEFAULT ((1)),

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT [DF_t_tilestatus_retry]
DEFAULT ((0)),

[statemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_tilestatus_statemachinestatusid] DEFAULT ((0)),

[originalfilename] [nvarchar] (255) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]


-----

ALTER TABLE [dbo].[t_tilestatus] ADD CONSTRAINT

[PK_t_tilestatus] PRIMARY KEY CLUSTERED ([tileid]) ON

[PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_t_tilestatus_t_blob_status]
ON [dbo].[t_tilestatus] ([blobstatusid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_tilestatus_blobstatusid] ON

[dbo].[t_tilestatus] ([blobstatusid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_tilestatus_bookedby] ON

[dbo].[t_tilestatus] ([bookedby]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_tilestatus_lookedby] ON

[dbo].[t_tilestatus] ([lockedby]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_tilestatus_parentid] ON

[dbo].[t_tilestatus] ([parentid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_t_tilestatus_t_project] ON

[dbo].[t_tilestatus] ([projectid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_tilestatus_projectid_blobstatusid] ON [dbo].[t_tilestatus]
([projectid], [blobstatusid]) ON [PRIMARY]


-----

[IX_t_tilestatus_statemachinestatusid] ON [dbo].[t_tilestatus]
([statemachinestatusid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_tilestatus_t_state_machine_status] ON [dbo].[t_tilestatus]
([statemachinestatusid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_t_tilestatus_t_tile_type] ON

[dbo].[t_tilestatus] ([tiletype]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilestatus] ADD CONSTRAINT

[FK_t_tilestatus_t_blob_status] FOREIGN KEY ([blobstatusid])
REFERENCES [dbo].[t_blob_status] ([blobstatusid])

GO

ALTER TABLE [dbo].[t_tilestatus] ADD CONSTRAINT

[FK_t_tilestatus_t_project] FOREIGN KEY ([projectid]) REFERENCES

[dbo].[t_project] ([projectid])

GO

ALTER TABLE [dbo].[t_tilestatus] ADD CONSTRAINT

[FK_t_tilestatus_t_tile_type] FOREIGN KEY ([tiletype]) REFERENCES

[dbo].[t_tile_type] ([tiletypeid])

GO

ALTER TABLE [dbo].[t_tilestatus] ADD CONSTRAINT

[t_tilestatus_t_state_machine_status] FOREIGN KEY
([statemachinestatusid]) REFERENCES [dbo].

[t_state_machine_status] ([statemachinestatusid])

GO


-----

'SCHEMA', N'dbo', 'TABLE', N't_tilestatus', NULL, NULL

GO

EXEC sp_addextendedproperty N'MS_Description', N'lockedby is the
uniquemachineid on client', 'SCHEMA', N'dbo', 'TABLE',
N't_tilestatus', 'COLUMN', N'lockedby'

GO

Uses

[dbo].[t_blob_status]

[dbo].[t_project]

[dbo].[t_state_machine_status]

[dbo].[t_tile_type]

Used By

[dbo].[t_quicklink_tile]

[dbo].[t_tile_relation]

[dbo].[t_tile_voting]

[dbo].[t_tilestatus_stroke]

[dbo].[t_tilestatus_upgrade_booking]

[dbo].[p_online_user_delete]

[dbo].[p_storage_eraser_unbook]

[dbo].[p_tile_relation_by_participating_tile]

[dbo].[p_tilestatus_delete]


-----

[dbo].[p_tilestatus_get_by_parenttile]

[dbo].[p_tilestatus_get_by_projectid]

[dbo].[p_tilestatus_get_by_projectid_paged]

[dbo].[p_tilestatus_get_by_projectid_with_thumbnails]

[dbo].[p_tilestatus_get_max_zindex]

[dbo].[p_tilestatus_get_thumbnails_for_tile]

[dbo].[p_tilestatus_get_toplevel_by_projectid]

[dbo].[p_tilestatus_get_upgradable_for_project]

[dbo].[p_tilestatus_gettree_by_id]

[dbo].[p_tilestatus_insert]

[dbo].[p_tilestatus_unlock_by_ids]

[dbo].[p_tilestatus_unlock_by_lockedby]

[dbo].[p_tilestatus_unlock_by_project_lockedby]

[dbo].[p_tilestatus_unlock_forgot]

[dbo].[p_tilestatus_update]

[dbo].[p_tilestatus_update_blobstatusid]

[dbo].[p_tilestatus_update_containertype]

[dbo].[p_tilestatus_update_content]

[dbo].[p_tilestatus_update_grouped]

[dbo].[p_tilestatus_update_lock]

[dbo].[p tilestatus update pinning]


-----

[dbo].[p_tilestatus_update_voting]

[dbo].[p_tilestatus_update_zindex]

[dbo].[p_tilestatus_upgrade_file]

[dbo].[p_update_blobstatus_for_thumbnails]

**[dbo].[t_tilestatus_copy_booking]**

MS_Description

Copy of a tile state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021


-----

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

Id

int

4

NOT NULL

1 - 1

creationdate

datetime

8

NOT NULL

(getutcdate())

username


-----

NOT NULL

sourceprojectid

int

4

NOT NULL

destinationprojectid

int

4

NOT NULL

tilesandpositions

nvarchar(max)

max

NULL allowed

tileoffsetx

float


-----

tileoffsety

float

8

NULL allowed

clientconnectionid

nvarchar(50)

100

NULL allowed

appver

nvarchar(50)

100

NOT NULL

uniquedeviceid

uniqueidentifier

16


-----

bookedby

uniqueidentifier

16

NULL allowed

lastupdate

datetime

8

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL


-----

statemachinestatusid

int

4

NOT NULL

((0))

Indexes

Key

Name

Key Columns

Unique

PK__t_tilest__3214EC071AFA3CB9

Id

True

IX_t_tilestatus_copy_booking_statemachinestatusid

statemachinestatusid

Foreign Keys

Name

C l


-----

statemachinestatusid->[dbo].[t_state_machine_status].

[statemachinestatusid]

SQL Script

CREATE TABLE [dbo].[t_tilestatus_copy_booking]

(

[Id] [int] NOT NULL IDENTITY(1, 1),

[creationdate] [datetime] NOT NULL CONSTRAINT

[DF_t_tilestatus_copy_booking_creationdate] DEFAULT
(getutcdate()),

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[sourceprojectid] [int] NOT NULL,

[destinationprojectid] [int] NOT NULL,

[tilesandpositions] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[tileoffsetx] [float] NULL,

[tileoffsety] [float] NULL,

[clientconnectionid] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[appver] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[uniquedeviceid] [uniqueidentifier] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[l d ] [d i ]


-----

[retry] [int] NOT NULL CONSTRAINT

[DF_t_tilestatus_copy_booking_retry] DEFAULT ((0)),

[statemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_tilestatus_copy_booking_statemachinestatusid] DEFAULT ((0))

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilestatus_copy_booking] ADD CONSTRAINT

[PK__t_tilest__3214EC071AFA3CB9] PRIMARY KEY CLUSTERED
([Id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_tilestatus_copy_booking_statemachinestatusid] ON [dbo].

[t_tilestatus_copy_booking] ([statemachinestatusid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilestatus_copy_booking] ADD CONSTRAINT

[t_tilestatus_copy_booking_t_state_machine_status] FOREIGN KEY
([statemachinestatusid]) REFERENCES [dbo].

[t_state_machine_status] ([statemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Copy of a tile
state machine', 'SCHEMA', N'dbo', 'TABLE',
N't_tilestatus_copy_booking', NULL, NULL

GO

Uses

[dbo].[t_state_machine_status]


-----

[dbo].[p_tilestatus_copy_book]

[dbo].[p_tilestatus_copy_fallback]

[dbo].[p_tilestatus_copy_history]

[dbo].[p_tilestatus_copy_insert]

[dbo].[p_tilestatus_copy_unbook]

**[dbo].[t_tilestatus_copy_booking_history]**

MS_Description

Copy of a tile state machine history

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified


-----

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Id

int

4

NOT NULL

creationdate

datetime

8

NOT NULL

username

nvarchar(200)

400

NOT NULL

j id


-----

NOT NULL

destinationprojectid

int

4

NOT NULL

tilesandpositions

nvarchar(max)

max

NULL allowed

tileoffsetx

float

8

NULL allowed

tileoffsety

float

8

NULL allowed

li i id


-----

100

NULL allowed

appver

nvarchar(50)

100

NOT NULL

uniquedeviceid

uniqueidentifier

16

NOT NULL

bookedby

uniqueidentifier

16

NULL allowed

lastupdate

datetime

8

NULL allowed

b ki d


-----

NULL allowed

retry

int

4

NOT NULL

statemachinestatusid

int

4

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK__t_tilest__3214EC077B0C4741

Id

True


-----

[Id] [int] NOT NULL,

[creationdate] [datetime] NOT NULL,

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[sourceprojectid] [int] NOT NULL,

[destinationprojectid] [int] NOT NULL,

[tilesandpositions] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[tileoffsetx] [float] NULL,

[tileoffsety] [float] NULL,

[clientconnectionid] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[appver] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[uniquedeviceid] [uniqueidentifier] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[lastupdate] [datetime] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL,

[statemachinestatusid] [int] NOT NULL

) ON [PRIMARY]

GO


-----

CONSTRAINT [PK__t_tilest__3214EC077B0C4741] PRIMARY KEY
CLUSTERED ([Id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Copy of a tile
state machine history', 'SCHEMA', N'dbo', 'TABLE',
N't_tilestatus_copy_booking_history', NULL, NULL

GO

Used By

[dbo].[p_tilestatus_copy_history]

[dbo].[p_tilestatus_copy_history_search]

**[dbo].[t_tilestatus_stroke]**

MS_Description

The stroke for inking in a tile

Properties

Property

Value

Row Count (~)

0

Created


-----

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

tilestatusstrokeid

uniqueidentifier

16

NOT NULL

tileid

uniqueidentifier

16

NULL allowed

stroke

varbinary(max)

max


-----

Indexes

Key

Name

Key Columns

Unique

PK_t_tilestatus_stroke

tilestatusstrokeid

True

IX_FK_t_tilestatus_stroke_tileid

tileid

Foreign Keys

Name

Columns

FK_t_tilestatus_stroke_tileid

tileid->[dbo].[t_tilestatus].[tileid]

SQL Script

CREATE TABLE [dbo].[t_tilestatus_stroke]


-----

[tileid] [uniqueidentifier] NULL,

[stroke] [varbinary] (max) NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilestatus_stroke] ADD CONSTRAINT

[PK_t_tilestatus_stroke] PRIMARY KEY CLUSTERED
([tilestatusstrokeid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_FK_t_tilestatus_stroke_tileid]
ON [dbo].[t_tilestatus_stroke] ([tileid]) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilestatus_stroke] ADD CONSTRAINT

[FK_t_tilestatus_stroke_tileid] FOREIGN KEY ([tileid]) REFERENCES

[dbo].[t_tilestatus] ([tileid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The stroke for
inking in a tile', 'SCHEMA', N'dbo', 'TABLE', N't_tilestatus_stroke',
NULL, NULL

GO

Uses

[dbo].[t_tilestatus]

Used By

[dbo].[p_tilestatus_stroke_by_tileid]


-----

[dbo].[p_tilestatus_stroke_update]

**[dbo].[t_tilestatus_upgrade_booking]**

MS_Description

Tile update mechanism state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name


-----

Max Length (Bytes)

Nullability

Identity

Default

Id

int

4

NOT NULL

1 - 1

creationdate

datetime

8

NOT NULL

(getutcdate())

username

nvarchar(200)

400

NOT NULL


-----

projectupgradeid

int

4

NOT NULL

tileid

uniqueidentifier

16

NOT NULL

uniquedeviceid

uniqueidentifier

16

NOT NULL

bookedby

uniqueidentifier

16

NULL allowed


-----

datetime

8

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

statemachinestatusid

int

4

NOT NULL

((0))


-----

Indexes

Key

Name

Key Columns

Unique

PK__t_tilest__3214EC07B7EE8479

Id

True

IX_t_tile_upgrade_booking_statemachinestatusid

statemachinestatusid

Foreign Keys

Name

Columns

t_tile_upgrade_booking_t_project_upgrade_booking

projectupgradeid->[dbo].[t_project_upgrade_booking].[Id]

t_tile_upgrade_booking_t_state_machine_status

statemachinestatusid->[dbo].[t_state_machine_status].

[statemachinestatusid]

t_tile_upgrade_booking_t_tilestatus

tileid->[dbo].[t_tilestatus].[tileid]


-----

CREATE TABLE [dbo].[t_tilestatus_upgrade_booking]

(

[Id] [int] NOT NULL IDENTITY(1, 1),

[creationdate] [datetime] NOT NULL CONSTRAINT

[DF_t_tile_upgrade_booking_creationdate] DEFAULT (getutcdate()),

[username] [nvarchar] (200) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[projectupgradeid] [int] NOT NULL,

[tileid] [uniqueidentifier] NOT NULL,

[uniquedeviceid] [uniqueidentifier] NOT NULL,

[bookedby] [uniqueidentifier] NULL,

[lastupdate] [datetime] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF_t_tile_upgrade_booking_retry] DEFAULT ((0)),

[statemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_tile_upgrade_booking_statemachinestatusid] DEFAULT ((0))

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_tilestatus_upgrade_booking] ADD
CONSTRAINT [PK__t_tilest__3214EC07B7EE8479] PRIMARY KEY
CLUSTERED ([Id]) ON [PRIMARY]

GO


-----

[t_tilestatus_upgrade_booking] ([statemachinestatusid]) ON

[PRIMARY]

GO

ALTER TABLE [dbo].[t_tilestatus_upgrade_booking] ADD
CONSTRAINT [t_tile_upgrade_booking_t_project_upgrade_booking]
FOREIGN KEY ([projectupgradeid]) REFERENCES [dbo].

[t_project_upgrade_booking] ([Id])

GO

ALTER TABLE [dbo].[t_tilestatus_upgrade_booking] ADD
CONSTRAINT [t_tile_upgrade_booking_t_state_machine_status]
FOREIGN KEY ([statemachinestatusid]) REFERENCES [dbo].

[t_state_machine_status] ([statemachinestatusid])

GO

ALTER TABLE [dbo].[t_tilestatus_upgrade_booking] ADD
CONSTRAINT [t_tile_upgrade_booking_t_tilestatus] FOREIGN KEY
([tileid]) REFERENCES [dbo].[t_tilestatus] ([tileid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Tile update
mechanism state machine', 'SCHEMA', N'dbo', 'TABLE',
N't_tilestatus_upgrade_booking', NULL, NULL

GO

Uses

[dbo].[t_project_upgrade_booking]

[dbo].[t_state_machine_status]

[dbo].[t_tilestatus]


-----

[dbo].[p_tilestatus_upgrade_insert]

[dbo].[p_tilestatus_upgrade_unbook]

**[dbo].[t_traces]**

MS_Description

Debug / Trace information

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Heap

True

Row Count (~)

0

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021


-----

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

ID

int

4

NOT NULL

1 - 1

Message

nvarchar(max)

max

NULL allowed

SeverityLevel

int

4

NULL allowed


-----

datetime

8

NULL allowed

(getutcdate())

SQL Script

CREATE TABLE [dbo].[t_traces]

(

[ID] [int] NOT NULL IDENTITY(1, 1),

[Message] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[SeverityLevel] [int] NULL,

[LastUpdate] [datetime] NULL CONSTRAINT

[DF_t_traces_LastUpdate] DEFAULT (getutcdate())

) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Debug / Trace
information', 'SCHEMA', N'dbo', 'TABLE', N't_traces', NULL, NULL

GO

Used By

[dbo].[p_insert_trace]


-----

MS_Description

The user as used in tiles and projects

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

6

Created

06:53:02 vrijdag 14 mei 2021

Last Modified

06:53:03 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability


-----

userid

int

4

NOT NULL

1 - 1

username

nvarchar(250)

500

NOT NULL

firstname

nvarchar(50)

100

NULL allowed

lastname

nvarchar(50)

100

NULL allowed


-----

nvarchar(500)

1000

NULL allowed

creationdate

datetime

8

NULL allowed

lastupdate

datetime

8

NULL allowed

terms_accepted

datetime

8

NULL allowed

receive_news

bit


-----

NULL allowed

companyname

nvarchar(250)

500

NULL allowed

phonenumber

nvarchar(50)

100

NULL allowed

language

nvarchar(50)

100

NULL allowed

country

nvarchar(5)

10

NULL allowed


-----

companysize

tinyint

1

NULL allowed

companyindustry

tinyint

1

NULL allowed

companyrole

nvarchar(250)

500

NULL allowed

usecase

nvarchar(100)

200

NULL allowed

is_guest

bit


-----

NULL allowed

lastactivitydate

datetime

8

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_user

userid

True

IX_t_user_username

username

True

SQL Script

CREATE TABLE [db ] [t ]


-----

[userid] [int] NOT NULL IDENTITY(1, 1),

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[firstname] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lastname] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[photourl] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[creationdate] [datetime] NULL,

[lastupdate] [datetime] NULL,

[terms_accepted] [datetime] NULL,

[receive_news] [bit] NULL,

[companyname] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[phonenumber] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[language] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[country] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS
NULL,

[companysize] [tinyint] NULL,

[companyindustry] [tinyint] NULL,

[companyrole] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,


-----

SQL_Latin1_General_CP1_CI_AS NULL,

[is_guest] [bit] NULL,

[lastactivitydate] [datetime] NULL

) ON [PRIMARY]

GO

ALTER TABLE [dbo].[t_user] ADD CONSTRAINT [PK_t_user]
PRIMARY KEY CLUSTERED ([userid]) ON [PRIMARY]

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_t_user_username] ON

[dbo].[t_user] ([username]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The user as
used in tiles and projects', 'SCHEMA', N'dbo', 'TABLE', N't_user',
NULL, NULL

GO

Used By

[dbo].[t_canvasshotter_booking]

[dbo].[t_online_user]

[dbo].[t_project_participant]

[dbo].[t_quicklink]

[dbo].[t_tile_voting]

[dbo].[p_canvasshotter_booking_insert_conditional]


-----

[dbo].[p_online_user_get_by_username]

[dbo].[p_online_user_get_projectid]

[dbo].[p_online_user_insert]

[dbo].[p_online_user_search_backend]

[dbo].[p_project_get_by_id]

[dbo].[p_project_get_by_userid]

[dbo].[p_project_get_coparticipating_projects]

[dbo].[p_project_get_coparticipating_users]

[dbo].[p_project_get_participating_projects]

[dbo].[p_project_search_backend]

[dbo].[p_user_get_all]

[dbo].[p_user_get_by_project]

[dbo].[p_user_get_by_project_count]

[dbo].[p_user_get_by_userid]

[dbo].[p_user_get_by_username]

[dbo].[p_user_insert]

[dbo].[p_user_update]

**[licensing].[t_billing_type]**


-----

The type of billing

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

id

int


-----

NOT NULL

name

nvarchar(250)

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_BillingType

id

True

SQL Script

CREATE TABLE [licensing].[t_billing_type]

(

[id] [int] NOT NULL,

[name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL


-----

ALTER TABLE [licensing].[t_billing_type] ADD CONSTRAINT

[PK_BillingType] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The type of
billing', 'SCHEMA', N'licensing', 'TABLE', N't_billing_type', NULL,
NULL

GO

Uses

[licensing]

Used By

[licensing].[t_orderline]

[licensing].[t_price]

[licensing].[t_subscription]

[licensing].[p_billing_type_delete]

[licensing].[p_billing_type_get_all]

[licensing].[p_billing_type_get_by_id]

[licensing].[p_billing_type_insert]

[licensing].[p_billing_type_update]

**[licensing].[t_customer]**


-----

The registered customer

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

1

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id


-----

NOT NULL

1 - 1

name

nvarchar(500)

1000

NOT NULL

username

nvarchar(250)

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_Customer

id


-----

IX_t_customer_username

username

True

SQL Script

CREATE TABLE [licensing].[t_customer]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[name] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_customer] ADD CONSTRAINT

[PK_Customer] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE UNIQUE NONCLUSTERED INDEX

[IX_t_customer_username] ON [licensing].[t_customer] ([username])
ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The registered
customer', 'SCHEMA', N'licensing', 'TABLE', N't_customer', NULL,
NULL


-----

Uses

[licensing]

Used By

[licensing].[t_subscription]

[licensing].[p_customer_delete]

[licensing].[p_customer_get_all]

[licensing].[p_customer_get_by_id]

[licensing].[p_customer_get_by_username]

[licensing].[p_customer_insert]

[licensing].[p_customer_search]

[licensing].[p_customer_update]

[licensing].[p_subscription_search]

**[licensing].[t_import_data]**

MS_Description

Licensing data that has been imported from an external file

Properties

Property


-----

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:27 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

Default

id

int

4

NOT NULL

1 - 1


-----

type

int

4

NOT NULL

payload

nvarchar(max)

max

NOT NULL

creationdate

datetime

8

NOT NULL

(getutcdate())

lastupdate

datetime

8

NULL allowed


-----

uniqueidentifier

16

NULL allowed

booking_date

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

state_machine_status

int

4

NOT NULL


-----

Key

Name

Key Columns

Unique

PK_ImportData

id

True

IX_t_import_data_state_machine_status

state_machine_status

IX_t_import_data_type_booked_by

type, booked_by

SQL Script

CREATE TABLE [licensing].[t_import_data]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[type] [int] NOT NULL,

[payload] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[ i d ] [d i ]


-----

[lastupdate] [datetime] NULL,

[booked_by] [uniqueidentifier] NULL,

[booking_date] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT [DF_t_import_data_retry]
DEFAULT ((0)),

[state_machine_status] [int] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_import_data] ADD CONSTRAINT

[PK_ImportData] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_import_data_state_machine_status] ON [licensing].

[t_import_data] ([state_machine_status]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_import_data_type_booked_by] ON [licensing].[t_import_data]
([type], [booked_by]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Licensing data
that has been imported from an external file', 'SCHEMA',
N'licensing', 'TABLE', N't_import_data', NULL, NULL

GO


-----

Used By

[licensing].[p_import_data_book]

[licensing].[p_import_data_delete]

[licensing].[p_import_data_insert]

[licensing].[p_import_data_unbook]

**[licensing].[t_license_file_history]**

MS_Description

History of all licensing files

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:27 vrijdag 14 mei 2021

Last Modified


-----

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

customer

nvarchar(500)

1000

NULL allowed

license_data

varbinary(8000)


-----

created_by

nvarchar(250)

500

NULL allowed

date_created

datetime

8

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_license_file_history

id

True

SQL Script


-----

[id] [int] NOT NULL IDENTITY(1, 1),

[customer] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[license_data] [varbinary] (8000) NOT NULL,

[created_by] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[date_created] [datetime] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_license_file_history] ADD CONSTRAINT

[PK_t_license_file_history] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'History of all
licensing files', 'SCHEMA', N'licensing', 'TABLE',
N't_license_file_history', NULL, NULL

GO

Uses

[licensing]

Used By

[licensing].[p_license_file_history_get_by_id]

[li i ] [ li fil hi t i t]


-----

**[licensing].[t_object_type]**

MS_Description

Type of object used in look-up tables for licensing

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

10

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name

Data Type


-----

Nullability

id

int

4

NOT NULL

name

nvarchar(250)

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_object_type

id

True

SQL Script

[li i ] [ bj ]


-----

[id] [int] NOT NULL,

[name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_object_type] ADD CONSTRAINT

[PK_t_object_type] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Type of object
used in look-up tables for licensing', 'SCHEMA', N'licensing', 'TABLE',
N't_object_type', NULL, NULL

GO

Uses

[licensing]

Used By

[licensing].[t_status]

**[licensing].[t_order]**

MS_Description

Th d


-----

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int


-----

1 - 1

subscription_id

int

4

NOT NULL

currency

nvarchar(5)

10

NULL allowed

promo_code_id

int

4

NULL allowed

payment_method_id

int

4

NOT NULL


-----

nvarchar(250)

500

NULL allowed

date_created

datetime

8

NOT NULL

status

tinyint

1

NOT NULL

external_reference

nvarchar(500)

1000

NULL allowed

Indexes

Key


-----

Key Columns

Unique

PK_Order

id

True

IX_t_order_subscription_id

subscription_id

Foreign Keys

Name

Columns

FK_Order_PaymentMethod

payment_method_id->[licensing].[t_payment_method].[id]

FK_Order_PromoCode

promo_code_id->[licensing].[t_promo_code].[id]

FK_Order_Subscription

subscription_id->[licensing].[t_subscription].[id]

SQL Script

CREATE TABLE [licensing].[t_order]


-----

[subscription_id] [int] NOT NULL,

[currency] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS
NULL,

[promo_code_id] [int] NULL,

[payment_method_id] [int] NOT NULL,

[created_by_username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[date_created] [datetime] NOT NULL,

[status] [tinyint] NOT NULL,

[external_reference] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_order] ADD CONSTRAINT [PK_Order]
PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_order_subscription_id] ON

[licensing].[t_order] ([subscription_id]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_order] ADD CONSTRAINT

[FK_Order_PaymentMethod] FOREIGN KEY ([payment_method_id])
REFERENCES [licensing].[t_payment_method] ([id])

GO

ALTER TABLE [licensing].[t_order] ADD CONSTRAINT


-----

GO

ALTER TABLE [licensing].[t_order] ADD CONSTRAINT

[FK_Order_Subscription] FOREIGN KEY ([subscription_id])
REFERENCES [licensing].[t_subscription] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The orders',
'SCHEMA', N'licensing', 'TABLE', N't_order', NULL, NULL

GO

Uses

[licensing].[t_payment_method]

[licensing].[t_promo_code]

[licensing].[t_subscription]

[licensing]

Used By

[licensing].[t_orderline]

[licensing].[t_payment]

[licensing].[p_order_delete]

[licensing].[p_order_get_all]

[licensing].[p_order_get_by_id]

[licensing].[p_order_insert]

[licensing].[p_order_search]


-----

**[licensing].[t_orderline]**

MS_Description

The line in an order

Properties

Property

Value

Row Count (~)

0

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability


-----

id

int

4

NOT NULL

1 - 1

order_id

int

4

NOT NULL

product_id

int

4

NOT NULL

number_of_users

int

4

NOT NULL


-----

int

4

NOT NULL

billing_type_id

int

4

NOT NULL

amount

money

8

NOT NULL

status

tinyint

1

NOT NULL

Indexes

Key


-----

Key Columns

Unique

PK_OrderLine

id

True

IX_t_orderline_order_id

order_id

Foreign Keys

Name

Columns

FK_OrderLine_BillingType

billing_type_id->[licensing].[t_billing_type].[id]

FK_OrderLine_Order

order_id->[licensing].[t_order].[id]

FK_OrderLine_Product

product_id->[licensing].[t_product].[id]

SQL Script

CREATE TABLE [licensing].[t_orderline]


-----

[order_id] [int] NOT NULL,

[product_id] [int] NOT NULL,

[number_of_users] [int] NOT NULL,

[number_of_devices] [int] NOT NULL,

[billing_type_id] [int] NOT NULL,

[amount] [money] NOT NULL,

[status] [tinyint] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_orderline] ADD CONSTRAINT

[PK_OrderLine] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_orderline_order_id] ON

[licensing].[t_orderline] ([order_id]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_orderline] ADD CONSTRAINT

[FK_OrderLine_BillingType] FOREIGN KEY ([billing_type_id])
REFERENCES [licensing].[t_billing_type] ([id])

GO

ALTER TABLE [licensing].[t_orderline] ADD CONSTRAINT

[FK_OrderLine_Order] FOREIGN KEY ([order_id]) REFERENCES

[licensing].[t_order] ([id])

GO

[li i ] [ d li ]


-----

[licensing].[t_product] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The line in an
order', 'SCHEMA', N'licensing', 'TABLE', N't_orderline', NULL, NULL

GO

Uses

[licensing].[t_billing_type]

[licensing].[t_order]

[licensing].[t_product]

[licensing]

Used By

[licensing].[p_order_search]

[licensing].[p_orderline_delete]

[licensing].[p_orderline_get_all]

[licensing].[p_orderline_get_by_id]

[licensing].[p_orderline_get_by_orderid]

[licensing].[p_orderline_insert]

[licensing].[p_orderline_update]

**[licensing].[t_payment]**


-----

MS_Description

The payments made

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity


-----

NOT NULL

1 - 1

order_id

int

4

NOT NULL

amount

money

8

NOT NULL

external_reference

nvarchar(500)

1000

NULL allowed

date_created

datetime


-----

status

tinyint

1

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_payment

id

True

IX_t_payment_order_id

order_id

Foreign Keys

Name

Columns


-----

order_id->[licensing].[t_order].[id]

SQL Script

CREATE TABLE [licensing].[t_payment]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[order_id] [int] NOT NULL,

[amount] [money] NOT NULL,

[external_reference] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[date_created] [datetime] NOT NULL,

[status] [tinyint] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_payment] ADD CONSTRAINT

[PK_t_payment] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_payment_order_id] ON

[licensing].[t_payment] ([order_id]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_payment] ADD CONSTRAINT

[FK_t_payment_t_order] FOREIGN KEY ([order_id]) REFERENCES

[licensing].[t_order] ([id])

GO


-----

made', 'SCHEMA', N'licensing', 'TABLE', N't_payment', NULL, NULL

GO

Uses

[licensing].[t_order]

[licensing]

Used By

[licensing].[p_payment_delete]

[licensing].[p_payment_get_all]

[licensing].[p_payment_get_by_id]

[licensing].[p_payment_insert]

[licensing].[p_payment_search]

[licensing].[p_payment_update]

**[licensing].[t_payment_method]**

MS_Description

The methods of payment

Properties

Property

Value


-----

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

id

int

4

NOT NULL

name

nvarchar(250)


-----

Indexes

Key

Name

Key Columns

Unique

PK_PaymentMethod

id

True

SQL Script

CREATE TABLE [licensing].[t_payment_method]

(

[id] [int] NOT NULL,

[name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_payment_method] ADD CONSTRAINT

[PK_PaymentMethod] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

EXEC sp addextendedproperty N'MS Description', N'The methods of


-----

NULL, NULL

GO

Uses

[licensing]

Used By

[licensing].[t_order]

[licensing].[p_payment_method_delete]

[licensing].[p_payment_method_get_all]

[licensing].[p_payment_method_get_by_id]

[licensing].[p_payment_method_insert]

[licensing].[p_payment_method_update]

**[licensing].[t_price]**

MS_Description

The price

Properties

Property

Value

Row Count (~)


-----

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

pricelist_id

int


-----

billing_type_id

int

4

NOT NULL

product_id

int

4

NOT NULL

amount_initial

money

8

NOT NULL

amount_per_user

money

8

NOT NULL

amount_per_device


-----

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_Price

id

True

IX_t_price_pricelist_id

pricelist_id

Foreign Keys

Name

Columns

FK_Price_BillingType

billing_type_id->[licensing].[t_billing_type].[id]

FK_Price_Pricelist


-----

FK_Price_Product

product_id->[licensing].[t_product].[id]

SQL Script

CREATE TABLE [licensing].[t_price]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[pricelist_id] [int] NOT NULL,

[billing_type_id] [int] NOT NULL,

[product_id] [int] NOT NULL,

[amount_initial] [money] NOT NULL,

[amount_per_user] [money] NOT NULL,

[amount_per_device] [money] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_price] ADD CONSTRAINT [PK_Price]
PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_price_pricelist_id] ON

[licensing].[t_price] ([pricelist_id]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_price] ADD CONSTRAINT

[FK Price BillingType] FOREIGN KEY ([billing type id])


-----

GO

ALTER TABLE [licensing].[t_price] ADD CONSTRAINT

[FK_Price_Pricelist] FOREIGN KEY ([pricelist_id]) REFERENCES

[licensing].[t_pricelist] ([id])

GO

ALTER TABLE [licensing].[t_price] ADD CONSTRAINT

[FK_Price_Product] FOREIGN KEY ([product_id]) REFERENCES

[licensing].[t_product] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The price',
'SCHEMA', N'licensing', 'TABLE', N't_price', NULL, NULL

GO

Uses

[licensing].[t_billing_type]

[licensing].[t_pricelist]

[licensing].[t_product]

[licensing]

Used By

[licensing].[p_price_delete]

[licensing].[p_price_get_all]

[licensing].[p_price_get_by_id]

[licensing].[p_price_get_by_pricelistid]


-----

[licensing].[p_price_update]

**[licensing].[t_pricelist]**

MS_Description

The pricelist

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

3

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name


-----

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

name

nvarchar(500)

1000

NOT NULL

currency

nvarchar(5)

10

NOT NULL

active_from

datetime


-----

NOT NULL

active_to

datetime

8

NOT NULL

is_active

bit

1

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_Pricelist

id

True


-----

CREATE TABLE [licensing].[t_pricelist]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[name] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[currency] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[active_from] [datetime] NOT NULL,

[active_to] [datetime] NOT NULL,

[is_active] [bit] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_pricelist] ADD CONSTRAINT

[PK_Pricelist] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The pricelist',
'SCHEMA', N'licensing', 'TABLE', N't_pricelist', NULL, NULL

GO

Uses

[licensing]

Used By

[licensing] [t price]


-----

[licensing].[p_pricelist_get_all]

[licensing].[p_pricelist_get_by_id]

[licensing].[p_pricelist_insert]

[licensing].[p_pricelist_update]

**[licensing].[t_product]**

MS_Description

The products available for licensing

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

4

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021


-----

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

name

nvarchar(500)

1000

NOT NULL

description

nvarchar(max)

max

NULL allowed


-----

product_family_code

nvarchar(100)

200

NOT NULL

min_number_of_users

int

4

NOT NULL

max_number_of_users

int

4

NULL allowed

min_number_of_devices

int

4

NOT NULL

max_number_of_devices

int


-----

NULL allowed

external_reference

nvarchar(500)

1000

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_Product

id

True

SQL Script

CREATE TABLE [licensing].[t_product]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[name] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS


-----

SQL_Latin1_General_CP1_CI_AS NULL,

[product_family_code] [nvarchar] (100) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[min_number_of_users] [int] NOT NULL,

[max_number_of_users] [int] NULL,

[min_number_of_devices] [int] NOT NULL,

[max_number_of_devices] [int] NULL,

[external_reference] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_product] ADD CONSTRAINT

[PK_Product] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The products
available for licensing', 'SCHEMA', N'licensing', 'TABLE', N't_product',
NULL, NULL

GO

Uses

[licensing]

Used By

[licensing].[t_orderline]

[li i ] [t i ]


-----

[licensing].[t_subscription]

[licensing].[p_product_delete]

[licensing].[p_product_get_all]

[licensing].[p_product_get_by_id]

[licensing].[p_product_get_by_productfamily]

[licensing].[p_product_insert]

[licensing].[p_product_update]

[licensing].[p_subscription_get_by_customerid_productfamilycode]

[licensing].[p_subscription_user_search]

**[licensing].[t_promo_code]**

MS_Description

Promo codes

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)


-----

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

promo_type_id

int


-----

code

nvarchar(100)

200

NOT NULL

description

nvarchar(1000)

2000

NULL allowed

product_id

int

4

NULL allowed

max_number_of_uses

int

4

NULL allowed

number_of_users


-----

NULL allowed

number_of_devices

int

4

NULL allowed

number_of_free_months

int

4

NULL allowed

active_from

datetime

8

NULL allowed

active_to

datetime


-----

discount_amount

money

8

NULL allowed

discount_percent

decimal(5,2)

5

NULL allowed

usage_count

int

4

NOT NULL

Indexes

Key

Name

Key Columns

Unique


-----

id

True

IX_t_promo_code_code

code

Foreign Keys

Name

Columns

FK_PromoCode_Product

product_id->[licensing].[t_product].[id]

FK_PromoCode_PromoType

promo_type_id->[licensing].[t_promo_type].[id]

SQL Script

CREATE TABLE [licensing].[t_promo_code]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[promo_type_id] [int] NOT NULL,

[code] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL,

[description] [nvarchar] (1000) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,


-----

[max_number_of_uses] [int] NULL,

[number_of_users] [int] NULL,

[number_of_devices] [int] NULL,

[number_of_free_months] [int] NULL,

[active_from] [datetime] NULL,

[active_to] [datetime] NULL,

[discount_amount] [money] NULL,

[discount_percent] [decimal] (5, 2) NULL,

[usage_count] [int] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_promo_code] ADD CONSTRAINT

[PK_PromoCode] PRIMARY KEY CLUSTERED ([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_promo_code_code] ON

[licensing].[t_promo_code] ([code]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_promo_code] ADD CONSTRAINT

[FK_PromoCode_Product] FOREIGN KEY ([product_id])
REFERENCES [licensing].[t_product] ([id])

GO

ALTER TABLE [licensing].[t_promo_code] ADD CONSTRAINT

[FK_PromoCode_PromoType] FOREIGN KEY ([promo_type_id])

[li i ] [ ] ([id])


-----

EXEC sp_addextendedproperty N'MS_Description', N'Promo codes',
'SCHEMA', N'licensing', 'TABLE', N't_promo_code', NULL, NULL

GO

Uses

[licensing].[t_product]

[licensing].[t_promo_type]

[licensing]

Used By

[licensing].[t_order]

[licensing].[p_promo_code_delete]

[licensing].[p_promo_code_get_all]

[licensing].[p_promo_code_get_by_code]

[licensing].[p_promo_code_get_by_id]

[licensing].[p_promo_code_get_by_promotypeid]

[licensing].[p_promo_code_insert]

[licensing].[p_promo_code_update]

**[licensing].[t_promo_type]**

MS Description


-----

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity

id

int


-----

NOT NULL

1 - 1

name

nvarchar(250)

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_promo_type

id

True

SQL Script

CREATE TABLE [licensing].[t_promo_type]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[ ] [ h ] ( ) i l


-----

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_promo_type] ADD CONSTRAINT

[PK_t_promo_type] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'The types of
promo code', 'SCHEMA', N'licensing', 'TABLE', N't_promo_type',
NULL, NULL

GO

Uses

[licensing]

Used By

[licensing].[t_promo_code]

[licensing].[p_promo_type_delete]

[licensing].[p_promo_type_get_all]

[licensing].[p_promo_type_get_by_id]

[licensing].[p_promo_type_insert]

[licensing].[p_promo_type_update]

**[licensing].[t_status]**


-----

MS_Description

The status of the licensing related objects

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

21

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

object_type_id


-----

NOT NULL

status_id

int

4

NOT NULL

name

nvarchar(250)

500

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_status

object_type_id, status_id

True

Foreign Keys


-----

FK_t_status_t_object_type

object_type_id->[licensing].[t_object_type].[id]

SQL Script

CREATE TABLE [licensing].[t_status]

(

[object_type_id] [int] NOT NULL,

[status_id] [int] NOT NULL,

[name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS
NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_status] ADD CONSTRAINT

[PK_t_status] PRIMARY KEY CLUSTERED ([object_type_id],

[status_id]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_status] ADD CONSTRAINT

[FK_t_status_t_object_type] FOREIGN KEY ([object_type_id])
REFERENCES [licensing].[t_object_type] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The status of
the licensing related objects', 'SCHEMA', N'licensing', 'TABLE',
N't_status', NULL, NULL

GO


-----

[licensing].[t_object_type]

[licensing]

**[licensing].[t_subscription]**

MS_Description

Subscriptions

Properties

Property

Value

Row Count (~)

1

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021

Columns

Key

Name

Data Type


-----

Nullability

Identity

id

int

4

NOT NULL

1 - 1

customer_id

int

4

NOT NULL

product_id

int

4

NOT NULL

billing_type_id

int


-----

number_of_users

int

4

NOT NULL

number_of_devices

int

4

NOT NULL

active_from

datetime

8

NOT NULL

active_to

datetime

8

NOT NULL


-----

tinyint

1

NOT NULL

date_created

datetime

8

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_Subscription

id

True

IX_t_subscription_customer_id

customer_id


-----

Name

Columns

FK_Subscription_BillingType

billing_type_id->[licensing].[t_billing_type].[id]

FK_Subscription_Customer

customer_id->[licensing].[t_customer].[id]

FK_Subscription_Product

product_id->[licensing].[t_product].[id]

SQL Script

CREATE TABLE [licensing].[t_subscription]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[customer_id] [int] NOT NULL,

[product_id] [int] NOT NULL,

[billing_type_id] [int] NOT NULL,

[number_of_users] [int] NOT NULL,

[number_of_devices] [int] NOT NULL,

[active_from] [datetime] NOT NULL,

[active_to] [datetime] NOT NULL,

[status] [tinyint] NOT NULL,


-----

GO

ALTER TABLE [licensing].[t_subscription] ADD CONSTRAINT

[PK_Subscription] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_subscription_customer_id]
ON [licensing].[t_subscription] ([customer_id]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_subscription] ADD CONSTRAINT

[FK_Subscription_BillingType] FOREIGN KEY ([billing_type_id])
REFERENCES [licensing].[t_billing_type] ([id])

GO

ALTER TABLE [licensing].[t_subscription] ADD CONSTRAINT

[FK_Subscription_Customer] FOREIGN KEY ([customer_id])
REFERENCES [licensing].[t_customer] ([id])

GO

ALTER TABLE [licensing].[t_subscription] ADD CONSTRAINT

[FK_Subscription_Product] FOREIGN KEY ([product_id])
REFERENCES [licensing].[t_product] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'Subscriptions',
'SCHEMA', N'licensing', 'TABLE', N't_subscription', NULL, NULL

GO

Uses


-----

[licensing].[t_product]

[licensing]

Used By

[licensing].[t_order]

[licensing].[t_subscription_device]

[licensing].[t_subscription_user]

[licensing].[p_order_search]

[licensing].[p_subscription_delete]

[licensing].[p_subscription_get_all]

[licensing].[p_subscription_get_by_customerid]

[licensing].[p_subscription_get_by_customerid_productfamilycode]

[licensing].[p_subscription_get_by_id]

[licensing].[p_subscription_get_by_subscriptiondevice]

[licensing].[p_subscription_get_by_subscriptionuser]

[licensing].[p_subscription_insert]

[licensing].[p_subscription_search]

[licensing].[p_subscription_update]

[licensing].[p_subscription_user_search]

**[licensing].[t_subscription_device]**


-----

MS_Description

The devices allowed to use a subscription

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:29 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Identity


-----

NOT NULL

1 - 1

subscription_id

int

4

NOT NULL

device_code

nvarchar(250)

500

NOT NULL

device_name

nvarchar(500)

1000

NOT NULL

date_created

datetime


-----

status

tinyint

1

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_Subscription_Device

id

True

IX_t_subscription_device_code

device_code

IX_t_subscription_device_subscription_id

subscription_id


-----

Name

Columns

FK_Subscription_Device_Subscription

subscription_id->[licensing].[t_subscription].[id]

SQL Script

CREATE TABLE [licensing].[t_subscription_device]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[subscription_id] [int] NOT NULL,

[device_code] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[device_name] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[date_created] [datetime] NOT NULL,

[status] [tinyint] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_subscription_device] ADD
CONSTRAINT [PK_Subscription_Device] PRIMARY KEY CLUSTERED
([id]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_t_subscription_device_code]
ON [li i ] [t b i ti d i ] ([d i d ]) ON


-----

GO

CREATE NONCLUSTERED INDEX

[IX_t_subscription_device_subscription_id] ON [licensing].

[t_subscription_device] ([subscription_id]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_subscription_device] ADD
CONSTRAINT [FK_Subscription_Device_Subscription] FOREIGN KEY
([subscription_id]) REFERENCES [licensing].[t_subscription] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The devices
allowed to use a subscription', 'SCHEMA', N'licensing', 'TABLE',
N't_subscription_device', NULL, NULL

GO

Uses

[licensing].[t_subscription]

[licensing]

Used By

[licensing].[p_subscription_device_delete]

[licensing].[p_subscription_device_get_all]

[licensing].[p_subscription_device_get_by_id]

[licensing].[p_subscription_device_get_by_subscriptionid]

[licensing].[p_subscription_device_get_by_subscriptionid_devicecode]

[li i ] [ b i ti d i i t]


-----

[licensing].[p_subscription_get_by_subscriptiondevice]

**[licensing].[t_subscription_user]**

MS_Description

The users allowed to use a subscription

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

1

Created

06:53:27 vrijdag 14 mei 2021

Last Modified

06:53:28 vrijdag 14 mei 2021

Columns

Key

Name


-----

Max Length (Bytes)

Nullability

Identity

id

int

4

NOT NULL

1 - 1

subscription_id

int

4

NOT NULL

username

nvarchar(250)

500

NOT NULL

date_created

datetime


-----

NOT NULL

status

tinyint

1

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_Subscription_User

id

True

IX_t_subscription_user_subscription_id

subscription_id

IX_t_subscription_user_username

username


-----

Foreign Keys

Name

Columns

FK_Subscription_User_Subscription

subscription_id->[licensing].[t_subscription].[id]

SQL Script

CREATE TABLE [licensing].[t_subscription_user]

(

[id] [int] NOT NULL IDENTITY(1, 1),

[subscription_id] [int] NOT NULL,

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[date_created] [datetime] NOT NULL,

[status] [tinyint] NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_subscription_user] ADD CONSTRAINT

[PK_Subscription_User] PRIMARY KEY CLUSTERED ([id]) ON

[PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_subscription_user_subscription_id] ON [licensing].

[t_subscription_user] ([subscription_id]) ON [PRIMARY]


-----

CREATE NONCLUSTERED INDEX [IX_t_subscription_user_username]
ON [licensing].[t_subscription_user] ([username]) ON [PRIMARY]

GO

ALTER TABLE [licensing].[t_subscription_user] ADD CONSTRAINT

[FK_Subscription_User_Subscription] FOREIGN KEY
([subscription_id]) REFERENCES [licensing].[t_subscription] ([id])

GO

EXEC sp_addextendedproperty N'MS_Description', N'The users
allowed to use a subscription', 'SCHEMA', N'licensing', 'TABLE',
N't_subscription_user', NULL, NULL

GO

Uses

[licensing].[t_subscription]

[licensing]

Used By

[licensing].[p_subscription_get_by_subscriptionuser]

[licensing].[p_subscription_user_delete]

[licensing].[p_subscription_user_get_all]

[licensing].[p_subscription_user_get_by_id]

[licensing].[p_subscription_user_get_by_subscriptionid_username]

[licensing].[p_subscription_user_insert]

[licensing].[p_subscription_user_search]


-----

**[mft].[t_chunkingmachine]**

MS_Description

State machine for the chunking service (download Blobs)

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type


-----

Nullability

Default

chunkingmachineid

uniqueidentifier

16

NOT NULL

chunkingmachinestatusid

int

4

NOT NULL

((0))

domain

nvarchar(250)

500

NOT NULL

username

nvarchar(250)

500


-----

password

nvarchar(500)

1000

NOT NULL

machineid

uniqueidentifier

16

NOT NULL

filepath

nvarchar(500)

1000

NOT NULL

filename

nvarchar(500)

1000

NOT NULL


-----

nvarchar(128)

256

NOT NULL

temppath

nvarchar(500)

1000

NOT NULL

buffersize

int

4

NOT NULL

((0))

chunks

int

4

NOT NULL

((0))

updateby


-----

100

NOT NULL

lastupdate

datetime

8

NOT NULL

(getutcdate())

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int


-----

((0))

Indexes

Key

Name

Key Columns

Unique

PK_t_chunkingmachine

chunkingmachineid

True

IX_t_chunkingmachine_chunkingmachinestatusid

chunkingmachinestatusid

Foreign Keys

Name

Columns

FK_t_chunkingmachine_t_chunkingmachine_status

chunkingmachinestatusid->[mft].[t_chunkingmachine_status].

[chunkingmachinestatusid]

SQL Script

[ f ] [ h ki hi ]


-----

[chunkingmachineid] [uniqueidentifier] NOT NULL,

[chunkingmachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_chunkingmachinestatusid] DEFAULT ((0)),

[domain] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[password] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[machineid] [uniqueidentifier] NOT NULL,

[filepath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filename] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filecheksum] [nvarchar] (128) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[temppath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[buffersize] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_buffersize] DEFAULT ((0)),

[chunks] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_chunks] DEFAULT ((0)),

[updateby] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[lastupdate] [datetime] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_lastupdate] DEFAULT (getutcdate()),


-----

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_retry] DEFAULT ((0))

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_chunkingmachine] ADD CONSTRAINT

[PK_t_chunkingmachine] PRIMARY KEY CLUSTERED
([chunkingmachineid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_chunkingmachine_chunkingmachinestatusid] ON [mft].

[t_chunkingmachine] ([chunkingmachinestatusid]) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_chunkingmachine] ADD CONSTRAINT

[FK_t_chunkingmachine_t_chunkingmachine_status] FOREIGN KEY
([chunkingmachinestatusid]) REFERENCES [mft].

[t_chunkingmachine_status] ([chunkingmachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'State machine
for the chunking service (download Blobs)', 'SCHEMA', N'mft',
'TABLE', N't_chunkingmachine', NULL, NULL

GO

Uses

[mft].[t_chunkingmachine_status]


-----

[mft].[p_check_download_available]

[mft].[p_chunkingmachine_book]

[mft].[p_chunkingmachine_completed]

[mft].[p_chunkingmachine_insert]

[mft].[p_chunkingmachine_unbook]

[mft].[p_cleaningmachine_bookchunking]

[mft].[p_cleaningmachine_move_chunkinghistory]

[mft].[p_cleaningmachine_unbookchunking]

[mft].[p_cleaningmachinenotcompleted_bookchunking]

[mft].[p_cleaningmachinenotcompleted_bookchunkingmoving]

[mft].[p_get_activity_from_chunking]

**[mft].[t_chunkingmachine_history]**

MS_Description

State machine for the chunking service history

Properties

Property

Value

Collation


-----

Row Count (~)

0

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

chunkingmachineid

uniqueidentifier

16

NOT NULL

chunkingmachinestatusid

int


-----

NOT NULL

((0))

domain

nvarchar(250)

500

NOT NULL

username

nvarchar(250)

500

NOT NULL

password

nvarchar(500)

1000

NOT NULL

machineid

uniqueidentifier

16

NOT NULL


-----

filepath

nvarchar(500)

1000

NOT NULL

filename

nvarchar(500)

1000

NOT NULL

filecheksum

nvarchar(128)

256

NOT NULL

temppath

nvarchar(500)

1000

NOT NULL

buffersize


-----

NOT NULL

((0))

chunks

int

4

NOT NULL

((0))

updateby

nvarchar(50)

100

NOT NULL

lastupdate

datetime

8

NOT NULL

(getutcdate())

bookedby

i id ifi


-----

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int

4

NOT NULL

((0))

moved_on

datetime

8

NULL allowed

Indexes

Key

Name

K C l


-----

PK_t_chunkingmachine_history

chunkingmachineid

True

Foreign Keys

Name

Columns

FK_t_chunkingmachine_history_t_chunkingmachine_status

chunkingmachinestatusid->[mft].[t_chunkingmachine_status].

[chunkingmachinestatusid]

SQL Script

CREATE TABLE [mft].[t_chunkingmachine_history]

(

[chunkingmachineid] [uniqueidentifier] NOT NULL,

[chunkingmachinestatusid] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_history_chunkingmachinestatusid]
DEFAULT ((0)),

[domain] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[password] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,


-----

[filepath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filename] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filecheksum] [nvarchar] (128) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[temppath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[buffersize] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_history_buffersize] DEFAULT ((0)),

[chunks] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_history_chunks] DEFAULT ((0)),

[updateby] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[lastupdate] [datetime] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_history_lastupdate] DEFAULT
(getutcdate()),

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF_t_chunkingmachine_history_retry] DEFAULT ((0)),

[moved_on] [datetime] NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_chunkingmachine_history] ADD
CONSTRAINT [PK t chunkingmachine history] PRIMARY KEY


-----

GO

ALTER TABLE [mft].[t_chunkingmachine_history] ADD
CONSTRAINT

[FK_t_chunkingmachine_history_t_chunkingmachine_status]
FOREIGN KEY ([chunkingmachinestatusid]) REFERENCES [mft].

[t_chunkingmachine_status] ([chunkingmachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'State machine
for the chunking service history', 'SCHEMA', N'mft', 'TABLE',
N't_chunkingmachine_history', NULL, NULL

GO

Uses

[mft].[t_chunkingmachine_status]

[mft]

Used By

[mft].[p_cleaningmachine_move_chunkinghistory]

**[mft].[t_chunkingmachine_status]**

MS_Description

Status of the chunking service state machine

Properties


-----

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

9

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

chunkingmachinestatusid

int

4

NOT NULL


-----

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_chunkingmachine_status

chunkingmachinestatusid

True

SQL Script

CREATE TABLE [mft].[t_chunkingmachine_status]

(

[chunkingmachinestatusid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_chunkingmachine_status] ADD CONSTRAINT

[PK_t_chunkingmachine_status] PRIMARY KEY CLUSTERED
([chunkingmachinestatusid]) ON [PRIMARY]


-----

EXEC sp_addextendedproperty N'MS_Description', N'Status of the
chunking service state machine', 'SCHEMA', N'mft', 'TABLE',
N't_chunkingmachine_status', NULL, NULL

GO

Uses

[mft]

Used By

[mft].[t_chunkingmachine]

[mft].[t_chunkingmachine_history]

**[mft].[t_mergemachine]**

MS_Description

State machine for the merging service (upload Blobs)

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)


-----

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

mergemachineid

uniqueidentifier

16

NOT NULL

mergemachinestatusid

int

4

NOT NULL


-----

domain

nvarchar(250)

500

NOT NULL

username

nvarchar(250)

500

NOT NULL

password

nvarchar(500)

1000

NOT NULL

machineid

uniqueidentifier

16

NOT NULL

filepath


-----

1000

NOT NULL

filename

nvarchar(500)

1000

NOT NULL

filecheksum

nvarchar(128)

256

NOT NULL

temppath

nvarchar(500)

1000

NOT NULL

chunks

int


-----

((0))

updateby

nvarchar(50)

100

NOT NULL

lastupdate

datetime

8

NOT NULL

(getutcdate())

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed


-----

retry

int

4

NOT NULL

((0))

Indexes

Key

Name

Key Columns

Unique

PK_t_mergemachine

mergemachineid

True

IX_t_mergemachine_mergemachinestatusid

mergemachinestatusid

Foreign Keys

Name

Columns

FK_t_mergemachine_t_mergemachine_status


-----

[mergemachinestatusid]

SQL Script

CREATE TABLE [mft].[t_mergemachine]

(

[mergemachineid] [uniqueidentifier] NOT NULL,

[mergemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_Table_1_chunkingmachinestatusid] DEFAULT ((-1)),

[domain] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[password] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[machineid] [uniqueidentifier] NOT NULL,

[filepath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filename] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filecheksum] [nvarchar] (128) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[temppath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[chunks] [int] NOT NULL CONSTRAINT

[DF_t_mergemachine_chunks] DEFAULT ((0)),

[updateby] [nvarchar] (50) COLLATE


-----

[DF_t_mergemachine_lastupdate] DEFAULT (getutcdate()),

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT [DF_t_mergemachine_retry]
DEFAULT ((0))

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_mergemachine] ADD CONSTRAINT

[PK_t_mergemachine] PRIMARY KEY CLUSTERED
([mergemachineid]) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX

[IX_t_mergemachine_mergemachinestatusid] ON [mft].

[t_mergemachine] ([mergemachinestatusid]) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_mergemachine] ADD CONSTRAINT

[FK_t_mergemachine_t_mergemachine_status] FOREIGN KEY
([mergemachinestatusid]) REFERENCES [mft].

[t_mergemachine_status] ([mergemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'State machine
for the merging service (upload Blobs)', 'SCHEMA', N'mft', 'TABLE',
N't_mergemachine', NULL, NULL

GO

Uses


-----

[mft]

Used By

[mft].[p_check_upload_finished]

[mft].[p_cleaningmachine_bookmergemoving]

[mft].[p_cleaningmachine_bookmerging]

[mft].[p_cleaningmachine_move_mergehistory]

[mft].[p_cleaningmachine_unbookmerging]

[mft].[p_cleaningmachinenotcompleted_bookmerging]

[mft].[p_get_activity_from_merge]

[mft].[p_mergemachine_book]

[mft].[p_mergemachine_insert]

[mft].[p_mergemachine_ready_to_process]

[mft].[p_mergemachine_unbook]

**[mft].[t_mergemachine_history]**

MS_Description

State machine for the merging service history

Properties

Property


-----

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

mergemachineid

uniqueidentifier

16

NOT NULL


-----

int

4

NOT NULL

((-1))

domain

nvarchar(250)

500

NOT NULL

username

nvarchar(250)

500

NOT NULL

password

nvarchar(500)

1000

NOT NULL

machineid

i id tifi


-----

NOT NULL

filepath

nvarchar(500)

1000

NOT NULL

filename

nvarchar(500)

1000

NOT NULL

filecheksum

nvarchar(128)

256

NOT NULL

temppath

nvarchar(500)

1000

NOT NULL


-----

chunks

int

4

NOT NULL

((0))

updateby

nvarchar(50)

100

NOT NULL

lastupdate

datetime

8

NOT NULL

(getutcdate())

bookedby

uniqueidentifier

16

NULL allowed

b ki d t


-----

NULL allowed

retry

int

4

NOT NULL

((0))

moved_on

datetime

8

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_mergemachine_history

mergemachineid


-----

Foreign Keys

Name

Columns

FK_t_mergemachine_history_t_mergemachine_status

mergemachinestatusid->[mft].[t_mergemachine_status].

[mergemachinestatusid]

SQL Script

CREATE TABLE [mft].[t_mergemachine_history]

(

[mergemachineid] [uniqueidentifier] NOT NULL,

[mergemachinestatusid] [int] NOT NULL CONSTRAINT

[DF_chunkingmachinestatusid_history] DEFAULT ((-1)),

[domain] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[username] [nvarchar] (250) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[password] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[machineid] [uniqueidentifier] NOT NULL,

[filepath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[filename] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,


-----

SQL_Latin1_General_CP1_CI_AS NOT NULL,

[temppath] [nvarchar] (500) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[chunks] [int] NOT NULL CONSTRAINT

[DF_t_mergemachine_chunks_history] DEFAULT ((0)),

[updateby] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL,

[lastupdate] [datetime] NOT NULL CONSTRAINT

[DF_t_mergemachine_lastupdate_history] DEFAULT (getutcdate()),

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NOT NULL CONSTRAINT

[DF_t_mergemachine_retry_history] DEFAULT ((0)),

[moved_on] [datetime] NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_mergemachine_history] ADD CONSTRAINT

[PK_t_mergemachine_history] PRIMARY KEY CLUSTERED
([mergemachineid]) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_mergemachine_history] ADD CONSTRAINT

[FK_t_mergemachine_history_t_mergemachine_status] FOREIGN KEY
([mergemachinestatusid]) REFERENCES [mft].

[t_mergemachine_status] ([mergemachinestatusid])

GO

EXEC sp addextendedproperty N'MS Description', N'State machine


-----

N't_mergemachine_history', NULL, NULL

GO

Uses

[mft].[t_mergemachine_status]

[mft]

Used By

[mft].[p_cleaningmachine_move_mergehistory]

**[mft].[t_mergemachine_status]**

MS_Description

Status of the merging service state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

12

Created


-----

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

mergemachinestatusid

int

4

NOT NULL

description

nvarchar(50)

100

NOT NULL

Indexes

Key

Name


-----

Unique

PK_t_mergemachine_status

mergemachinestatusid

True

SQL Script

CREATE TABLE [mft].[t_mergemachine_status]

(

[mergemachinestatusid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_mergemachine_status] ADD CONSTRAINT

[PK_t_mergemachine_status] PRIMARY KEY CLUSTERED
([mergemachinestatusid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Status of the
merging service state machine', 'SCHEMA', N'mft', 'TABLE',
N't_mergemachine_status', NULL, NULL

GO

Uses


-----

Used By

[mft].[t_mergemachine]

[mft].[t_mergemachine_history]

**[mft].[t_state_machine_status]**

MS_Description

All states for the MFT state machines

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

5

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:39 vrijdag 14 mei 2021

Columns


-----

Name

Data Type

Max Length (Bytes)

Nullability

statemachinestatusid

int

4

NOT NULL

statemachinestatusdescription

nvarchar(50)

100

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_state_machine_status

statemachinestatusid


-----

SQL Script

CREATE TABLE [mft].[t_state_machine_status]

(

[statemachinestatusid] [int] NOT NULL,

[statemachinestatusdescription] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_state_machine_status] ADD CONSTRAINT

[PK_t_state_machine_status] PRIMARY KEY CLUSTERED
([statemachinestatusid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'All states for
the MFT state machines', 'SCHEMA', N'mft', 'TABLE',
N't_state_machine_status', NULL, NULL

GO

Uses

[mft]

**[mft].[t_storagemachine_status]**


-----

State of the Storage state machine

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

5

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

storagemachinestatusid

int


-----

NOT NULL

description

nvarchar(50)

100

NOT NULL

Indexes

Key

Name

Key Columns

Unique

PK_t_storagemachine_status

storagemachinestatusid

True

SQL Script

CREATE TABLE [mft].[t_storagemachine_status]

(

[storagemachinestatusid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NOT NULL


-----

ALTER TABLE [mft].[t_storagemachine_status] ADD CONSTRAINT

[PK_t_storagemachine_status] PRIMARY KEY CLUSTERED
([storagemachinestatusid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'State of the
Storage state machine ', 'SCHEMA', N'mft', 'TABLE',
N't_storagemachine_status', NULL, NULL

GO

Uses

[mft]

Used By

[mft].[t_storageoperations]

[mft].[t_storageoperations_history]

**[mft].[t_storageoperations]**

MS_Description

State machine for the Storage service (file operations)

Properties

Property

Value


-----

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021

Columns

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

storageoperationsid

uniqueidentifier

16

NOT NULL

(newid())


-----

NOT NULL

storageoperationtype

int

4

NOT NULL

updatedby

nvarchar(50)

100

NULL allowed

lastupdate

datetime

8

NULL allowed

bookedby

uniqueidentifier

16


-----

bookingdate

datetime

8

NULL allowed

retry

int

4

NULL allowed

action1

nvarchar(max)

max

NULL allowed

action2

nvarchar(max)

max

NULL allowed


-----

nvarchar(50)

100

NULL allowed

password

nvarchar(max)

max

NULL allowed

domain

nvarchar(50)

100

NULL allowed

machineid

uniqueidentifier

16

NULL allowed

Indexes

Key


-----

Key Columns

Unique

PK_t_storageoperations

storageoperationsid

True

IX_t_storageoperations_storageoperationsmachinestatusid

storageoperationsmachinestatusid

Foreign Keys

Name

Columns

FK__t_storage__stora__5D95E53A

storageoperationtype->[mft].[t_storageoperationtype].

[storageoperationtypeid]

FK__t_storage__stora__5E8A0973

storageoperationsmachinestatusid->[mft].

[t_storagemachine_status].[storagemachinestatusid]

SQL Script

CREATE TABLE [mft].[t_storageoperations]

(i


-----

DEFAULT (newid()),

[storageoperationsmachinestatusid] [int] NOT NULL,

[storageoperationtype] [int] NOT NULL,

[updatedby] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lastupdate] [datetime] NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NULL,

[action1] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[action2] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[username] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[password] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[domain] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS
NULL,

[machineid] [uniqueidentifier] NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_storageoperations] ADD CONSTRAINT

[PK_t_storageoperations] PRIMARY KEY CLUSTERED
([storageoperationsid]) ON [PRIMARY]


-----

CREATE NONCLUSTERED INDEX

[IX_t_storageoperations_storageoperationsmachinestatusid] ON

[mft].[t_storageoperations] ([storageoperationsmachinestatusid])
ON [PRIMARY]

GO

ALTER TABLE [mft].[t_storageoperations] ADD CONSTRAINT

[FK__t_storage__stora__5D95E53A] FOREIGN KEY
([storageoperationtype]) REFERENCES [mft].

[t_storageoperationtype] ([storageoperationtypeid])

GO

ALTER TABLE [mft].[t_storageoperations] ADD CONSTRAINT

[FK__t_storage__stora__5E8A0973] FOREIGN KEY
([storageoperationsmachinestatusid]) REFERENCES [mft].

[t_storagemachine_status] ([storagemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'State
machine for the Storage service (file operations)', 'SCHEMA', N'mft',
'TABLE', N't_storageoperations', NULL, NULL

GO

Uses

[mft].[t_storagemachine_status]

[mft].[t_storageoperationtype]

[mft]

Used By

[mft].[p_check_storageoperation_finished]


-----

[mft].[p_storagemachine_book]

[mft].[p_storagemachine_insert]

[mft].[p_storagemachine_unbook]

[mft].[p_storageoperations_move_history]

**[mft].[t_storageoperations_history]**

MS_Description

State machine for the Storage service history

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

0

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021


-----

Key

Name

Data Type

Max Length (Bytes)

Nullability

Default

storageoperationsid

uniqueidentifier

16

NOT NULL

(newid())

storageoperationsmachinestatusid

int

4

NOT NULL

storageoperationtype

int

4

NOT NULL


-----

updatedby

nvarchar(50)

100

NULL allowed

lastupdate

datetime

8

NULL allowed

bookedby

uniqueidentifier

16

NULL allowed

bookingdate

datetime

8

NULL allowed

retry

int


-----

NULL allowed

action1

nvarchar(max)

max

NULL allowed

action2

nvarchar(max)

max

NULL allowed

username

nvarchar(50)

100

NULL allowed

password

nvarchar(max)

max

NULL allowed


-----

domain

nvarchar(50)

100

NULL allowed

machineid

uniqueidentifier

16

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_storageoperations_history

storageoperationsid

True

Foreign Keys

Name

C l


-----

storageoperationtype->[mft].[t_storageoperationtype].

[storageoperationtypeid]

FK__t_storage_history__stora__5E8A0973

storageoperationsmachinestatusid->[mft].

[t_storagemachine_status].[storagemachinestatusid]

SQL Script

CREATE TABLE [mft].[t_storageoperations_history]

(

[storageoperationsid] [uniqueidentifier] NOT NULL ROWGUIDCOL
CONSTRAINT [DF_t_storageoperations_history_storageoperationsid]
DEFAULT (newid()),

[storageoperationsmachinestatusid] [int] NOT NULL,

[storageoperationtype] [int] NOT NULL,

[updatedby] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[lastupdate] [datetime] NULL,

[bookedby] [uniqueidentifier] NULL,

[bookingdate] [datetime] NULL,

[retry] [int] NULL,

[action1] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[action2] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[ ] [ h ] ( )


-----

[password] [nvarchar] (max) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL,

[domain] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS
NULL,

[machineid] [uniqueidentifier] NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_storageoperations_history] ADD
CONSTRAINT [PK_t_storageoperations_history] PRIMARY KEY
CLUSTERED ([storageoperationsid]) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_storageoperations_history] ADD
CONSTRAINT [FK__t_storage_history__stora__5D95E53A] FOREIGN
KEY ([storageoperationtype]) REFERENCES [mft].

[t_storageoperationtype] ([storageoperationtypeid])

GO

ALTER TABLE [mft].[t_storageoperations_history] ADD
CONSTRAINT [FK__t_storage_history__stora__5E8A0973] FOREIGN
KEY ([storageoperationsmachinestatusid]) REFERENCES [mft].

[t_storagemachine_status] ([storagemachinestatusid])

GO

EXEC sp_addextendedproperty N'MS_Description', N'State machine
for the Storage service history', 'SCHEMA', N'mft', 'TABLE',
N't_storageoperations_history', NULL, NULL

GO


-----

[mft].[t_storageoperationtype]

[mft]

Used By

[mft].[p_storageoperations_move_history]

**[mft].[t_storageoperationtype]**

MS_Description

Storage state machine operation types

Properties

Property

Value

Collation

SQL_Latin1_General_CP1_CI_AS

Row Count (~)

6

Created

06:53:39 vrijdag 14 mei 2021

Last Modified

06:53:40 vrijdag 14 mei 2021


-----

Key

Name

Data Type

Max Length (Bytes)

Nullability

storageoperationtypeid

int

4

NOT NULL

description

nvarchar(50)

100

NULL allowed

Indexes

Key

Name

Key Columns

Unique

PK_t_storageoperationtype


-----

True

SQL Script

CREATE TABLE [mft].[t_storageoperationtype]

(

[storageoperationtypeid] [int] NOT NULL,

[description] [nvarchar] (50) COLLATE
SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]

GO

ALTER TABLE [mft].[t_storageoperationtype] ADD CONSTRAINT

[PK_t_storageoperationtype] PRIMARY KEY CLUSTERED
([storageoperationtypeid]) ON [PRIMARY]

GO

EXEC sp_addextendedproperty N'MS_Description', N'Storage state
machine operation types', 'SCHEMA', N'mft', 'TABLE',
N't_storageoperationtype', NULL, NULL

GO

Uses

[mft]

Used By

[mft].[t_storageoperations]

[mft] [t storageoperations history]


-----

**Stored Procedures**

Objects

Name

auth.p_user_add_role

auth.p_user_delete

auth.p_user_get_by_username

auth.p_user_get_password

auth.p_user_get_roles

auth.p_user_insert

auth.p_user_remove_role

auth.p_user_update

auth.p_user_update_password

conversion.p_conversion_book

conversion.p_conversion_book_fallback

conversion.p_conversion_book_history

conversion.p_conversion_insert

conversion.p_conversion_unbook

conversion.p_image_resizing_book

conversion.p_image_resizing_book_fallback


-----

conversion.p_image_resizing_booking_insert

conversion.p_image_resizing_unbook

dbo.p_cache_load

dbo.p_cache_publishid_get

dbo.p_canvasshotter_book

dbo.p_canvasshotter_booking_history_search

dbo.p_canvasshotter_booking_insert_conditional

dbo.p_canvasshotter_fallback

dbo.p_canvasshotter_history

dbo.p_canvasshotter_unbook

dbo.p_configuration_get_all

dbo.p_configuration_load

dbo.p_configuration_set

dbo.p_get_all_template_types

dbo.p_insert_event

dbo.p_insert_trace

dbo.p_language_get_all

dbo.p_language_insert

dbo.p_language_is_id_valid

dbo.p_newsletter_subscriber_insert

dbo.p online user book


-----

dbo.p_online_user_delete

dbo.p_online_user_get_by_connectionid

dbo.p_online_user_get_by_username

dbo.p_online_user_get_first_by_project_id

dbo.p_online_user_get_projectid

dbo.p_online_user_insert

dbo.p_online_user_search_backend

dbo.p_online_user_set_disconnected

dbo.p_online_user_unbook

dbo.p_online_user_unbook_forgot

dbo.p_online_user_update_keepalive

dbo.p_project_copy_book

dbo.p_project_copy_fallback

dbo.p_project_copy_history

dbo.p_project_copy_history_search

dbo.p_project_copy_insert

dbo.p_project_copy_unbook

dbo.p_project_delete_template

dbo.p_project_get_by_id

dbo.p_project_get_by_userid

dbo.p project get connectionid for presenter


-----

dbo.p_project_get_coparticipating_projects

dbo.p_project_get_coparticipating_users

dbo.p_project_get_licensed_projects

dbo.p_project_get_participating_projects

dbo.p_project_get_participating_projects_count

dbo.p_project_get_templates

dbo.p_project_insert

dbo.p_project_participant_delete

dbo.p_project_participant_get_by_coparticipant

dbo.p_project_participant_get_by_projectid

dbo.p_project_participant_get_by_projectid_and_userid

dbo.p_project_participant_get_by_userid

dbo.p_project_participant_insert

dbo.p_project_participant_update

dbo.p_project_remove_user_as_presenter_in_all

dbo.p_project_search_backend

dbo.p_project_set_presenter

dbo.p_project_setlock

dbo.p_project_setversion

dbo.p_project_tag_delete

dbo.p project tag get by projectid


-----

dbo.p_project_tag_insert

dbo.p_project_update

dbo.p_project_update_background

dbo.p_project_update_canvas_size_ratio

dbo.p_project_update_deleted

dbo.p_project_update_owner

dbo.p_project_update_sas_token

dbo.p_project_update_template

dbo.p_project_update_thumbnail

dbo.p_project_update_zoom_offset

dbo.p_project_upgrade_book

dbo.p_project_upgrade_fallback

dbo.p_project_upgrade_history

dbo.p_project_upgrade_insert

dbo.p_project_upgrade_unbook

dbo.p_projecttypes_convert_to_template

dbo.p_projecttypes_delete

dbo.p_projecttypes_get_all_template_types

dbo.p_projecttypes_insert_new_projecttype

dbo.p_projecttypes_update

dbo.p projecttypes verify if template


-----

dbo.p_quicklink_get_by_id

dbo.p_quicklink_get_by_projectid

dbo.p_quicklink_get_tiles_for_quicklink

dbo.p_quicklink_insert

dbo.p_quicklink_remove_tile_from_quicklinks

dbo.p_quicklink_update

dbo.p_storage_eraser_book

dbo.p_storage_eraser_unbook

dbo.p_telemetry_insert

dbo.p_tile_relation_by_participating_tile

dbo.p_tile_relation_delete

dbo.p_tile_relation_delete_all_by_tileid

dbo.p_tile_relation_get_by_projectid

dbo.p_tile_relation_get_by_projectid_paged

dbo.p_tile_relation_insert

dbo.p_tile_relation_update

dbo.p_tile_relation_with_tile

dbo.p_tile_voting_get_by_projectid_and_user_id

dbo.p_tile_voting_get_by_projectid_and_user_id_paged

dbo.p_tile_voting_update

dbo.p tilecopy cleanup


-----

dbo.p_tilecopy_getrelations_by_token

dbo.p_tilecopy_getsourcetiles_by_token

dbo.p_tilecopy_insertcopiedtile

dbo.p_tilecopy_insertrelation

dbo.p_tilecopy_insertsourcetile

dbo.p_tilestatus_copy_book

dbo.p_tilestatus_copy_fallback

dbo.p_tilestatus_copy_history

dbo.p_tilestatus_copy_history_search

dbo.p_tilestatus_copy_insert

dbo.p_tilestatus_copy_unbook

dbo.p_tilestatus_delete

dbo.p_tilestatus_get_by_id

dbo.p_tilestatus_get_by_parenttile

dbo.p_tilestatus_get_by_projectid

dbo.p_tilestatus_get_by_projectid_paged

dbo.p_tilestatus_get_by_projectid_with_thumbnails

dbo.p_tilestatus_get_max_zindex

dbo.p_tilestatus_get_thumbnails_for_tile

dbo.p_tilestatus_get_toplevel_by_projectid

dbo.p tilestatus get upgradable for project


-----

dbo.p_tilestatus_insert

dbo.p_tilestatus_stroke_by_tileid

dbo.p_tilestatus_stroke_insert

dbo.p_tilestatus_stroke_update

dbo.p_tilestatus_unlock_by_ids

dbo.p_tilestatus_unlock_by_lockedby

dbo.p_tilestatus_unlock_by_project_lockedby

dbo.p_tilestatus_unlock_forgot

dbo.p_tilestatus_update

dbo.p_tilestatus_update_blobstatusid

dbo.p_tilestatus_update_containertype

dbo.p_tilestatus_update_content

dbo.p_tilestatus_update_grouped

dbo.p_tilestatus_update_lock

dbo.p_tilestatus_update_pinning

dbo.p_tilestatus_update_position

dbo.p_tilestatus_update_voting

dbo.p_tilestatus_update_zindex

dbo.p_tilestatus_upgrade_book

dbo.p_tilestatus_upgrade_file

dbo.p tilestatus upgrade insert


-----

dbo.p_update_blobstatus_for_thumbnails

dbo.p_user_get_all

dbo.p_user_get_by_project

dbo.p_user_get_by_project_count

dbo.p_user_get_by_userid

dbo.p_user_get_by_username

dbo.p_user_insert

dbo.p_user_update

licensing.p_billing_type_delete

licensing.p_billing_type_get_all

licensing.p_billing_type_get_by_id

licensing.p_billing_type_insert

licensing.p_billing_type_update

licensing.p_customer_delete

licensing.p_customer_get_all

licensing.p_customer_get_by_id

licensing.p_customer_get_by_username

licensing.p_customer_insert

licensing.p_customer_search

licensing.p_customer_update

licensing.p import data book


-----

licensing.p_import_data_insert

licensing.p_import_data_unbook

licensing.p_license_file_history_get_by_id

licensing.p_license_file_history_insert

licensing.p_license_file_history_search

licensing.p_order_delete

licensing.p_order_get_all

licensing.p_order_get_by_id

licensing.p_order_insert

licensing.p_order_search

licensing.p_order_update

licensing.p_orderline_delete

licensing.p_orderline_get_all

licensing.p_orderline_get_by_id

licensing.p_orderline_get_by_orderid

licensing.p_orderline_insert

licensing.p_orderline_update

licensing.p_payment_delete

licensing.p_payment_get_all

licensing.p_payment_get_by_id

licensing.p payment insert


-----

licensing.p_payment_method_get_all

licensing.p_payment_method_get_by_id

licensing.p_payment_method_insert

licensing.p_payment_method_update

licensing.p_payment_search

licensing.p_payment_update

licensing.p_price_delete

licensing.p_price_get_all

licensing.p_price_get_by_id

licensing.p_price_get_by_pricelistid

licensing.p_price_insert

licensing.p_price_update

licensing.p_pricelist_delete

licensing.p_pricelist_get_all

licensing.p_pricelist_get_by_id

licensing.p_pricelist_insert

licensing.p_pricelist_update

licensing.p_product_delete

licensing.p_product_get_all

licensing.p_product_get_by_id

licensing.p product get by productfamily


-----

licensing.p_product_update

licensing.p_promo_code_delete

licensing.p_promo_code_get_all

licensing.p_promo_code_get_by_code

licensing.p_promo_code_get_by_id

licensing.p_promo_code_get_by_promotypeid

licensing.p_promo_code_insert

licensing.p_promo_code_update

licensing.p_promo_type_delete

licensing.p_promo_type_get_all

licensing.p_promo_type_get_by_id

licensing.p_promo_type_insert

licensing.p_promo_type_update

licensing.p_subscription_delete

licensing.p_subscription_device_delete

licensing.p_subscription_device_get_all

licensing.p_subscription_device_get_by_id

licensing.p_subscription_device_get_by_subscriptionid

licensing.p_subscription_device_get_by_subscriptionid_devicecode

licensing.p_subscription_device_insert

licensing.p subscription device update


-----

licensing.p_subscription_get_by_customerid

licensing.p_subscription_get_by_customerid_productfamilycode

licensing.p_subscription_get_by_id

licensing.p_subscription_get_by_subscriptiondevice

licensing.p_subscription_get_by_subscriptionuser

licensing.p_subscription_insert

licensing.p_subscription_search

licensing.p_subscription_update

licensing.p_subscription_user_delete

licensing.p_subscription_user_get_all

licensing.p_subscription_user_get_by_id

licensing.p_subscription_user_get_by_subscriptionid_username

licensing.p_subscription_user_insert

licensing.p_subscription_user_search

licensing.p_subscription_user_update

mft.p_check_download_available

mft.p_check_storageoperation_finished

mft.p_check_upload_finished

mft.p_chunkingmachine_book

mft.p_chunkingmachine_completed

mft.p chunkingmachine insert


-----

mft.p_cleaningmachine_bookchunking

mft.p_cleaningmachine_bookmergemoving

mft.p_cleaningmachine_bookmerging

mft.p_cleaningmachine_move_chunkinghistory

mft.p_cleaningmachine_move_mergehistory

mft.p_cleaningmachine_unbookchunking

mft.p_cleaningmachine_unbookmerging

mft.p_cleaningmachinenotcompleted_bookchunking

mft.p_cleaningmachinenotcompleted_bookchunkingmoving

mft.p_cleaningmachinenotcompleted_bookmerging

mft.p_configuration_load_documentexplorer

mft.p_get_activity_from_chunking

mft.p_get_activity_from_merge

mft.p_get_activity_from_storage

mft.p_mergemachine_book

mft.p_mergemachine_insert

mft.p_mergemachine_ready_to_process

mft.p_mergemachine_unbook

mft.p_storagemachine_book

mft.p_storagemachine_insert

mft.p storagemachine unbook


-----

**[auth].[p_user_add_role]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@username

nvarchar(250)

500

@rolename

nvarchar(250)

500

@rows

int

4

Out


-----

@username nvarchar(250),

@rolename nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO auth.t_user_role ([userid], [roleid])

SELECT TOP 1 t_user.id as userid, t_role.id as roleid

FROM auth.t_user, auth.t_role

WHERE t_user.username = @username

AND t_role.[name] = @rolename

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[auth].[t_role]

[auth].[t_user]


-----

[auth]

**[auth].[p_user_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@username

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [auth].[p_user_delete]

@username nvarchar(250),


-----

SET NOCOUNT ON

DELETE t_user_role

FROM auth.t_user_role

INNER JOIN auth.t_user ON t_user_role.userid = t_user.id

WHERE t_user.username = @username

DELETE

FROM auth.t_user

WHERE t_user.username = @username

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[auth].[t_user]

[auth].[t_user_role]

[auth]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@input_username

nvarchar(250)

500

@id

uniqueidentifier

16

Out

@username

nvarchar(250)

500

Out

@firstname

nvarchar(250)

500


-----

@lastname

nvarchar(250)

500

Out

@email

nvarchar(250)

500

Out

@phonenumber

nvarchar(50)

100

Out

@language

nvarchar(50)

100

Out

@photourl

nvarchar(500)

1000

Out

@creationdate


-----

Out

@lastlogindate

datetime

8

Out

@terms_accepted

datetime

8

Out

@isverified

bit

1

Out

@lockout_enabled

bit

1

Out

@lockout_end_date

datetime


-----

@authentication_mode

int

4

Out

@otp_security_key

nvarchar(250)

500

Out

@external_provider

nvarchar(50)

100

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [auth].[p_user_get_by_username]

@input_username NVARCHAR (250),

@id UNIQUEIDENTIFIER OUTPUT,


-----

@lastname NVARCHAR (250) OUTPUT,

@email NVARCHAR (250) OUTPUT,

@phonenumber NVARCHAR (50) OUTPUT,

@language NVARCHAR (50) OUTPUT,

@photourl NVARCHAR (500) OUTPUT,

@creationdate DATETIME OUTPUT,

@lastlogindate DATETIME OUTPUT,

@terms_accepted DATETIME OUTPUT,

@isverified BIT OUTPUT,

@lockout_enabled BIT OUTPUT,

@lockout_end_date DATETIME OUTPUT,

@authentication_mode INT OUTPUT,

@otp_security_key NVARCHAR (250) OUTPUT,

@external_provider NVARCHAR (50) OUTPUT,

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

SELECT @id = id,

@username = username,

@firstname = firstname,

@lastname = lastname,


-----

@phonenumber = phonenumber,

@language = [language],

@photourl = photourl,

@creationdate = creationdate,

@lastlogindate = lastlogindate,

@terms_accepted = [terms_accepted],

@isverified = isverified,

@lockout_enabled = lockout_enabled,

@lockout_end_date = lockout_end_date,

@authentication_mode = authentication_mode,

@otp_security_key = otp_security_key,

@external_provider = external_provider

FROM [auth].t_user WITH (NOLOCK)

WHERE username = @input_username

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO


-----

[auth].[t_user]

[auth]

**[auth].[p_user_get_password]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@username

nvarchar(250)

500

@passwordHash

nvarchar(250)

500

Out

@rows

int


-----

SQL Script

CREATE PROCEDURE [auth].[p_user_get_password]

@username NVARCHAR (250),

@passwordHash NVARCHAR (250) OUTPUT,

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

SELECT @passwordHash = passwordhash

FROM [auth].t_user WITH (NOLOCK)

WHERE username = @username

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[auth].[t_user]

[auth]

**[auth].[p_user_get_roles]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@username

nvarchar(250)

500

SQL Script

CREATE PROCEDURE [auth].[p_user_get_roles]

@username NVARCHAR (250)

AS BEGIN

SET NOCOUNT ON;

SELECT t_role.[name] as rolename

FROM [auth].t_role WITH (NOLOCK)

INNER JOIN [auth].t_user_role ON t_role.id = t_user_role.roleid

INNER JOIN [auth].t_user ON t_user_role.userid = t_user.id

WHERE [auth].t_user.username = @username

RETURN

END


-----

Uses

[auth].[t_role]

[auth].[t_user]

[auth].[t_user_role]

[auth]

**[auth].[p_user_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@username

nvarchar(250)

500

@firstname

nvarchar(250)

500


-----

500

@email

nvarchar(250)

500

@phonenumber

nvarchar(50)

100

@language

nvarchar(50)

100

@photourl

nvarchar(500)

1000

@authentication_mode

int

4

@external_provider

nvarchar(50)


-----

@terms_accepted

datetime

8

@isverified

bit

1

@id

uniqueidentifier

16

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [auth].[p_user_insert]

@username nvarchar(250),

@firstname nvarchar(250),

@lastname nvarchar(250),


-----

@phonenumber nvarchar(50),

@language nvarchar(50),

@photourl nvarchar(500),

@authentication_mode int,

@external_provider nvarchar(50),

@terms_accepted datetime,

@isverified bit,

@id UNIQUEIDENTIFIER output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

SET @id = NEWID()

INSERT INTO [auth].t_user

(

id,

username,

firstname,

lastname,

email,

phonenumber,


-----

photourl,

authentication_mode,

external_provider,

terms_accepted,

isverified,

creationdate

)

VALUES

(

@id,

@username,

@firstname,

@lastname,

@email,

@phonenumber,

@language,

@photourl,

@authentication_mode,

@external_provider,

@terms_accepted,

@isverified,


-----

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[auth].[t_user]

[auth]

**[auth].[p_user_remove_role]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@username


-----

500

@rolename

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [auth].[p_user_remove_role]

@username nvarchar(250),

@rolename nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE t_user_role

FROM auth.t_user_role

INNER JOIN auth.t_user ON t_user_role.userid = t_user.id

INNER JOIN auth.t_role ON t_user_role.roleid = t_role.id


-----

AND t_role.[name] = @rolename

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[auth].[t_role]

[auth].[t_user]

[auth].[t_user_role]

[auth]

**[auth].[p_user_update]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@id

uniqueidentifier

16

@username

nvarchar(250)

500

@firstname

nvarchar(250)

500

@lastname

nvarchar(250)

500

@email

nvarchar(250)

500

@phonenumber

nvarchar(50)

100


-----

nvarchar(50)

100

@photourl

nvarchar(500)

1000

@lastlogindate

datetime

8

@terms_accepted

datetime

8

@isverified

bit

1

@lockout_enabled

bit

1

@lockout_end_date


-----

@authentication_mode

int

4

@otp_security_key

nvarchar(250)

500

@external_provider

nvarchar(50)

100

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [auth].[p_user_update]

@id UNIQUEIDENTIFIER,

@username nvarchar(250),

@fi h (2 0)


-----

@email nvarchar(250),

@phonenumber nvarchar(50),

@language nvarchar(50),

@photourl nvarchar(500),

@lastlogindate datetime null,

@terms_accepted datetime null,

@isverified bit,

@lockout_enabled bit,

@lockout_end_date datetime,

@authentication_mode int,

@otp_security_key nvarchar(250),

@external_provider nvarchar(50),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [auth].t_user

SET username = @username,

firstname = @firstname,

lastname = @lastname,

email = @email,


-----

photourl = @photourl,

lastlogindate = @lastlogindate,

terms_accepted = @terms_accepted,

isverified = @isverified,

lockout_enabled = @lockout_enabled,

lockout_end_date = @lockout_end_date,

authentication_mode = @authentication_mode,

otp_security_key = @otp_security_key,

external_provider = @external_provider

WHERE id = @id

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[auth].[t_user]

[auth]


-----

Parameters

Name

Data Type

Max Length (Bytes)

@username

nvarchar(250)

500

@passwordhash

nvarchar(250)

500

SQL Script

/****** Object: StoredProcedure [dbo].[p_user_update_password]
Script Date: 28/11/2019 4:52:06 μμ ******/

CREATE PROCEDURE [auth].[p_user_update_password]

@username NVARCHAR (250),

@passwordhash NVARCHAR (250)

AS BEGIN

DECLARE @rows INT

SET NOCOUNT ON


-----

SET passwordhash = @passwordhash

WHERE username = @username

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN (@rows - 1)

END

GO

Uses

[auth].[t_user]

[auth]

**[conversion].[p_conversion_book]**

SQL Script

CREATE PROCEDURE [conversion].[p_conversion_book]

AS

BEGIN

DECLARE @booked_by UNIQUEIDENTIFIER


-----

DECLARE @booking_date DATETIME

SET @booking_date = GETUTCDATE()

SET NOCOUNT ON

UPDATE TOP(1) conversion.t_conversion_booking

SET bookedby = @booked_by,

bookingdate = @booking_date,

lastupdate = @booking_date,

stateMachinestatusid =
conversion.fn_GetStateMachineStatusId('working')

WHERE

(

stateMachinestatusid =
conversion.fn_GetStateMachineStatusId('ready')

)

IF @@ROWCOUNT > 0

BEGIN

SELECT

[id],

[entityid],


-----

[bookedby],

[bookingdate],

[retry],

[domain],

[username],

[filename],

[destinationfolder],

[convertablefiletypeid],

[projectid],

[stateMachinestatusid],

[machineid]

FROM conversion.t_conversion_booking

WHERE bookedby=@booked_by

END

SET NOCOUNT OFF

END

GO

Uses

[conversion].[t_conversion_booking]


-----

**[conversion].[p_conversion_book_fallback]**

Parameters

Name

Data Type

Max Length (Bytes)

@max_retries

int

4

@booking_elapsed_time_in_sec

int

4

SQL Script

CREATE PROCEDURE [conversion].[p_conversion_book_fallback]

@max_retries int,

@booking_elapsed_time_in_sec int

AS

BEGIN


-----

SET NOCOUNT ON

UPDATE conversion.t_conversion_booking

SET bookedby=null,

bookingdate = null,

lastupdate = @lastupdate,

retry = retry + 1,

statemachinestatusid = CASE WHEN (retry >= @max_retries)

THEN conversion.fn_GetStateMachineStatusId('ERROR')

ELSE

conversion.fn_GetStateMachineStatusId('READY')

END

WHERE statemachinestatusid =
conversion.fn_GetStateMachineStatusId('WORKING')

AND DATEDIFF(SECOND, bookingdate, GETUTCDATE()) >=
@booking_elapsed_time_in_sec

END

GO

Uses

[conversion].[t_conversion_booking]


-----

[conversion]

**[conversion].[p_conversion_book_history]**

SQL Script

CREATE PROCEDURE [conversion].[p_conversion_book_history]

AS

BEGIN

INSERT [conversion].[t_conversion_booking_history]

(

[id],

[entityid],

[updatedby],

[creationdate],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[domain],

[username]


-----

[destinationfolder],

[convertablefiletypeid],

[projectid],

[stateMachinestatusid],

[machineid]

)

SELECT

[id],

[entityid],

[updatedby],

[creationdate],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[domain],

[username],

[filename],

[destinationfolder],

[convertablefiletypeid],

[projectid],


-----

[machineid]

FROM

(

DELETE [conversion].[t_conversion_booking]

OUTPUT

DELETED.[id],

DELETED.[entityid],

DELETED.[updatedby],

DELETED.[creationdate],

DELETED.[lastupdate],

DELETED.[bookedby],

DELETED.[bookingdate],

DELETED.[retry],

DELETED.[domain],

DELETED.[username],

DELETED.[filename],

DELETED.[destinationfolder],

DELETED.[convertablefiletypeid],

DELETED.[projectid],

DELETED.[stateMachinestatusid],

DELETED.[machineid]


-----

[conversion].fn_GetStateMachineStatusId('FINISHED')

) AS RowsToMove ;

END

GO

Uses

[conversion].[t_conversion_booking]

[conversion].[t_conversion_booking_history]

[conversion].[fn_GetStateMachineStatusId]

[conversion]

**[conversion].[p_conversion_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@entityid

uniqueidentifier

16


-----

400

@lastupdate

datetime

8

@domain

nvarchar(200)

400

@username

nvarchar(200)

400

@filename

nvarchar(250)

500

@destinationfolder

nvarchar(250)

500

@convertablefiletypeid

int

4

@projectid

int


-----

@machineid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [conversion].[p_conversion_insert]

@entityid UNIQUEIDENTIFIER,

@updatedby NVARCHAR(200),

@lastupdate DATETIME,

@domain NVARCHAR(200),

@username NVARCHAR(200),

@filename NVARCHAR(250),

@destinationfolder NVARCHAR(250),

@convertablefiletypeid INT,

@projectid INT,

@machineid UNIQUEIDENTIFIER

AS

BEGIN

DECLARE @statemachinestatus INT

SET @statemachinestatus =

[conversion].fn_GetStateMachineStatusId('ready')


-----

[entityid],

[updatedby],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[domain],

[username],

[filename],

[destinationfolder],

[convertablefiletypeid],

[projectid],

[stateMachinestatusid],

[machineid]

)

VALUES(

@entityid,

@updatedby,

@lastupdate,

NULL, -- bookedby


-----

0, -- retry

@domain,

@username,

@filename,

@destinationfolder,

@convertablefiletypeid,

@projectid,

@statemachinestatus,

@machineid

)

RETURN @@IDENTITY

END

GO

Uses

[conversion].[t_conversion_booking]

[conversion].[fn_GetStateMachineStatusId]

[conversion]

**[conversion].[p_conversion_unbook]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

@retries

int

4

@statemachinestatusid

int

4

SQL Script

CREATE PROCEDURE [conversion].[p_conversion_unbook]

@id INT,

@retries INT,

@statemachinestatusid INT

AS

SET NOCOUNT ON


-----

UPDATE conversion.t_conversion_booking

SET

bookedby = NULL,

bookingdate = NULL,

retry = @retries,

lastupdate = @lastupdate,

stateMachinestatusid = @statemachinestatusid

WHERE

id = @id

SET NOCOUNT OFF

RETURN 0

GO

Uses

[conversion].[t_conversion_booking]

[conversion]

**[conversion].[p_image_resizing_book]**


-----

AS

BEGIN

DECLARE @booked_by UNIQUEIDENTIFIER

SET @booked_by = NEWID()

DECLARE @booking_date DATETIME

SET @booking_date = GETUTCDATE()

SET NOCOUNT ON

UPDATE TOP(1) conversion.t_image_resizing_booking

SET bookedby=@booked_by,

lastupdate = @booking_date,

bookingdate = @booking_date,

stateMachinestatusid =
conversion.fn_GetStateMachineStatusId('working')

WHERE stateMachinestatusid =
conversion.fn_GetStateMachineStatusId('ready')

IF @@ROWCOUNT > 0

BEGIN

SELECT

imageresizingbookingid,

tileid,


-----

lastupdate,

fileName,

bookedby,

bookingdate,

retry,

projectid,

stateMachinestatusid,

machineid

FROM conversion.t_image_resizing_booking

WHERE bookedby=@booked_by

END

SET NOCOUNT OFF

END

GO

Uses

[conversion].[t_image_resizing_booking]

[conversion].[fn_GetStateMachineStatusId]

[conversion]

**[conversion].[p image resizing book fallback]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@max_retries

int

4

@booking_elapsed_time_in_sec

int

4

SQL Script

CREATE PROCEDURE [conversion].

[p_image_resizing_book_fallback]

@max_retries int,

@booking_elapsed_time_in_sec int

AS

BEGIN

DECLARE @lastupdate DATETIME

SET @lastupdate = GETUTCDATE()

SET NOCOUNT ON


-----

SET bookedby=null,

bookingdate = null,

lastupdate = @lastupdate,

retry = retry + 1,

statemachinestatusid = CASE WHEN (retry >= @max_retries)

THEN conversion.fn_GetStateMachineStatusId('ERROR')

ELSE

conversion.fn_GetStateMachineStatusId('READY')

END

WHERE statemachinestatusid =
conversion.fn_GetStateMachineStatusId('WORKING')

AND DATEDIFF(SECOND, bookingdate, GETUTCDATE()) >=
@booking_elapsed_time_in_sec

END

GO

Uses

[conversion].[t_image_resizing_booking]

[conversion].[fn_GetStateMachineStatusId]

[conversion]

**[conversion] [p image resizing book history]**


-----

SQL Script

CREATE PROCEDURE [conversion].[p_image_resizing_book_history]

AS

BEGIN

INSERT [conversion].[t_image_resizing_booking_history]

(

[imageresizingbookingid],

[tileid],

[updatedby],

[creationdate],

[lastupdate],

[fileName],

[bookedby],

[bookingdate],

[retry],

[projectid],

[stateMachinestatusid],

[machineid]

)

SELECT


-----

[tileid],

[updatedby],

[creationdate],

[lastupdate],

[fileName],

[bookedby],

[bookingdate],

[retry],

[projectid],

[stateMachinestatusid],

[machineid]

FROM

(

DELETE [conversion].[t_image_resizing_booking]

OUTPUT

DELETED.[imageresizingbookingid],

DELETED.[tileid],

DELETED.[updatedby],

DELETED.[creationdate],

DELETED.[lastupdate],

DELETED.[fileName],


-----

DELETED.[bookingdate],

DELETED.[retry],

DELETED.[projectid],

DELETED.[stateMachinestatusid],

DELETED.[machineid]

WHERE [stateMachinestatusid] >=

[conversion].fn_GetStateMachineStatusId('FINISHED')

) AS RowsToMove ;

END

GO

Uses

[conversion].[t_image_resizing_booking]

[conversion].[t_image_resizing_booking_history]

[conversion].[fn_GetStateMachineStatusId]

[conversion]

**[conversion].[p_image_resizing_booking_insert]**

Parameters


-----

Max Length (Bytes)

@tileId

uniqueidentifier

16

@updatedBy

nvarchar(200)

400

@projectId

int

4

@fileName

nvarchar(250)

500

@machineId

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [conversion].

[p_image_resizing_booking_insert]

@tileId UNIQUEIDENTIFIER,

@updatedBy NVARCHAR(200),


-----

@fileName NVARCHAR(250),

@machineId UNIQUEIDENTIFIER

AS

BEGIN

SET NOCOUNT ON

DECLARE @lastUpdate DATETIME

SET @lastUpdate = GETUTCDATE()

INSERT INTO [conversion].[t_image_resizing_booking]

(

[tileid],

[updatedby],

[lastupdate],

[projectid],

[fileName],

[stateMachinestatusid],

[machineid]

)

VALUES

( @tileId,


-----

@projectId,

@fileName,

conversion.fn_GetStateMachineStatusId('ready'),

@machineId

)

SET NOCOUNT OFF

END

GO

Uses

[conversion].[t_image_resizing_booking]

[conversion].[fn_GetStateMachineStatusId]

[conversion]

**[conversion].[p_image_resizing_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

int

4

@retries

int

4

@statemachinestatusid

int

4

SQL Script

CREATE PROCEDURE [conversion].[p_image_resizing_unbook]

@id INT,

@retries INT,

@statemachinestatusid INT

AS

SET NOCOUNT ON

DECLARE @lastupdate DATETIME

SET @lastupdate = GETUTCDATE()

UPDATE conversion.t_image_resizing_booking

SET


-----

retry = @retries,

lastupdate = @lastupdate,

stateMachinestatusid = @statemachinestatusid

WHERE

imageresizingbookingid = @id

SET NOCOUNT OFF

RETURN 0

GO

Uses

[conversion].[t_image_resizing_booking]

[conversion]

**[dbo].[p_cache_load]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

uniqueidentifier

16

Out

SQL Script

CREATE PROCEDURE [dbo].[p_cache_load]

@publishid uniqueidentifier output

AS

SET NOCOUNT ON;

SELECT [cacheid], [pollingtimeinseconds]

FROM t_caches with (nolock)

SELECT @publishid = publishid

FROM t_caches with (nolock)

WHERE cacheid = dbo.fn_GetCacheId('cache')

RETURN

GO

Uses

[dbo].[t_caches]

[dbo].[fn_GetCacheId]


-----

**[dbo].[p_cache_publishid_get]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@cacheid

int

4

@publishid

uniqueidentifier

16

Out

SQL Script

CREATE PROCEDURE [dbo].[p_cache_publishid_get]

@cacheid int,

@publishid uniqueidentifier output

AS


-----

WHERE cacheid = @cacheid

RETURN 0

GO

Uses

[dbo].[t_caches]

**[dbo].[p_canvasshotter_book]**

SQL Script

CREATE PROCEDURE [dbo].[p_canvasshotter_book]

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate smalldatetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(5) t_canvasshotter_booking


-----

lastupdate = @bookingdate,

statemachinestatusid =
dbo.fn_GetStateMachineStatusId('WORKING')

WHERE statemachinestatusid =
dbo.fn_GetStateMachineStatusId('READY')

IF @@ROWCOUNT > 0

BEGIN

SELECT canvasshotterid, userid, projectid, lastupdate, bookedby,
bookingdate, retry, statemachinestatusid

FROM t_canvasshotter_booking with(nolock)

WHERE bookedby = @bookeby

END

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_canvasshotter_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_canvasshotter_booking_history_search]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int

4

@pagesize

int

4

@pagenumber

int

4

@wantsCount

bit

1

@totalrows

int


-----

Out

SQL Script

CREATE PROCEDURE [dbo].

[p_canvasshotter_booking_history_search]

@projectid int,

@pagesize int,

@pagenumber int,

@wantsCount bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT h.[canvasshotterid],

h.[creationdate],

h.[userid],

h.[projectid],

h.[lastupdate],

h.[bookedby],

h.[bookingdate],

h.[retry],

h.[statemachinestatusid]


-----

WHERE ((@projectid IS NULL) OR (h.projectid = @projectid))

ORDER BY [canvasshotterid]

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

IF (@wantsCount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM [dbo].[t_canvasshotter_booking_history] as h WITH
(NOLOCK)

WHERE ((@projectid IS NULL) OR (h.projectid = @projectid))

END ELSE BEGIN

SET @totalrows = 0

END

END

GO

Uses

[dbo].[t_canvasshotter_booking_history]

**[dbo].[p_canvasshotter_booking_insert_conditional]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@username

nvarchar(250)

500

@projectid

int

4

@delta

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].


-----

@projectid int,

@delta int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

declare @userid int

set @userid = 0

SELECT @userid = userid

FROM t_user WITH (NOLOCK)

WHERE username = @username

SET NOCOUNT ON

IF(@userid>0 AND NOT EXISTS (

SELECT 1

FROM t_canvasshotter_booking

WHERE projectid = @projectid

AND statemachinestatusid <=
dbo.fn_GetStateMachineStatusId('FINISHED')

AND DATEDIFF(millisecond, lastupdate, GETUTCDATE()) >=


-----

INSERT INTO t_canvasshotter_booking

(

userid,

projectid,

lastupdate

)

VALUES

(

@userid,

@projectid,

@lastupdate

)

SET @rows = @@ROWCOUNT

END

SET NOCOUNT OFF

RETURN 0

GO

Uses

[db ] [ h b ki ]


-----

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_canvasshotter_fallback]**

Parameters

Name

Data Type

Max Length (Bytes)

@max_retries

int

4

@booking_elapsed_time_in_sec

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_canvasshotter_fallback]

@max_retries int,

@booking_elapsed_time_in_sec int

AS

BEGIN


-----

SET @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE dbo.t_canvasshotter_booking

SET bookedby=null,

bookingdate = null,

lastupdate = @lastupdate,

retry = retry + 1,

statemachinestatusid = CASE WHEN (retry >= @max_retries)

THEN dbo.fn_GetStateMachineStatusId('ERROR')

ELSE

dbo.fn_GetStateMachineStatusId('READY')

END

WHERE statemachinestatusid =
dbo.fn_GetStateMachineStatusId('WORKING')

AND DATEDIFF(SECOND, bookingdate, GETUTCDATE()) >=
@booking_elapsed_time_in_sec

END

GO

Uses


-----

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_canvasshotter_history]**

SQL Script

CREATE PROCEDURE [dbo].[p_canvasshotter_history]

AS

BEGIN

INSERT [dbo].[t_canvasshotter_booking_history]

(

[canvasshotterid],

[creationdate],

[userid],

[projectid],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[statemachinestatusid]


-----

[canvasshotterid],

[creationdate],

[userid],

[projectid],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[statemachinestatusid]

FROM

(

DELETE [dbo].[t_canvasshotter_booking]

OUTPUT

DELETED.[canvasshotterid],

DELETED.[creationdate],

DELETED.[userid],

DELETED.[projectid],

DELETED.[lastupdate],

DELETED.[bookedby],

DELETED.[bookingdate],

DELETED.[retry],


-----

WHERE [statemachinestatusid] >=

[dbo].fn_GetStateMachineStatusId('FINISHED')

) AS RowsToMove ;

END

GO

Uses

[dbo].[t_canvasshotter_booking]

[dbo].[t_canvasshotter_booking_history]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_canvasshotter_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@canvasshotterid

int


-----

@retry

int

4

@statemachinestatusid

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_canvasshotter_unbook]

@canvasshotterid int,

@retry int,

@statemachinestatusid int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

S OCO O


-----

SET lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

retry = @retry,

statemachinestatusid = @statemachinestatusid

WHERE canvasshotterid = @canvasshotterid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_canvasshotter_booking]

**[dbo].[p_configuration_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_configuration_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS

SET NOCOUNT ON;

SELECT [key], [value], [description], [AppDomain]

FROM t_configuration with (nolock)


-----

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM t_configuration with (nolock)

RETURN 0

RETURN

GO

Uses

[dbo].[t_configuration]

**[dbo].[p_configuration_load]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@appdomain


-----

@publishid

uniqueidentifier

16

Out

SQL Script

CREATE PROCEDURE [dbo].[p_configuration_load]

@appdomain nvarchar(50),

@publishid uniqueidentifier output

AS

SET NOCOUNT ON;

SELECT [key], [value]

FROM t_configuration with (nolock)

WHERE [AppDomain] = @appdomain or [AppDomain] = '*'

SELECT @publishid = publishid

FROM t_caches with (nolock)

WHERE cacheid = dbo.fn_GetCacheId('configuration')

RETURN

GO


-----

[dbo].[t_configuration]

[dbo].[fn_GetCacheId]

**[dbo].[p_configuration_set]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@key

nvarchar(100)

200

@value

nvarchar(max)

max

@appdomain

nvarchar(50)

100


-----

nvarchar(250)

500

@publishid

uniqueidentifier

16

Out

SQL Script

CREATE PROCEDURE [dbo].[p_configuration_set]

@key nvarchar(100),

@value nvarchar(max),

@appdomain nvarchar(50),

@description nvarchar(250),

@publishid uniqueidentifier output

AS

SET NOCOUNT ON;

IF NOT EXISTS (SELECT NULL FROM t_configuration where [key]
= @key) BEGIN

INSERT INTO t_configuration ([key], [value], [AppDomain],

[description])

VALUES (@key, @value, @appdomain, @description)


-----

SET [value] = @value,

[AppDomain] = @appdomain,

[description] = @description

WHERE [key] = @key

END

SET @publishid = newid();

UPDATE t_caches

SET publishid = @publishid

WHERE cacheid = dbo.fn_GetCacheId('configuration')

SET NOCOUNT OFF

RETURN

GO

Uses

[dbo].[t_caches]

[dbo].[t_configuration]

[dbo].[fn_GetCacheId]

**[dbo].[p_get_all_template_types]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@languageId

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_get_all_template_types]

@languageId int = -1

AS

BEGIN

SET NOCOUNT ON;

SELECT projecttypeid,

description

FROM dbo.t_project_type

WHERE projecttypeid = 1

OR projecttypeid & 256 <> 0

END

GO


-----

Uses

[dbo].[t_project_type]

**[dbo].[p_insert_event]**

Parameters

Name

Data Type

Max Length (Bytes)

@message

nvarchar(max)

max

@params

nvarchar(max)

max

SQL Script

create PROCEDURE [dbo].[p_insert_event]

@message nvarchar(MAX),

@params nvarchar(MAX)

AS


-----

insert into t_events(Message,Params) values(@message, @params)

END

GO

Uses

[dbo].[t_events]

**[dbo].[p_insert_trace]**

Parameters

Name

Data Type

Max Length (Bytes)

@message

nvarchar(max)

max

@severityelevel

int


-----

CREATE PROCEDURE [dbo].[p_insert_trace]

@message nvarchar(MAX),

@severityelevel int

AS

BEGIN

SET NOCOUNT ON;

insert into t_traces(Message,SeverityLevel) values(@message,
@severityelevel)

END

GO

Uses

[dbo].[t_traces]

**[dbo].[p_language_get_all]**

SQL Script

CREATE PROCEDURE [dbo].[p_language_get_all]

AS BEGIN

SET NOCOUNT ON;


-----

lcid,

name_english,

name_native

FROM dbo.t_language WITH (nolock)

END

GO

Uses

[dbo].[t_language]

**[dbo].[p_language_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@languageCode

nvarchar(25)

50


-----

int

4

@name_english

nvarchar(250)

500

@name_native

nvarchar(250)

500

@languageId

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_language_insert]

@languageCode NVARCHAR(25),

@lcid INT,

@name_english NVARCHAR(250),

@name_native NVARCHAR(250),

@languageId INT OUTPUT


-----

INSERT INTO dbo.t_language

(

languageCode,

lcid,

name_english,

name_native

)

VALUES

( @languageCode, -- languageCode - nvarchar(25)

@lcid, -- lcid - int

@name_english, -- name_english - nvarchar(250)

@name_native -- name_native - nvarchar(250)

)

SELECT @languageId = @@IDENTITY

END

GO

Uses

[dbo].[t_language]

**[dbo].[p language is id valid]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@languageid

int

4

@result

bit

1

Out

SQL Script

CREATE PROCEDURE [dbo].[p_language_is_id_valid]

@languageid INT,

@result BIT OUTPUT

AS BEGIN

SELECT @result =

CASE


-----

languageId=@languageid)

THEN 1

ELSE 0

END

END

GO

Uses

[dbo].[t_language]

**[dbo].[p_newsletter_subscriber_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@email

nvarchar(250)

500


-----

100

@lastname

nvarchar(50)

100

@language

nvarchar(50)

100

@is_active

bit

1

@id

int

4

Out

@rows

int

4

Out

SQ S i


-----

@email NVARCHAR(250),

@firstname NVARCHAR(50),

@lastname NVARCHAR(50),

@language NVARCHAR (50),

@is_active BIT,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO t_newsletter_subscriber

(

email,

firstname,

lastname,

[language],

is_active,

creationdate

)

VALUES


-----

@lastname,

@language,

@is_active,

GETUTCDATE()

)

set @id = @@IDENTITY

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_newsletter_subscriber]

**[dbo].[p_online_user_book]**

Parameters

Name


-----

Max Length (Bytes)

@maxelapsedtimeinminutes

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_book]

@maxelapsedtimeinminutes INT

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate smalldatetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(5) t_online_user

SET bookedby = @bookeby,

bookingdate = @bookingdate,

lastupdate = @bookingdate,

statemachinestatusid =
dbo.fn_GetStateMachineStatusId('WORKING')


-----

AND @bookingdate > DATEADD(MINUTE,
@maxelapsedtimeinminutes, lastupdate)

IF @@ROWCOUNT > 0

BEGIN

SELECT connectionid, machineid, userid, projectid, logindate,
ispresenting, isdisconnected, lastupdate, bookedby, bookingdate,
retry, statemachinestatusid

FROM t_online_user with(nolock)

WHERE bookedby = @bookeby

END

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_online_user]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_online_user_check_connected]**

Parameters


-----

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@projectid

int

4

@isalsoconnected

bit

1

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_check_connected]

@userid INT,

@projectid INT,

@isalsoconnected BIT OUTPUT

AS


-----

SET NOCOUNT ON

SELECT TOP(1)userid FROM dbo.t_online_user WITH (NOLOCK)

WHERE projectid=@projectid

AND userid = @userid

AND isdisconnected=0

ORDER BY userid

IF(@@ROWCOUNT = 0)

SET @isalsoconnected = 0

ELSE

SET @isalsoconnected = 1

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_online_user]

**[dbo].[p_online_user_delete]**

Parameters


-----

Data Type

Max Length (Bytes)

Direction

@connectionid

nvarchar(50)

100

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_delete]

@connectionid nvarchar(50),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

UPDATE t_tilestatus


-----

lockedby = null,

lockeddate = null,

lastupdate = @lastupdate

OUTPUT INSERTED.tileid

WHERE lockedby = @connectionid

SET NOCOUNT ON

--IF EXISTS (SELECT 1 FROM t_online_user WHERE connectionid =
@connectionid)

-- BEGIN

DELETE

FROM t_online_user

WHERE connectionid = @connectionid

--END

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[db ] [ li ]


-----

**[dbo].[p_online_user_get_by_connectionid]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@connectionid

nvarchar(50)

100

@username

nvarchar(250)

500

Out

@userid

int

4

Out

@firstname


-----

100

Out

@lastname

nvarchar(50)

100

Out

@photourl

nvarchar(250)

500

Out

@is_guest

bit

1

Out

@projectid

int

4

Out

@ispresenting

bit


-----

@isdisconnected

bit

1

Out

@machineid

uniqueidentifier

16

Out

@lastupdate

datetime

8

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_get_by_connectionid]

@connectionid NVARCHAR (50),

@username NVARCHAR (250) OUTPUT,


-----

@lastname NVARCHAR (50) OUTPUT,

@photourl NVARCHAR (250) OUTPUT,

@is_guest BIT OUTPUT,

@projectid INT = 0 OUTPUT,

@ispresenting BIT OUTPUT,

@isdisconnected BIT OUTPUT,

@machineid UNIQUEIDENTIFIER OUTPUT,

@lastupdate DATETIME OUTPUT,

@rows INT = 0 OUTPUT

AS

SET NOCOUNT ON

SELECT @username = u.username,

@userid = u.userid,

@firstname = u.firstname,

@lastname = u.lastname,

@photourl = u.photourl,

@is_guest = u.is_guest,

@projectid = o.projectid,

@ispresenting = o.ispresenting,

@isdisconnected = o.isdisconnected,


-----

FROM t_user as u WITH (NOLOCK)

LEFT JOIN t_online_user as o on o.userid = u.userid

WHERE connectionid = @connectionid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_online_user]

[dbo].[t_user]

**[dbo].[p_online_user_get_by_username]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userName


-----

500

@connectionId

nvarchar(50)

100

Out

@machineId

uniqueidentifier

16

Out

@userId

int

4

Out

@projectId

int

4

Out

@loginDate

datetime


-----

bit

1

Out

@isdisconnected

bit

1

Out

@lastUpdate

datetime

8

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_get_by_username]

@userName NVARCHAR(250),

@connectionId NVARCHAR(50) OUTPUT,

@machineId UNIQUEIDENTIFIER OUTPUT,


-----

@projectId INT OUTPUT,

@loginDate DATETIME OUTPUT,

@ispresenting BIT OUTPUT,

@isdisconnected BIT OUTPUT,

@lastUpdate DATETIME OUTPUT,

@rows INT OUTPUT

AS BEGIN

SET NOCOUNT ON

SELECT TOP(1)

@connectionId = o.connectionid,

@machineId = o.machineid,

@userId = o.userid,

@projectId = o.projectid,

@loginDate = o.logindate,

@ispresenting = o.ispresenting,

@isdisconnected = o.isdisconnected,

@lastUpdate = o.lastupdate

FROM t_user AS u WITH (NOLOCK)

RIGHT JOIN t_online_user AS o ON o.userid = u.userid

WHERE u.username = @userName


-----

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_online_user]

[dbo].[t_user]

**[dbo].[p_online_user_get_first_by_project_id]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int


-----

nvarchar(50)

100

Out

@machineid

uniqueidentifier

16

Out

@userid

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_get_first_by_project_id]

@projectid INT,

@connectionid NVARCHAR (50) OUTPUT,

@machineid UNIQUEIDENTIFIER OUTPUT,


-----

AS

SET NOCOUNT ON

SELECT TOP(1)

@connectionid = connectionid,

@machineid = machineid,

@userid = userid

FROM t_online_user WITH (NOLOCK)

WHERE projectid = @projectid

ORDER BY lastupdate desc

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_online_user]

**[dbo].[p_online_user_get_projectid]**

Parameters


-----

Data Type

Max Length (Bytes)

@projectid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_get_projectid]

@projectid int

AS BEGIN

SET NOCOUNT ON

SELECT o.connectionid,

u.userid,

u.username,

u.firstname,

u.lastname,

u.photourl,

u.is_guest,

u.creationdate,

u.lastactivitydate,

o.lastupdate,


-----

o.isdisconnected,

o.machineid

FROM t_user as u WITH (NOLOCK)

RIGHT JOIN t_online_user as o on o.userid = u.userid

WHERE o.projectid = @projectid

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_online_user]

[dbo].[t_user]

**[dbo].[p_online_user_insert]**

Parameters

Name

Data Type


-----

@connectionid

nvarchar(50)

100

@machineid

uniqueidentifier

16

@username

nvarchar(250)

500

@projectid

int

4

@ispresenting

bit

1

@isdisconnected

bit


-----

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_insert]

@connectionid NVARCHAR (50),

@machineid uniqueidentifier,

@username nvarchar(250),

@projectid int,

@ispresenting BIT,

@isdisconnected BIT,

@rows int = 0 output

AS

declare @creationdate datetime

set @creationdate = GETUTCDATE()

declare @userid int

set @userid = 0

SELECT @userid = userid


-----

WHERE username = @username

SET NOCOUNT ON

IF(@userid>0)

BEGIN

BEGIN TRY

INSERT INTO t_online_user

(

connectionid,

machineid,

userid,

projectid,

ispresenting,

isdisconnected,

logindate,

lastupdate

)

VALUES

(

@connectionid,

@machineid,


-----

@projectid,

@ispresenting,

@isdisconnected,

@creationdate,

@creationdate

)

SET @rows = @@ROWCOUNT

END TRY

BEGIN CATCH

UPDATE t_online_user

SET machineid = @machineid,

userid = @userid,

projectid = @projectid,

logindate = @creationdate,

lastupdate = @creationdate

WHERE connectionid = @connectionid

SET @rows = @@ROWCOUNT

END CATCH

END

SET NOCOUNT OFF


-----

GO

Uses

[dbo].[t_online_user]

[dbo].[t_user]

**[dbo].[p_online_user_search_backend]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectId

int

4

@username

nvarchar(250)

500


-----

@pagesize

int

4

@pagenumber

int

4

@wantsCount

bit

1

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_search_backend]

@projectId int,

@username nvarchar(250),

@i G bi


-----

@pagenumber int,

@wantsCount bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT ou.connectionid,

ou.machineid,

ou.creationdate,

ou.userid,

ou.projectid,

ou.logindate,

ou.lastupdate,

ou.bookedby,

ou.bookingdate,

ou.retry,

ou.statemachinestatusid,

ou.ispresenting,

ou.isdisconnected,

p.[description] as projectDescription,

u.username as username,


-----

LEFT JOIN t_project as p ON ou.projectid = p.projectid

LEFT JOIN t_user as u ON ou.userid = u.userid

WHERE ((@projectid IS NULL) OR (ou.projectid = @projectid))

AND ((@username IS NULL) OR (u.username = @username))

AND ((@isGuest IS NULL) OR (u.is_guest = @isGuest))

ORDER BY [connectionid]

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

IF (@wantsCount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM t_online_user as ou WITH (NOLOCK)

LEFT JOIN t_user as u ON ou.userid = u.userid

WHERE ((@projectid IS NULL) OR (ou.projectid = @projectid))

AND ((@username IS NULL) OR (u.username = @username))

AND ((@isGuest IS NULL) OR (u.is_guest = @isGuest))

END ELSE BEGIN

SET @totalrows = 0

END

RETURN


-----

GO

Uses

[dbo].[t_online_user]

[dbo].[t_project]

[dbo].[t_user]

**[dbo].[p_online_user_set_disconnected]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@connectionid

nvarchar(50)

100

@hassucceeded

bit


-----

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_set_disconnected]

@connectionid NVARCHAR(50),

@hassucceeded BIT OUTPUT

AS

BEGIN

SET NOCOUNT ON

UPDATE dbo.t_online_user

SET isdisconnected = 1

WHERE

(connectionid = @connectionid

AND isdisconnected = 0

)

IF(@@ROWCOUNT = 1)

SET @hassucceeded = 1

ELSE

SET @hassucceeded = 0

SET NOCOUNT OFF

END


-----

Uses

[dbo].[t_online_user]

**[dbo].[p_online_user_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@connectionid

nvarchar(50)

100

@retry

int

4

@statemachinestatusid

int


-----

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_online_user_unbook]

@connectionid NVARCHAR (50),

@retry int,

@statemachinestatusid int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t_online_user

SET lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

retry = @retry,

statemachinestatusid = @statemachinestatusid


-----

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_online_user]

**[dbo].[p_online_user_unbook_forgot]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@rows

int

4

Out


-----

CREATE PROCEDURE [dbo].[p_online_user_unbook_forgot]

@rows int = 0 output

AS

declare @lastupdate smalldatetime

set @lastupdate = GETUTCDATE()

declare @bookingdate smalldatetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t_online_user

SET lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

retry = retry+1,

statemachinestatusid = dbo.fn_GetStateMachineStatusId('READY')

WHERE bookedby is not null

AND @bookingdate > DATEADD(MINUTE, 20, bookingdate)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF


-----

GO

Uses

[dbo].[t_online_user]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_online_user_update_keepalive]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@connectionid

nvarchar(50)

100

@projectid

int


-----

Out

SQL Script

create PROCEDURE [dbo].[p_online_user_update_keepalive]

@connectionid NVARCHAR (50),

@projectid int,

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_online_user

SET projectid = @projectid,

lastupdate = GETUTCDATE(),

bookedby = null,

bookingdate = null,

retry = 0,

statemachinestatusid = dbo.fn_GetStateMachineStatusId('READY')

WHERE connectionid = @connectionid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF


-----

GO

Uses

[dbo].[t_online_user]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_copy_book]**

SQL Script

CREATE PROCEDURE [dbo].[p_project_copy_book]

AS BEGIN

DECLARE @booked_by UNIQUEIDENTIFIER

SET @booked_by = NEWID()

DECLARE @booking_date DATETIME

SET @booking_date = GETUTCDATE()

SET NOCOUNT ON

UPDATE TOP(1) dbo.t_project_copy_booking

SET bookedby=@booked_by,

bookingdate = @booking_date,


-----

statemachinestatusid =

[dbo].fn_GetStateMachineStatusId('working')

WHERE statemachinestatusid =

[dbo].fn_GetStateMachineStatusId('ready')

IF @@ROWCOUNT > 0

BEGIN

SELECT Id,

projectid,

description,

isfromtemplate,

clientconnectionid,

username,

appver,

uniquedeviceid,

bookedby,

bookingdate,

retry,

statemachinestatusid,

xoffset,

yoffset,

templateid


-----

WHERE bookedby=@booked_by

END

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project_copy_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_copy_fallback]**

Parameters

Name

Data Type

Max Length (Bytes)

@max_retries

int

4

@booking elapsed time in sec


-----

SQL Script

CREATE PROCEDURE [dbo].[p_project_copy_fallback]

@max_retries int,

@booking_elapsed_time_in_sec int

AS

BEGIN

DECLARE @lastupdate DATETIME

SET @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE dbo.t_project_copy_booking

SET bookedby=null,

bookingdate = null,

lastupdate = @lastupdate,

retry = retry + 1,

statemachinestatusid = CASE WHEN (retry >= @max_retries)

THEN dbo.fn_GetStateMachineStatusId('ERROR')

ELSE

dbo.fn_GetStateMachineStatusId('READY')


-----

WHERE statemachinestatusid =
dbo.fn_GetStateMachineStatusId('WORKING')

AND DATEDIFF(SECOND, bookingdate, GETUTCDATE()) >=
@booking_elapsed_time_in_sec

END

GO

Uses

[dbo].[t_project_copy_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_copy_history]**

SQL Script

CREATE PROCEDURE [dbo].[p_project_copy_history]

AS

BEGIN

INSERT [dbo].[t_project_copy_booking_history]

(

[Id],


-----

[description],

[isfromtemplate],

[clientconnectionid],

[username],

[appver],

[uniquedeviceid],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[statemachinestatusid],

[xoffset],

[yoffset],

[templateid]

)

SELECT

[Id],

[creationdate],

[projectid],

[description],

[isfromtemplate],


-----

[username],

[appver],

[uniquedeviceid],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[statemachinestatusid],

[xoffset],

[yoffset],

[templateid]

FROM

(

DELETE [dbo].[t_project_copy_booking]

OUTPUT

DELETED.[Id],

DELETED.[creationdate],

DELETED.[projectid],

DELETED.[description],

DELETED.[isfromtemplate],

DELETED.[clientconnectionid],


-----

DELETED.[appver],

DELETED.[uniquedeviceid],

DELETED.[lastupdate],

DELETED.[bookedby],

DELETED.[bookingdate],

DELETED.[retry],

DELETED.[statemachinestatusid],

DELETED.[xoffset],

DELETED.[yoffset],

DELETED.[templateid]

WHERE [statemachinestatusid] >=

[dbo].fn_GetStateMachineStatusId('FINISHED')

) AS RowsToMove ;

END

GO

Uses

[dbo].[t_project_copy_booking]

[dbo].[t_project_copy_booking_history]

[dbo].[fn_GetStateMachineStatusId]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int

4

@pagesize

int

4

@pagenumber

int

4

@wantsCount

bit

1

@totalrows

int


-----

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_copy_history_search]

@projectid int,

@pagesize int,

@pagenumber int,

@wantsCount bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT [Id],

[creationdate],

[projectid],

[description],

[isfromtemplate],

[clientconnectionid],

[username],

[appver],

[uniquedeviceid],

[lastupdate],


-----

[bookingdate],

[retry],

[statemachinestatusid],

[xoffset],

[yoffset],

[templateid]

FROM [dbo].[t_project_copy_booking_history] WITH (NOLOCK)

WHERE ((@projectid IS NULL) OR (projectid = @projectid))

ORDER BY [id]

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

IF (@wantsCount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM [dbo].[t_project_copy_booking_history] WITH (NOLOCK)

WHERE ((@projectid IS NULL) OR (projectid = @projectid))

END ELSE BEGIN

SET @totalrows = 0

END

END


-----

Uses

[dbo].[t_project_copy_booking_history]

**[dbo].[p_project_copy_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

@description

nvarchar(250)

500

@isfromtemplate

bit

1

@clientconnectionid

nvarchar(50)


-----

float

8

@yoffset

float

8

@templateid

int

4

@username

nvarchar(200)

400

@appver

nvarchar(50)

100

@uniquedeviceid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [dbo].[p_project_copy_insert]

@projectid INT,


-----

@clientconnectionid NVARCHAR(50) ,

@xoffset FLOAT,

@yoffset FLOAT,

@templateid INT,

@username NVARCHAR(200) ,

@appver NVARCHAR(50) ,

@uniquedeviceid UNIQUEIDENTIFIER

AS

BEGIN

DECLARE @statemachinestatusid INT

SET @statemachinestatusid = [dbo].[fn_GetStateMachineStatusId]
('ready')

INSERT INTO [dbo].[t_project_copy_booking]

(

[projectid],

[description],

[isfromtemplate],

[clientconnectionid],

[username],

[appver],


-----

[bookedby],

[bookingdate],

[retry],

[statemachinestatusid],

[xoffset],

[yoffset],

[templateid]

)

VALUES

(

@projectid,

@description,

@isfromtemplate,

@clientconnectionid,

@username,

@appver,

@uniquedeviceid,

GETUTCDATE(),

NULL, -- bookedby - uniqueidentifier

NULL, -- bookingdate - datetime

0, -- retry - int


-----

@xoffset,

@yoffset,

@templateid

)

RETURN 0

END

GO

Uses

[dbo].[t_project_copy_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_copy_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int


-----

@retries

int

4

@statemachinestatusid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_project_copy_unbook]

@id INT,

@retries INT,

@statemachinestatusid INT

AS

SET NOCOUNT ON

UPDATE dbo.t_project_copy_booking

SET

bookedby=NULL,

bookingdate=NULL,

retry=@retries,

statemachinestatusid=@statemachinestatusid,

lastupdate = GETUTCDATE()


-----

Id=@id

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_project_copy_booking]

**[dbo].[p_project_delete_template]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectId

int

4

@rows


-----

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_delete_template]

@projectId INT,

@rows INT OUTPUT

AS BEGIN

SET NOCOUNT ON

DELETE FROM dbo.t_template_translation

WHERE [projectid] = @projectId

UPDATE dbo.t_project

SET projecttypeid = 0

WHERE projectid = @projectId

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[dbo] [t project]


-----

**[dbo].[p_project_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int

4

@description

nvarchar(250)

500

Out

@containeruri

nvarchar(500)

1000

Out

@projecttypeid


-----

Out

@zoomfactor

float

8

Out

@offsetx

float

8

Out

@offsety

float

8

Out

@background

nvarchar(7)

14

Out

@createdby

int


-----

@createdbyuser

nvarchar(250)

500

Out

@createdbyuniquemachineid

uniqueidentifier

16

Out

@creationdate

datetime

8

Out

@updatedby

int

4

Out

@updatedbyuser

nvarchar(250)

500

Out

@lastupdate


-----

Out

@presenter

nvarchar(250)

500

Out

@thumbnail

varbinary(max)

max

Out

@canvassizeratio

int

4

Out

@upgradeversion

int

4

Out

@islocked

bit


-----

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_get_by_id]

@projectid INT,

@description NVARCHAR (250) OUTPUT,

@containeruri NVARCHAR (500) OUTPUT,

@projecttypeid INT OUTPUT,

@zoomfactor FLOAT OUTPUT,

@offsetx FLOAT OUTPUT,

@offsety FLOAT OUTPUT,

@background NVARCHAR (7) OUTPUT,

@createdby INT OUTPUT,

@createdbyuser NVARCHAR (250) OUTPUT,

@createdbyuniquemachineid UNIQUEIDENTIFIER OUTPUT,

@creationdate DATETIME OUTPUT,

@updatedby INT OUTPUT,

@updatedbyuser NVARCHAR (250) OUTPUT,


-----

@presenter NVARCHAR(250) OUTPUT,

@thumbnail VARBINARY (MAX) OUTPUT,

@canvassizeratio INT OUTPUT,

@upgradeversion INT OUTPUT,

@islocked BIT OUTPUT,

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

SELECT @description = p.[description],

@containeruri = p.containeruri,

@projecttypeid = p.projecttypeid,

@createdby = p.createdby,

@zoomfactor = p.zoomfactor,

@offsetx = p.offsetx,

@offsety = p.offsety,

@background = p.backgroundcolor,

@createdbyuniquemachineid = p.createdbyuniquemachineid,

@creationdate = p.creationdate,

@updatedby = p.updatedby,

@lastupdate = p.lastupdate,

@presenter = p.presenter,


-----

@updatedbyuser = updated.username,

@thumbnail = p.thumbnail,

@canvassizeratio = p.canvas_size_ratio,

@upgradeversion = p.upgradeversion,

@islocked = p.islocked

FROM t_project as p WITH (NOLOCK)

left join t_user as created on createdby = created.userid

left join t_user as updated on updatedby = updated.userid

WHERE projectid = @projectid

AND deleted = 0

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_project]

[dbo].[t_user]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out


-----

CREATE PROCEDURE [dbo].[p_project_get_by_userid]

@userid int,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT p.projectid, p.[description], p.backgroundcolor,

p.containeruri, p.projecttypeid, p.thumbnail, p.backgroundcolor,
p.createdby,

p.createdbyuniquemachineid, p.creationdate, p.updatedby,

p.lastupdate, p.presenter, p.upgradeversion, p.islocked,
created.username as createdbyuser, updated.username as
updatedbyuser

FROM t_project as p WITH (NOLOCK)

left join t_user as created on createdby = created.userid

left join t_user as updated on updatedby = updated.userid

WHERE createdby = @userid

AND deleted = 0

ORDER BY projectid desc

OFFSET @pagesize * (@pagenumber - 1) ROWS


-----

SELECT @totalrows = count(1)

FROM t_project with (nolock)

WHERE createdby = @userid

AND deleted = 0

RETURN

END

GO

Uses

[dbo].[t_project]

[dbo].[t_user]

**[dbo].[p_project_get_connectionid_for_presenter]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

@presenterConnectionId

nvarchar(50)

100

Out

SQL Script

CREATE PROCEDURE [dbo].

[p_project_get_connectionid_for_presenter]

@projectId INT,

@presenterConnectionId NVARCHAR(50) OUTPUT

AS

BEGIN

SELECT

@presenterConnectionId = ou.connectionid

FROM dbo.t_online_user ou

LEFT JOIN dbo.t_project p

ON

p.projectid = ou.projectid

WHERE

p.presenter IS NOT NULL


-----

p.projectid = @projectId

AND

ou.isdisconnected = 0

IF @@ROWCOUNT = 0

SET @presenterConnectionId = NULL

END

GO

Uses

[dbo].[t_online_user]

[dbo].[t_project]

**[dbo].[p_project_get_containeruri]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectId


-----

@containerUri

nvarchar(500)

1000

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_get_containeruri]

@projectId INT,

@containerUri NVARCHAR(500) OUTPUT

AS

BEGIN

SELECT TOP(1) @containerUri = containeruri

FROM dbo.t_project

WHERE projectid = @projectId

ORDER BY projectid

END

GO

Uses

[db ] [ j ]


-----

**[dbo].[p_project_get_coparticipating_projects]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@coparticipantid

int

4

@pagesize

int

4

@pagenumber

int


-----

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_get_coparticipating_projects]

@userid int,

@coparticipantid int,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT p.projectid, p.[description], p.backgroundcolor,

p.containeruri, p.projecttypeid, p.thumbnail, p.createdby,

p.createdbyuniquemachineid, p.creationdate, p.updatedby,

p.lastupdate, p.presenter, p.upgradeversion, p.islocked,
created.username as createdbyuser, updated.username as
updatedbyuser

FROM t_project as p WITH (NOLOCK)

LEFT JOIN t_user as created WITH (NOLOCK) on createdby =
created.userid


-----

updated.userid

WHERE EXISTS (

SELECT null

FROM t_project_participant as ppA WITH (NOLOCK)

INNER JOIN t_project_participant as ppB WITH (NOLOCK) on
ppA.projectid = ppB.projectid

WHERE ppA.projectid = p.projectid

AND ppA.userid = @userid

AND ppB.userid = @coparticipantid

)

AND p.deleted = 0

ORDER BY projectid desc

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM t_project_participant as ppA WITH (NOLOCK)

LEFT JOIN t_project_participant as ppB WITH (NOLOCK) on
ppA.projectid = ppB.projectid

LEFT JOIN t_project as p WITH (NOLOCK) on ppA.projectid =
p.projectid

WHERE ppA.userid = @userid

AND ppB.userid = @coparticipantid


-----

RETURN

END

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

[dbo].[t_user]

**[dbo].[p_project_get_coparticipating_users]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int


-----

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_get_coparticipating_users]

@userid int,

@is_guest bit,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN


-----

SELECT u.userid, u.username, u.firstname, u.lastname, u.photourl,
u.is_guest, u.creationdate, u.lastupdate, u.lastactivitydate

FROM t_user as u WITH (NOLOCK)

WHERE EXISTS (

SELECT null

FROM t_project_participant as ppA WITH (NOLOCK)

INNER JOIN t_project_participant as ppB WITH (NOLOCK) on
ppA.projectid = ppB.projectid

INNER JOIN t_project as p WITH (NOLOCK) on ppA.projectid =
p.projectid

WHERE ppA.userid = u.userid

AND ppB.userid = @userid

AND ppA.userid != @userid

AND p.deleted = 0

)

AND ((@is_guest is null) or (u.is_guest = @is_guest))

ORDER BY u.userid desc

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM t_user as u WITH (NOLOCK)


-----

SELECT null

FROM t_project_participant as ppA WITH (NOLOCK)

INNER JOIN t_project_participant as ppB WITH (NOLOCK) on
ppA.projectid = ppB.projectid

INNER JOIN t_project as p WITH (NOLOCK) on ppA.projectid =
p.projectid

WHERE ppA.userid = u.userid

AND ppB.userid = @userid

AND ppA.userid != @userid

AND p.deleted = 0

)

AND ((@is_guest is null) or (u.is_guest = @is_guest))

RETURN

END

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

[dbo].[t_user]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@allowedNumberOfProjects

int

4

@pagesize

int

4

@pagenumber

int

4

@totalrows

int


-----

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_get_licensed_projects]

@userid int,

@allowedNumberOfProjects int,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT *

FROM (

SELECT p.projectid, p.[description], p.backgroundcolor,

p.containeruri, p.projecttypeid, p.thumbnail, p.createdby,

p.createdbyuniquemachineid, p.creationdate, p.updatedby,
p.lastupdate, p.upgradeversion, p.islocked,pp.lastaccessdate

FROM t_project as p WITH (NOLOCK)

INNER JOIN t_project_participant as pp WITH (NOLOCK) on
p.projectid = pp.projectid

WHERE pp.userid = @userid

AND p.deleted = 0


-----

ORDER BY pp.lastaccessdate desc, p.projectid desc

OFFSET 0 ROWS

FETCH NEXT @allowedNumberOfProjects ROWS ONLY

) T0

ORDER BY T0.lastaccessdate desc, T0.projectid desc

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(*)

FROM (

SELECT p.projectid

FROM t_project as p WITH (NOLOCK)

INNER JOIN t_project_participant as pp WITH (NOLOCK) on
p.projectid = pp.projectid

WHERE pp.userid = @userid

AND p.deleted = 0

AND pp.permission = 255

ORDER BY pp.lastaccessdate desc, p.projectid desc

OFFSET 0 ROWS

FETCH NEXT @allowedNumberOfProjects ROWS ONLY

) T0


-----

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

**[dbo].[p_project_get_participating_projects]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@permission

tinyint


-----

1000

@tagFilter

nvarchar(500)

1000

@pagesize

int

4

@pagenumber

int

4

@sortColumn

nvarchar(100)

200

@sortDirection

nvarchar(4)

8

@wantsCount

bit


-----

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_get_participating_projects]

@userid int,

@permission tinyint,

@descriptionFilter nvarchar(500),

@tagFilter nvarchar(500),

@pagesize int,

@pagenumber int,

@sortColumn nvarchar(100),

@sortDirection nvarchar(4),

@wantsCount bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT p.projectid, p.[description], p.backgroundcolor,


-----

p.lastupdate, p.presenter, p.upgradeversion, p.islocked,
created.username as createdbyuser, updated.username as
updatedbyuser,

own.userid as owner_userid, own.username as owner_username,
own.firstname as owner_firstname, own.lastname as
owner_lastname, own.photourl as owner_photourl

FROM t_project as p WITH (NOLOCK)

INNER JOIN t_project_participant as pp WITH (NOLOCK) on
p.projectid = pp.projectid

LEFT JOIN t_user as created on createdby = created.userid

LEFT JOIN t_user as updated on updatedby = updated.userid

OUTER APPLY (

SELECT TOP 1 t_user.userid, t_user.username, t_user.firstname,
t_user.lastname, t_user.photourl

FROM t_user

INNER JOIN t_project_participant ON t_project_participant.userid =
t_user.userid

WHERE t_project_participant.projectid = p.projectid and
t_project_participant.permission = 255

ORDER BY t_user.userid asc

) own

WHERE pp.userid = @userid

AND p.deleted = 0

AND ((@permission is null) or (pp.permission = @permission))


-----

AND ((@tagFilter is null) or EXISTS (

SELECT NULL FROM t_project_tag WITH (NOLOCK)

WHERE p.projectid = t_project_tag.projectid

AND t_project_tag.tag like @tagFilter

))

ORDER BY

CASE WHEN @sortDirection = 'ASC' THEN

CASE @sortColumn

WHEN 'ProjectName' THEN p.[description]

WHEN 'ProjectOwner' THEN CONCAT(own.[firstname], own.

[lastname])

WHEN 'ProjectLastAccessDate' THEN CONVERT(CHAR(23),
pp.lastaccessdate, 121)

END

END,

CASE WHEN @sortDirection = 'DESC' THEN

CASE @sortColumn

WHEN 'ProjectName' THEN p.[description]

WHEN 'ProjectOwner' THEN CONCAT(own.[firstname], own.

[lastname])

WHEN 'ProjectLastAccessDate' THEN CONVERT(CHAR(23),
pp.lastaccessdate, 121)

END


-----

p.projectid desc

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

IF (@wantsCount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM t_project as p WITH (NOLOCK)

INNER JOIN t_project_participant as pp with (NOLOCK) on
p.projectid = pp.projectid

WHERE pp.userid = @userid

AND p.deleted = 0

AND ((@permission is null) or (pp.permission = @permission))

AND ((@descriptionFilter is null) or (p.[description] like
@descriptionFilter))

AND ((@tagFilter is null) or EXISTS (

SELECT NULL FROM t_project_tag WITH (NOLOCK)

WHERE p.projectid = t_project_tag.projectid

AND t_project_tag.tag like @tagFilter

))

END ELSE BEGIN

SET @totalrows = 0


-----

RETURN

END

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

[dbo].[t_project_tag]

[dbo].[t_user]

**[dbo].[p_project_get_participating_projects_count]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int


-----

tinyint

1

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].

[p_project_get_participating_projects_count]

@userid int,

@permission tinyint,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT @totalrows = count(*)

FROM t_project as p WITH (NOLOCK)

INNER JOIN t_project_participant as pp WITH (NOLOCK) on
p.projectid = pp.projectid

WHERE pp.userid = @userid

AND ((@permission is null) or (pp.permission = @permission))


-----

RETURN

END

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

**[dbo].[p_project_get_templates]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@languageId

int

4

@pageSize

int


-----

@pageNumber

int

4

@categoryId

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_get_templates]

@languageId INT,

@pageSize INT,

@pageNumber INT,

@categoryId INT,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

S C j id


-----

p.projecttypeid,

p.thumbnail,

t.languageid,

t.[description],

t.extendeddescription,

t.moreinfourl

FROM dbo.t_project p WITH (NOLOCK)

LEFT JOIN dbo.t_template_translation t WITH (NOLOCK) ON
t.projectid = p.projectid

WHERE p.deleted = 0

AND (

((@categoryId > 0) AND (p.projecttypeid = @categoryId))

OR ((@categoryId = -1) AND ((p.projecttypeid = 1) OR
(p.projecttypeid & 256 > 0)))

)

AND ((t.languageid = @languageId) OR (t.languageid=1))

ORDER BY t.projectid, t.languageid

OFFSET @pageSize * (@pageNumber - 1) ROWS

FETCH NEXT @pageSize ROWS ONLY;

SELECT @totalrows = count(1)

FROM dbo.t_project p WITH (NOLOCK)


-----

t.projectid = p.projectid

WHERE p.deleted = 0

AND (

((@categoryId > 0) AND (p.projecttypeid = @categoryId))

OR ((@categoryId = -1) AND ((p.projecttypeid = 1) OR
(p.projecttypeid & 256 > 0)))

)

AND ((t.languageid = @languageId) OR (t.languageid=1))

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project]

[dbo].[t_template_translation]

**[dbo].[p_project_insert]**

Parameters

Name

Data Type


-----

Direction

@description

nvarchar(250)

500

@backgroundcolor

nvarchar(7)

14

@containeruri

nvarchar(500)

1000

@createdby

int

4

@createdbyuniquemachineid

uniqueidentifier

16

@upgradeversion

int


-----

@projectid

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_insert]

@description nvarchar(250),

@backgroundcolor nvarchar(7),

@containeruri nvarchar (500),

@createdby int,

@createdbyuniquemachineid uniqueidentifier,

@upgradeversion INT,

@projectid int output,

@rows int = 0 output

AS


-----

SET NOCOUNT ON

INSERT INTO t_project

(

[description],

[backgroundcolor],

[containeruri],

[createdby],

[createdbyuniquemachineid],

[creationdate],

[lastupdate],

[upgradeversion]

)

--OUTPUT inserted.projectid

VALUES

(

@description,

@backgroundcolor,

@containeruri,

@createdby,

@createdbyuniquemachineid,


-----

@upgradeversion

)

set @projectid = @@IDENTITY

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_participant_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int


-----

@userid

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_participant_delete]

@projectid int,

@userid int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE

FROM t_project_participant

WHERE projectid = @projectid

AND userid = @userid

set @rows = @@ROWCOUNT


-----

RETURN 0

END

GO

Uses

[dbo].[t_project_participant]

**[dbo].[p_project_participant_get_by_coparticipant]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@rows

int


-----

SQL Script

CREATE PROCEDURE [dbo].

[p_project_participant_get_by_coparticipant]

@userid int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT A.projectid, A.userid, A.permission, A.lastaccessdate

FROM t_project_participant A

WHERE EXISTS (

SELECT null

FROM t_project_participant B

WHERE A.projectid = B.projectid

AND B.userid = @userid

)

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END


-----

Uses

[dbo].[t_project_participant]

**[dbo].[p_project_participant_get_by_projectid]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

@permission

tinyint

1

SQL Script

CREATE PROCEDURE [dbo].[p_project_participant_get_by_projectid]

@projectid int,


-----

SET NOCOUNT ON

SELECT pp.projectid, pp.userid, pp.permission, pp.lastaccessdate

FROM t_project_participant as pp WITH (NOLOCK)

WHERE pp.projectid = @projectid

AND ((@permission is null) or (pp.permission = @permission))

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_project_participant]

**[dbo].[p_project_participant_get_by_projectid_and_userid]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@projectid

int

4

@userid

int

4

@permission

tinyint

1

Out

@lastaccessdate

datetime

8

Out

@rows

int

4

Out

SQL Script


-----

[p_project_participant_get_by_projectid_and_userid]

@projectid INT,

@userid INT,

@permission tinyint = 0 OUTPUT,

@lastaccessdate datetime OUTPUT,

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

SELECT @permission = pp.permission,

@lastaccessdate = pp.lastaccessdate

FROM t_project_participant as pp WITH (NOLOCK)

WHERE pp.projectid = @projectid

AND pp.userid = @userid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses


-----

**[dbo].[p_project_participant_get_by_userid]**

Parameters

Name

Data Type

Max Length (Bytes)

@userid

int

4

@permission

tinyint

1

SQL Script

CREATE PROCEDURE [dbo].[p_project_participant_get_by_userid]

@userid int,

@permission tinyint

AS BEGIN

SET NOCOUNT ON

SELECT pp.projectid, pp.userid, pp.permission, pp.lastaccessdate


-----

WHERE pp.userid = @userid

AND ((@permission is null) or (pp.permission = @permission))

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_project_participant]

**[dbo].[p_project_participant_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int


-----

@permission

tinyint

1

SQL Script

CREATE PROCEDURE [dbo].[p_project_participant_insert]

@projectid int,

@userid int,

@permission tinyint

AS BEGIN

SET NOCOUNT ON

INSERT INTO t_project_participant

(

projectid,

userid,

permission,

lastaccessdate

)

VALUES


-----

@userid,

@permission,

GETUTCDATE()

)

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project_participant]

**[dbo].[p_project_participant_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int


-----

@userid

int

4

@permission

tinyint

1

@lastaccessdate

datetime

8

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_participant_update]

@projectid int,

@userid int,

@permission tinyint,


-----

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE t_project_participant

SET permission = @permission,

lastaccessdate = @lastaccessdate

WHERE projectid = @projectid

AND userid = @userid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project_participant]

**[dbo].[p_project_remove_user_as_presenter_in_all]**

Parameters


-----

Data Type

Max Length (Bytes)

@userName

nvarchar(250)

500

SQL Script

CREATE PROCEDURE [dbo].

[p_project_remove_user_as_presenter_in_all]

@userName NVARCHAR(250)

AS

BEGIN

SELECT * INTO #temp FROM (

SELECT projectid

FROM dbo.t_project

WHERE LOWER(presenter) = LOWER(@userName)

)

AS allIds

UPDATE dbo.t_project

SET presenter = NULL

WHERE projectid IN (SELECT projectid FROM #temp)


-----

DROP TABLE #temp

END

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_search_backend]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectId

int

4

@participantId

int


-----

@participantPermission

tinyint

1

@descriptionFilter

nvarchar(500)

1000

@isDeleted

int

4

@pagesize

int

4

@pagenumber

int

4

@wantsCount

bit

1

@totalrows


-----

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_search_backend]

@projectId int,

@participantId int,

@participantPermission tinyint,

@descriptionFilter nvarchar(500),

@isDeleted int,

@pagesize int,

@pagenumber int,

@wantsCount bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT p.projectid, p.[description], p.backgroundcolor,

p.containeruri, p.projecttypeid, p.thumbnail, p.createdby,

p.createdbyuniquemachineid, p.creationdate, p.updatedby,

p.lastupdate, p.presenter,p.upgradeversion, p.islocked, p.deleted,

created.username as createdbyuser, updated.username as


-----

LEFT JOIN t_user as created on createdby = created.userid

LEFT JOIN t_user as updated on updatedby = updated.userid

WHERE ((@projectId is null) or (p.projectid = @projectId))

AND ((@participantId is null) OR EXISTS (

SELECT NULL FROM t_project_participant as pp WITH (NOLOCK)

WHERE pp.projectid = p.projectid

AND pp.userid = @participantId

AND ((@participantPermission is null) OR (pp.permission =
@participantPermission))

))

AND ((@isDeleted is null) OR (p.deleted = @isDeleted))

AND ((@descriptionFilter is null) OR (p.[description] like
@descriptionFilter))

ORDER BY p.projectid desc

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

IF (@wantsCount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM t_project as p WITH (NOLOCK)

WHERE ((@projectId is null) or (p.projectid = @projectId))


-----

SELECT NULL FROM t_project_participant as pp WITH (NOLOCK)

WHERE pp.projectid = p.projectid

AND pp.userid = @participantId

AND ((@participantPermission is null) OR (pp.permission =
@participantPermission))

))

AND ((@isDeleted is null) OR (p.deleted = @isDeleted))

AND ((@descriptionFilter is null) OR (p.[description] like
@descriptionFilter))

END ELSE BEGIN

SET @totalrows = 0

END

RETURN

END

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

[dbo].[t_user]


-----

Parameters

Name

Data Type

Max Length (Bytes)

@projectId

int

4

@presenter

nvarchar(250)

500

SQL Script

CREATE PROCEDURE [dbo].[p_project_set_presenter]

@projectId INT NULL,

@presenter NVARCHAR(250) NULL

AS

BEGIN

UPDATE dbo.t_project

SET presenter = @presenter

WHERE projectid = @projectId

END


-----

Uses

[dbo].[t_project]

**[dbo].[p_project_setlock]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

@islocked

bit

1

SQL Script

CREATE PROCEDURE [dbo].[p_project_setlock]

@projectid int,

@islocked bit


-----

UPDATE [dbo].[t_project]

SET islocked = @islocked

WHERE projectid = @projectid

RETURN 0

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_setversion]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

@upgradeversion

int


-----

SQL Script

CREATE PROCEDURE [dbo].[p_project_setversion]

@projectid int,

@upgradeversion int

AS

UPDATE [dbo].[t_project]

SET upgradeversion = @upgradeversion

WHERE projectid = @projectid

RETURN 0

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_tag_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

int

4

@tag

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_tag_delete]

@projectid int,

@tag nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE

FROM t_project_tag

j id @ j id


-----

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_project_tag]

**[dbo].[p_project_tag_get_by_projectid]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

SQL Script


-----

@projectid int

AS BEGIN

SET NOCOUNT ON

SELECT tag

FROM t_project_tag WITH (NOLOCK)

WHERE projectid = @projectid

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_project_tag]

**[dbo].[p_project_tag_get_by_projectids]**

Parameters

Name

Data Type


-----

@p0

int

4

@p1

int

4

@p2

int

4

@p3

int

4

@p4

int

4

@p5

int

4

@p6

int


-----

int

4

@p8

int

4

@p9

int

4

@p10

int

4

@p11

int

4

@p12

int

4

@p13

int

4

@p14


-----

@p15

int

4

@p16

int

4

@p17

int

4

@p18

int

4

@p19

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_project_tag_get_by_projectids]

@p0 int = null,

@p1 int = null,


-----

@p3 int = null,

@p4 int = null,

@p5 int = null,

@p6 int = null,

@p7 int = null,

@p8 int = null,

@p9 int = null,

@p10 int = null,

@p11 int = null,

@p12 int = null,

@p13 int = null,

@p14 int = null,

@p15 int = null,

@p16 int = null,

@p17 int = null,

@p18 int = null,

@p19 int = null

AS BEGIN

SET NOCOUNT ON

SELECT projectid, tag


-----

@p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16,
@p17, @p18, @p19)

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_project_tag]

**[dbo].[p_project_tag_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int


-----

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_tag_insert]

@projectid int,

@tag nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO t_project_tag

(

projectid,

tag

)

VALUES


-----

@projectid,

@tag

)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project_tag]

**[dbo].[p_project_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid


-----

@userid

int

4

@description

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_update]

@projectid int,

@userid int,

@description nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON


-----

SET [description] = @description,

updatedby = @userid,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_update_background]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

int

4

@userid

int

4

@backgroundcolor

nvarchar(7)

14

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_update_background]

@projectid int,

@userid int,

@backgroundcolor nvarchar(7),

@rows int = 0 output


-----

SET NOCOUNT ON

UPDATE t_project

SET backgroundcolor = @backgroundcolor,

updatedby = @userid,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_update_canvas_size_ratio]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@projectid

int

4

@userid

int

4

@size_ratio

nvarchar(7)

14

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_update_canvas_size_ratio]

@projectid int,

@userid int,

@size ratio nvarchar(7)


-----

AS

SET NOCOUNT ON

UPDATE t_project

SET canvas_size_ratio = @size_ratio,

updatedby = @userid,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_update_deleted]**

Parameters

Name

Data Type


-----

Direction

@projectid

int

4

@userid

int

4

@deleted

bit

1

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_project_update_deleted]

@projectid int,

@userid int,


-----

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_project

SET deleted = @deleted,

updatedby = @userid,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_update_owner]**

Parameters

Name


-----

Max Length (Bytes)

Direction

@projectid

int

4

@newowner

int

4

@userid

int

4

@createdbyuniquemachineid

uniqueidentifier

16

@rows

int

4

Out

SQ S i


-----

CREATE PROCEDURE [dbo].[p_project_update_owner]

@projectid int,

@newowner int,

@userid int,

@createdbyuniquemachineid uniqueidentifier,

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_project

SET createdby = @newowner,

createdbyuniquemachineid = @createdbyuniquemachineid,

updatedby = @userid,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

-- new owner must be deleted from t_project_participant

DELETE

FROM t_project_participant

WHERE projectid = @projectid

and userid = @newowner


-----

INSERT INTO t_project_participant (projectid, userid)

VALUES (@projectid, @userid)

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

**[dbo].[p_project_update_sas_token]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int


-----

nvarchar(500)

1000

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_update_sas_token]

@projectid int,

@containeruri nvarchar (500),

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_project

SET containeruri = @containeruri,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

S OCO O


-----

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_update_template]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectId

int

4

@projectTypeId

int

4

@languageId


-----

@description

nvarchar(250)

500

@extendedDescription

nvarchar(max)

max

@moreInfoUrl

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_project_update_template]

@projectId INT,

@projectTypeId INT,

@languageId INT,

@d i i A C A (2 0)


-----

@moreInfoUrl NVARCHAR(250),

@rows INT OUTPUT

AS BEGIN

SET NOCOUNT ON

UPDATE dbo.t_project

SET [projecttypeid] = @projectTypeId

WHERE [projectid] = @projectId

IF EXISTS (SELECT NULL FROM dbo.t_template_translation WHERE

[projectid] = @projectId AND [languageid] = @languageId)
BEGIN

UPDATE dbo.t_template_translation

SET [description] = @description,

[moreinfourl] = @moreInfoUrl,

[extendeddescription] = @extendedDescription,

[projectid] = @projectId

WHERE [projectid] = @projectId

AND [languageid] = @languageId

END ELSE BEGIN

INSERT INTO dbo.t_template_translation ([projectid], [languageid],

[description], [extendeddescription], [moreinfourl])

VALUES (@projectId, @languageId, @description,
@extendedDescription @moreInfoUrl)


-----

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project]

[dbo].[t_template_translation]

**[dbo].[p_project_update_thumbnail]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int


-----

varbinary(max)

max

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_project_update_thumbnail]

@projectid int,

@thumbnail varbinary(max),

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_project

SET thumbnail = @thumbnail,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

S OCO O


-----

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_update_zoom_offset]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int

4

@zoomfactor

float

8

@offsetxl


-----

@offsety

float

8

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_project_update_zoom_offset]

@projectid int,

@zoomfactor float,

@offsetx float,

@offsety float,

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_project

SET zoomfactor = @zoomfactor,


-----

offsety = @offsety,

lastupdate = GETUTCDATE()

WHERE projectid = @projectid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_project]

**[dbo].[p_project_upgrade_book]**

SQL Script

CREATE PROCEDURE [dbo].[p_project_upgrade_book]

AS BEGIN

DECLARE @booked_by UNIQUEIDENTIFIER

SET @booked_by = NEWID()

DECLARE @booking_date DATETIME

SET @booking date = GETUTCDATE()


-----

UPDATE TOP(1) dbo.t_project_upgrade_booking

SET bookedby=@booked_by,

bookingdate = @booking_date,

lastupdate = @booking_date,

statemachinestatusid =

[dbo].fn_GetStateMachineStatusId('working')

WHERE statemachinestatusid =

[dbo].fn_GetStateMachineStatusId('ready')

IF @@ROWCOUNT > 0

BEGIN

SELECT [Id],

[creationdate],

[username],

[projectid],

[currentversion],

[desiredversion],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],

[retry]


-----

WHERE bookedby=@booked_by

END

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project_upgrade_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_upgrade_fallback]**

Parameters

Name

Data Type

Max Length (Bytes)

@max_retries

int

4

@booking elapsed time in sec


-----

SQL Script

CREATE PROCEDURE [dbo].[p_project_upgrade_fallback]

@max_retries int,

@booking_elapsed_time_in_sec int

AS

BEGIN

DECLARE @lastupdate DATETIME

SET @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE dbo.t_project_upgrade_booking

SET bookedby=null,

bookingdate = null,

lastupdate = @lastupdate,

retry = retry + 1,

statemachinestatusid = CASE WHEN (retry >= @max_retries)

THEN dbo.fn_GetStateMachineStatusId('ERROR')

ELSE

dbo.fn_GetStateMachineStatusId('READY')


-----

WHERE statemachinestatusid =
dbo.fn_GetStateMachineStatusId('WORKING')

AND DATEDIFF(SECOND, bookingdate, GETUTCDATE()) >=
@booking_elapsed_time_in_sec

END

GO

Uses

[dbo].[t_project_upgrade_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_upgrade_history]**

SQL Script

CREATE PROCEDURE [dbo].[p_project_upgrade_history]

AS

BEGIN

INSERT [dbo].[t_project_upgrade_booking_history]

(

[Id],


-----

[projectid],

[currentversion],

[desiredversion],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],

[retry],

[statemachinestatusid]

)

SELECT

[Id],

[creationdate],

[username],

[projectid],

[currentversion],

[desiredversion],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],


-----

[statemachinestatusid]

FROM

(

DELETE [dbo].[t_project_upgrade_booking]

OUTPUT

DELETED.[Id],

DELETED.[creationdate],

DELETED.[username],

DELETED.[projectid],

DELETED.[currentversion],

DELETED.[desiredversion],

DELETED.[uniquedeviceid],

DELETED.[bookedby],

DELETED.[lastupdate],

DELETED.[bookingdate],

DELETED.[retry],

DELETED.[statemachinestatusid]

WHERE [statemachinestatusid] >=

[dbo].fn_GetStateMachineStatusId('FINISHED')

) AS RowsToMove ;

END


-----

Uses

[dbo].[t_project_upgrade_booking]

[dbo].[t_project_upgrade_booking_history]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_upgrade_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@username

nvarchar(200)

400

@projectid

int

4

@currentversion

int


-----

int

4

@uniquedeviceid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [dbo].[p_project_upgrade_insert]

@username NVARCHAR(200),

@projectid INT,

@currentversion INT,

@desiredversion INT,

@uniquedeviceid UNIQUEIDENTIFIER

AS

BEGIN

DECLARE @statemachinestatusid INT

SET @statemachinestatusid =
dbo.fn_GetStateMachineStatusId('ready')

INSERT INTO [dbo].[t_project_upgrade_booking]


-----

[projectid],

[currentversion],

[desiredversion],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],

[retry],

[statemachinestatusid]

)

VALUES

(

GETUTCDATE(),

@username,

@projectid,

@currentversion,

@desiredversion,

@uniquedeviceid,

NULL,

GETUTCDATE(),

NULL,


-----

@statemachinestatusid

)

END

RETURN 0

GO

Uses

[dbo].[t_project_upgrade_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_project_upgrade_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

@retries


-----

@statemachinestatusid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_project_upgrade_unbook]

@id INT,

@retries INT,

@statemachinestatusid INT

AS

SET NOCOUNT ON

UPDATE dbo.t_project_upgrade_booking

SET

bookedby=NULL,

bookingdate=NULL,

retry=@retries,

statemachinestatusid=@statemachinestatusid,

lastupdate = GETUTCDATE()

WHERE

Id=@id


-----

RETURN 0

GO

Uses

[dbo].[t_project_upgrade_booking]

**[dbo].[p_projecttypes_convert_to_template]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectId

int

4

@projectTypeId

int

4

@description

nvarchar(250)


-----

nvarchar(max)

max

@moreInfoUrl

nvarchar(250)

500

@zoomFactor

float

8

SQL Script

CREATE PROCEDURE [dbo].[p_projecttypes_convert_to_template]

@projectId INT,

@projectTypeId INT,

@description NVARCHAR(250),

@extendedDescription NVARCHAR(MAX),

@moreInfoUrl NVARCHAR(250),

@zoomFactor FLOAT

AS BEGIN

SET NOCOUNT ON

INSERT INTO dbo.t_template_translation


-----

languageid,

[description],

extendeddescription,

moreinfourl

)

VALUES

( @projectId, -- projectid - int

1, -- Default language

@description, -- description - nvarchar(250)

@extendedDescription, -- extendeddescription - nvarchar(max)

@moreInfoUrl -- moreinfourl - nvarchar(250)

)

UPDATE dbo.t_project

SET projecttypeid = @projectTypeId,

createdby = 1,

zoomfactor = @zoomFactor

WHERE projectid = @projectId

-- Remove the participants as well

DELETE FROM dbo.t_project_participant

WHERE projectid = @projectId


-----

GO

Uses

[dbo].[t_project]

[dbo].[t_project_participant]

[dbo].[t_template_translation]

**[dbo].[p_projecttypes_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projecttypeid

int

4

@rows

int


-----

SQL Script

CREATE PROCEDURE [dbo].[p_projecttypes_delete]

@projecttypeid INT,

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

-- Delete the project type translations

DELETE FROM dbo.t_project_type_translation

WHERE projecttypeid = @projecttypeid

-- Delete the project type

DELETE FROM dbo.t_project_type

WHERE projecttypeid = @projecttypeid

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses


-----

[dbo].[t_project_type_translation]

**[dbo].[p_projecttypes_get_all_template_types]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@languageId

int

4

@pageNumber

int

4

@pageSize

int

4

@totalRows


-----

Out

SQL Script

CREATE PROCEDURE [dbo].[p_projecttypes_get_all_template_types]

@languageId INT = 1,

@pageNumber INT,

@pageSize INT,

@totalRows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT

b.description description,

a.projecttypeid projecttypeid ,

b.languageid languageid

FROM dbo.t_project_type AS a

LEFT JOIN dbo.t_project_type_translation AS b ON b.projecttypeid
= a.projecttypeid

WHERE

(a.projecttypeid = 1 OR (a.projecttypeid & 256 > 0 ))

AND


-----

OR b.languageid IS NULL)

ORDER BY a.projecttypeid, b.languageid

OFFSET @pageSize * (@pageNumber - 1) ROWS

FETCH NEXT @pageSize ROWS ONLY;

SELECT @totalRows = count(1)

FROM dbo.t_project_type AS a

LEFT JOIN dbo.t_project_type_translation AS b ON b.projecttypeid
= a.projecttypeid

WHERE

(a.projecttypeid = 1 OR (a.projecttypeid & 256 > 0 ))

AND

(b.languageid = @languageId

OR b.languageid = 1

OR b.languageid IS NULL)

END

GO

Uses

[dbo].[t_project_type]

[dbo].[t_project_type_translation]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@description

nvarchar(250)

500

@projecttypeid

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].

[p_projecttypes_insert_new_projecttype]

@description NVARCHAR(250),

@projecttypeid INT OUTPUT

AS BEGIN


-----

IF EXISTS( SELECT [description] FROM dbo.t_project_type WHERE

[description] = @description)

BEGIN

SELECT @projecttypeid=projecttypeid FROM dbo.t_project_type
WHERE [description] = @description

RETURN

END

ELSE

BEGIN

IF NOT EXISTS (SELECT * FROM dbo.t_project_type WHERE
projecttypeid>255)

BEGIN

SET @projecttypeid=256

END

ELSE

BEGIN

SELECT @projecttypeid=(MAX(projecttypeid)+1) FROM
dbo.t_project_type

END

INSERT INTO dbo.t_project_type

(

projecttypeid,

description


-----

VALUES

( @projecttypeid,

@description

)

-- Also set the default, English version

INSERT INTO dbo.t_project_type_translation

(

projecttypeid,

languageid,

description

)

VALUES

( @projecttypeid,

1, -- Default is english

@description

)

END

END

GO


-----

[dbo].[t_project_type]

[dbo].[t_project_type_translation]

**[dbo].[p_projecttypes_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projecttypeid

int

4

@description

nvarchar(250)

500

@languageId

int


-----

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_projecttypes_update]

@projecttypeid INT,

@description NVARCHAR(250),

@languageId INT,

@translatedDescription NVARCHAR(250),

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

-- Update the project type

UPDATE dbo.t_project_type

SET [description] = @description

where projecttypeid = @projecttypeid


-----

-- Update the project type translation

IF EXISTS (SELECT NULL FROM dbo.t_project_type_translation
WHERE projecttypeid = @projecttypeid and languageid =
@languageId) BEGIN

UPDATE dbo.t_project_type_translation

SET [description] = @translatedDescription

WHERE projecttypeid = @projecttypeid

AND languageid = @languageId

END ELSE BEGIN

INSERT INTO dbo.t_project_type_translation (projecttypeid,
languageid, [description])

VALUES (@projecttypeid, @languageId, @translatedDescription)

END

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_project_type]

[dbo].[t_project_type_translation]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectTypeId

int

4

@result

bit

1

Out

SQL Script

CREATE PROCEDURE [dbo].[p_projecttypes_verify_if_template]

@projectTypeId INT,

@result BIT OUTPUT

AS BEGIN

IF (@projectTypeId <> 1) AND (@projectTypeId & 256 = 0)

BEGIN


-----

END

ELSE

BEGIN

SET @result=1

END

IF(@result=1)

BEGIN

SELECT @result =

CASE

WHEN EXISTS(SELECT * FROM dbo.t_project_type WHERE
projecttypeid=@projectTypeId)

THEN 1

ELSE 0

END

END

END

GO

Uses

[dbo].[t_project_type]


-----

**[dbo].[p_quicklink_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

@quicklinkid

int

4

@userid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_quicklink_delete]

@projectid INT,

@quicklinkid INT,

@userid INT


-----

BEGIN

UPDATE dbo.t_quicklink

SET

isdeleted = 1,

lastupdate= GETUTCDATE(),

lastupdatedby = @userid

WHERE projectid = @projectid

AND quicklinkid = @quicklinkid

RETURN 0

END

GO

Uses

[dbo].[t_quicklink]

**[dbo].[p_quicklink_get_by_id]**

Parameters

Name

Data Type


-----

@projectid

int

4

@quicklinkid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_quicklink_get_by_id]

@projectid INT,

@quicklinkid INT

AS

SELECT TOP(1)

ql.quicklinkid,

ql.projectid,

ql.name,

ql.createdby,

ql.creationdate,

ql.lastupdate,

ql.lastupdatedby,

ql.thumbnail


-----

dbo.t_quicklink ql WITH (NOLOCK)

WHERE

projectid = @projectid

AND

ql.quicklinkid = @quicklinkid

AND

ql.isdeleted = 0

RETURN 0

GO

Uses

[dbo].[t_quicklink]

**[dbo].[p_quicklink_get_by_projectid]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

int

4

@wantsCount

bit

1

@pagesize

int

4

@pagenum

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_quicklink_get_by_projectid]

@projectid INT,


-----

@pagenum INT,

@totalrows INT =0 OUTPUT

AS

SELECT

ql.quicklinkid,

ql.projectid,

ql.name,

ql.createdby,

ql.creationdate,

ql.lastupdate,

ql.lastupdatedby,

ql.thumbnail

FROM

dbo.t_quicklink ql WITH (NOLOCK)

WHERE

projectid = @projectid

AND

isdeleted = 0

ORDER BY

creationdate ASC


-----

IF (@wantsCount = 1)

BEGIN

SELECT

@totalrows = COUNT(0)

FROM

dbo.t_quicklink WITH (NOLOCK)

WHERE

projectid = @projectid

AND

isdeleted = 0

END

ELSE

BEGIN

SET @totalrows = 0

END

RETURN 0

GO

Uses

[dbo].[t_quicklink]


-----

**[dbo].[p_quicklink_get_tiles_for_quicklink]**

Parameters

Name

Data Type

Max Length (Bytes)

@quicklinkid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_quicklink_get_tiles_for_quicklink]

@quicklinkid INT

AS

BEGIN

SET NOCOUNT ON

SELECT tileid

FROM dbo.t_quicklink_tile WITH (NOLOCK)

WHERE

quicklinkid = @quicklinkid


-----

GO

Uses

[dbo].[t_quicklink_tile]

**[dbo].[p_quicklink_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

@createdby

int

4

@name

nvarchar(250)

500


-----

max

@uniquedeviceid

uniqueidentifier

16

@tileids

TileStatusIdSet

max

SQL Script

CREATE PROCEDURE [dbo].[p_quicklink_insert]

@projectid INT,

@createdby INT,

@name NVARCHAR(250),

@thumbnail VARBINARY(MAX),

@uniquedeviceid UNIQUEIDENTIFIER,

@tileids dbo.TileStatusIdSet READONLY

AS

BEGIN

SET NOCOUNT ON

C A @ i d A G C A ()


-----

DECLARE @quicklinkid INT

-- Create the tally table to avoid using (slow!) cursors

DECLARE @TallyTable TABLE (Iterator INT IDENTITY(1,1) NOT
NULL, tileId UNIQUEIDENTIFIER NOT NULL);

INSERT INTO @TallyTable (tileId)

SELECT TileId FROM @tileids

-- Create the main quicklink entity

INSERT INTO dbo.t_quicklink (

projectid,

createdby,

creationdate,

lastupdate,

lastupdatedby,

[name],

thumbnail,

createdbyuniquemachineid,

isdeleted

)

VALUES (

@projectid,


-----

@creationdate,

@lastupdate,

@createdby,

@name,

@thumbnail,

@uniquedeviceid,

0)

SET @quicklinkid = @@IDENTITY

-- Insert all tileIds into the table

DECLARE @RowCount INT

DECLARE @setId INT = 1

DECLARE @tileId UNIQUEIDENTIFIER

SELECT @RowCount = COUNT(0) FROM @tileids

-- Loop through all given tileIds

WHILE @setId <= @RowCount

BEGIN

SELECT @tileId = TileId FROM @TallyTable

WHERE Iterator = @setId

S O [db ] [ i kli k il ]


-----

VALUES

(@quicklinkid, @tileId)

SET @setId = @setId+1

END

SET NOCOUNT OFF

END

RETURN 0

GO

Uses

[dbo].[t_quicklink]

[dbo].[t_quicklink_tile]

[dbo].[TileStatusIdSet]

**[dbo].[p_quicklink_remove_tile_from_quicklinks]**

Parameters

Name


-----

Max Length (Bytes)

@tileid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [dbo].

[p_quicklink_remove_tile_from_quicklinks]

@tileid UNIQUEIDENTIFIER

AS

BEGIN

-- First, select all quicklinks this is part off

SELECT ql.quicklinkid

INTO #affectedQuickLinks

FROM dbo.t_quicklink ql WITH (NOLOCK)

JOIN dbo.t_quicklink_tile qlt ON qlt.quicklinkid = ql.quicklinkid

WHERE qlt.tileid = @tileid

-- Delete all tiles

DELETE FROM dbo.t_quicklink_tile WHERE tileid = @tileID

if h i kli k h h O il f h d


-----

UPDATE dbo.t_quicklink

SET isdeleted = 1

WHERE EXISTS (SELECT quicklinkid FROM #affectedQuickLinks
WHERE quicklinkid = t_quicklink.quicklinkid)

AND NOT EXISTS (SELECT quicklinkid FROM dbo.t_quicklink_tile
WHERE quicklinkid = t_quicklink.quicklinkid )

END

RETURN 0

GO

Uses

[dbo].[t_quicklink]

[dbo].[t_quicklink_tile]

**[dbo].[p_quicklink_update]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@quicklinkid

int

4

@lastupdatedby

int

4

@name

nvarchar(250)

500

@thumbnail

varbinary(max)

max

@tileids

TileStatusIdSet

max

SQL Script

CREATE PROCEDURE [dbo].[p_quicklink_update]

@projectid INT,


-----

@name NVARCHAR(250),

@thumbnail VARBINARY(MAX),

@tileids dbo.TileStatusIdSet READONLY

AS

BEGIN

SET NOCOUNT ON

DECLARE @lastupdate DATETIME = GETUTCDATE()

-- Create the main quicklink entity

UPDATE dbo.t_quicklink

SET

lastupdate = @lastupdate,

lastupdatedby = @lastupdatedby,

[name]=@name,

thumbnail=@thumbnail

WHERE quicklinkid = @quicklinkid

AND projectid = @projectid

AND isdeleted = 0

IF @@ROWCOUNT > 0

BEGIN


-----

DECLARE @TallyTable TABLE (Iterator INT IDENTITY(1,1) NOT
NULL, tileId UNIQUEIDENTIFIER NOT NULL);

INSERT INTO @TallyTable (tileId)

SELECT TileId FROM @tileids

-- Delete all the old tiles.

DELETE FROM dbo.t_quicklink_tile

WHERE quicklinkid = @quicklinkid

-- Insert all tileIds into the table

DECLARE @RowCount INT

DECLARE @setId INT = 1

DECLARE @tileId UNIQUEIDENTIFIER

SELECT @RowCount = COUNT(0) FROM @tileids

-- Loop through all given tileIds

WHILE @setId <= @RowCount

BEGIN

SELECT @tileId = TileId FROM @TallyTable

WHERE Iterator = @setId

INSERT INTO [dbo].[t_quicklink_tile]

(quicklinkid, tileid)


-----

(@quicklinkid, @tileId)

SET @setId = @setId+1

END

END -- IF @@ROWCOUNT > 0

SET NOCOUNT OFF

END

RETURN 0

GO

Uses

[dbo].[t_quicklink]

[dbo].[t_quicklink_tile]

[dbo].[TileStatusIdSet]

**[dbo].[p_storage_eraser_book]**

SQL Script


-----

CREATE PROCEDURE [dbo].[p_storage_eraser_book]

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate smalldatetime

set @bookingdate = GETUTCDATE()

--part of unsed code

--SET NOCOUNT ON

--UPDATE top(5) t_tilestatus

--SET bookedby = @bookeby,

-- bookingdate = @bookingdate,

-- statemachinestatusid =
dbo.fn_GetStateMachineStatusId('WORKING')

--WHERE (blobstatusid = dbo.fn_GetBlobStatus('DELETED') or
blobstatusid = dbo.fn_GetBlobStatus('UPLOADERROR'))

--AND statemachinestatusid =
dbo.fn_GetStateMachineStatusId('READY')

--SELECT tileid, projectid, parentid, tiletype, tileorder, centerx,
centery, height, width, zindex, scale, rotation, isactive,

-- isnew, tileshape, tilecontenttype, gridlibrarytype,
backgroundcolor, syncid, blobstatusid, header,


-----

--FROM t_tilestatus --with(nolock)

--WHERE bookedby = @bookeby

SET NOCOUNT OFF

RETURN 0

GO

**[dbo].[p_storage_eraser_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@retry


-----

@statemachinestatusid

int

4

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_storage_eraser_unbook]

@tileid uniqueidentifier,

@retry int,

@statemachinestatusid int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON


-----

SET bookedby = null,

bookingdate = null,

retry = @retry,

statemachinestatusid = @statemachinestatusid

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_telemetry_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@TraceData


-----

2048

SQL Script

CREATE PROCEDURE [dbo].[p_telemetry_insert]

-- Add the parameters for the stored procedure here

(

@TraceData nvarchar(1024)

)

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

-- Insert statements for procedure here

INSERT INTO [dbo].[t_telemetrydata]

(CreationDateTime, LogEntry)

VALUES

(GETUTCDATE(), @TraceData)

END

GO


-----

[dbo].[t_telemetrydata]

**[dbo].[p_tile_relation_by_participating_tile]**

Parameters

Name

Data Type

Max Length (Bytes)

@requestedIds

TileStatusIdSet

max

SQL Script

-==================================

-- Author: Dennis Vroegop

-- Create Date: 05/07/2020

-- Description: Returns all relations that have one endpoint in a
given set

-==================================

CREATE PROCEDURE [dbo].[p_tile_relation_by_participating_tile]


-----

-- Add the parameters for the stored procedure here

@requestedIds [dbo].TileStatusIdSet READONLY

)

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON

DECLARE @projectId INT

SELECT @projectId = projectid FROM dbo.t_tilestatus WHERE
tileid = (SELECT TOP(1) TileId FROM @requestedIds)

;WITH tree AS (

SELECT

t1.tileid AS tileId,

t1.parentid AS parentId,

[level] = 1

FROM dbo.t_tilestatus t1

WHERE t1.parentid IS NULL

AND t1.projectid = @projectId

AND EXISTS


-----

UNION ALL

SELECT

t2.tileid AS tileID,

t2.parentid AS parentId,

[level] = tree.[level] +1

FROM dbo.t_tilestatus t2 INNER JOIN

tree ON tree.tileId = t2.parentid

WHERE t2.projectid = @projectId

)

SELECT r.tilerelationid,

r.projectid,

r.tileid,

r.related_tileid,

r.tilerelationstyleid,

r.tilerelationanchoridorigin,

r.tilerelationanchoriddestination,

r.tilerelationstartendsymbolorigin,

r.tilerelationstartendsymboldestination AS dest,

r.tilerelationlineid,


-----

r.thickness

FROM [dbo].t_tile_relation r

WHERE

EXISTS (SELECT tileId FROM tree WHERE TileId = r.tileid)

INTERSECT

SELECT r.tilerelationid,

r.projectid,

r.tileid,

r.related_tileid,

r.tilerelationstyleid,

r.tilerelationanchoridorigin,

r.tilerelationanchoriddestination,

r.tilerelationstartendsymbolorigin,

r.tilerelationstartendsymboldestination AS dest,

r.tilerelationlineid,

r.color,

r.thickness

FROM [dbo].t_tile_relation r

WHERE

EXISTS (SELECT tileId FROM tree WHERE TileId = r.related_tileid)


-----

SELECT r.tilerelationid,

r.projectid,

r.tileid,

r.related_tileid,

r.tilerelationstyleid,

r.tilerelationanchoridorigin,

r.tilerelationanchoriddestination,

r.tilerelationstartendsymbolorigin,

r.tilerelationstartendsymboldestination AS dest,

r.tilerelationlineid,

r.color,

r.thickness FROM [dbo].t_tile_relation r

WHERE EXISTS (SELECT TileId FROM @requestedIds WHERE
TileId = r.tileid)

INTERSECT

SELECT r.tilerelationid,

r.projectid,

r.tileid,

r.related_tileid,

r.tilerelationstyleid,

r.tilerelationanchoridorigin,


-----

r.tilerelationstartendsymbolorigin,

r.tilerelationstartendsymboldestination AS dest,

r.tilerelationlineid,

r.color,

r.thickness FROM [dbo].t_tile_relation r

WHERE EXISTS (SELECT TileId FROM @requestedIds WHERE
TileId = r.related_tileid)

END

GO

Uses

[dbo].[t_tile_relation]

[dbo].[t_tilestatus]

[dbo].[TileStatusIdSet]

**[dbo].[p_tile_relation_delete]**

Parameters

Name

Data Type


-----

Direction

@tilerelationid

int

4

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_tile_relation_delete]

@tilerelationid int,

@rows int = 0 output

AS

SET NOCOUNT ON

DELETE FROM t_tile_relation

WHERE tilerelationid = @tilerelationid

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF


-----

GO

Uses

[dbo].[t_tile_relation]

**[dbo].[p_tile_relation_delete_all_by_tileid]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@rows

int

4

Out


-----

@tileid uniqueidentifier,

@rows int = 0 output

AS

SET NOCOUNT ON

DELETE FROM t_tile_relation

WHERE tileid = @tileid

OR related_tileid = @tileid

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_relation]

**[dbo].[p_tile_relation_get_by_projectid]**

Parameters


-----

Max Length (Bytes)

@projectid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tile_relation_get_by_projectid]

@projectid int

AS

SET NOCOUNT ON

SELECT tilerelationid,

projectid,

tileid,

related_tileid,

tilerelationstyleid,

tilerelationanchoridorigin,

tilerelationanchoriddestination,

tilerelationstartendsymbolorigin,

tilerelationstartendsymboldestination as dest


-----

color,

thickness

FROM t_tile_relation WITH (NOLOCK)

WHERE projectid = @projectid

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_relation]

**[dbo].[p_tile_relation_get_by_projectid_paged]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int


-----

@pagesize

int

4

@pagenumber

int

4

@tocount

bit

1

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tile_relation_get_by_projectid_paged]

@projectid int,

@pagesize int


-----

@tocount bit,

@totalrows int = 0 output

AS

SET NOCOUNT ON

SELECT tilerelationid,

projectid,

tileid,

related_tileid,

tilerelationstyleid,

tilerelationanchoridorigin,

tilerelationanchoriddestination,

tilerelationstartendsymbolorigin,

tilerelationstartendsymboldestination as dest,

tilerelationlineid,

color,

thickness

FROM t_tile_relation WITH (NOLOCK)

WHERE projectid = @projectid

ORDER BY tilerelationid

OFFSET @pagesize * (@pagenumber - 1) ROWS


-----

IF(@tocount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM t_tile_relation WITH (NOLOCK)

WHERE projectid = @projectid

END

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_relation]

**[dbo].[p_tile_relation_insert]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

int

4

Out

@projectid

int

4

@tileid

uniqueidentifier

16

@related_tileid

uniqueidentifier

16

@tilerelationstyleid

int

4

@tilerelationanchoridorigin

int

4

@ il l i h idd i i


-----

@tilerelationstartendsymbolorigin

int

4

@dest

int

4

@tilerelationlineid

int

4

@color

nvarchar(7)

14

@thickness

int

4

@rows

int


-----

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tile_relation_insert]

@tilerelationid int output,

@projectid int,

@tileid uniqueidentifier,

@related_tileid uniqueidentifier,

@tilerelationstyleid int,

@tilerelationanchoridorigin int,

@tilerelationanchoriddestination int,

@tilerelationstartendsymbolorigin int,

@dest int,

@tilerelationlineid int,

@color nvarchar(7),

@thickness int,

@rows int = 0 output

AS

SET NOCOUNT ON

S O il l i


-----

projectid,

tileid,

related_tileid,

tilerelationstyleid,

tilerelationanchoridorigin,

tilerelationanchoriddestination,

tilerelationstartendsymbolorigin,

tilerelationstartendsymboldestination,

tilerelationlineid,

color,

thickness

)

values

(

@projectid,

@tileid,

@related_tileid,

@tilerelationstyleid,

@tilerelationanchoridorigin,

@tilerelationanchoriddestination,

@tilerelationstartendsymbolorigin,


-----

@tilerelationlineid,

@color,

@thickness

)

set @tilerelationid = @@IDENTITY

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_relation]

**[dbo].[p_tile_relation_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

@projectid

int

4

@tileid

uniqueidentifier

16

@related_tileid

uniqueidentifier

16

@tilerelationstyleid

int

4

@tilerelationanchoridorigin

int

4

@tilerelationanchoriddestination

int


-----

@tilerelationstartendsymbolorigin

int

4

@dest

int

4

@tilerelationlineid

int

4

@color

nvarchar(7)

14

@thickness

int

4

@rows

int


-----

SQL Script

CREATE PROCEDURE [dbo].[p_tile_relation_update]

@tilerelationid int,

@projectid int,

@tileid uniqueidentifier,

@related_tileid uniqueidentifier,

@tilerelationstyleid int,

@tilerelationanchoridorigin int,

@tilerelationanchoriddestination int,

@tilerelationstartendsymbolorigin int,

@dest int,

@tilerelationlineid int,

@color nvarchar(7),

@thickness int,

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t tile relation


-----

related_tileid = @related_tileid,

tilerelationstyleid = @tilerelationstyleid,

tilerelationanchoridorigin = @tilerelationanchoridorigin,

tilerelationanchoriddestination = @tilerelationanchoriddestination,

tilerelationstartendsymbolorigin =
@tilerelationstartendsymbolorigin,

tilerelationstartendsymboldestination = @dest,

tilerelationlineid = @tilerelationlineid,

color = @color,

thickness = @thickness

WHERE tilerelationid = @tilerelationid

AND projectid = @projectid

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_relation]

**[dbo].[p_tile_relation_with_tile]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@tileId

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [dbo].[p_tile_relation_with_tile]

(

-- Add the parameters for the stored procedure here

@tileId uniqueidentifier

)

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON

SELECT tilerelationid,

j id


-----

related_tileid,

tilerelationstyleid,

tilerelationanchoridorigin,

tilerelationanchoriddestination,

tilerelationstartendsymbolorigin,

tilerelationstartendsymboldestination AS dest,

tilerelationlineid,

color,

thickness FROM dbo.t_tile_relation

WHERE tileid = @tileId

UNION

SELECT tilerelationid,

projectid,

tileid,

related_tileid,

tilerelationstyleid,

tilerelationanchoridorigin,

tilerelationanchoriddestination,

tilerelationstartendsymbolorigin,

tilerelationstartendsymboldestination AS dest,

tilerelationlineid,


-----

thickness FROM dbo.t_tile_relation

WHERE related_tileid = @tileId

END

GO

Uses

[dbo].[t_tile_relation]

**[dbo].[p_tile_voting_get_by_projectid_and_user_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

@userid

int


-----

create PROCEDURE [dbo].

[p_tile_voting_get_by_projectid_and_user_id]

@projectid int,

@userid int

AS

SET NOCOUNT ON;

SELECT tileid,

rate,

thumb

FROM t_tile_voting with(nolock)

WHERE projectid = @projectid

AND userid = @userid

RETURN

GO

Uses

[dbo].[t_tile_voting]

**[dbo].[p_tile_voting_get_by_projectid_and_user_id_paged]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int

4

@userid

int

4

@pagesize

int

4

@pagenumber

int

4

@tocount

bit


-----

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].

[p_tile_voting_get_by_projectid_and_user_id_paged]

@projectid int,

@userid int,

@pagesize int,

@pagenumber int,

@tocount bit,

@totalrows int = 0 output

AS

SET NOCOUNT ON;

SELECT tileid,

rate,

thumb

FROM t_tile_voting with(nolock)

WHERE projectid = @projectid

AND userid = @userid


-----

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

IF(@tocount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM t_tile_voting with(nolock)

WHERE projectid = @projectid

AND userid = @userid

END

RETURN

GO

Uses

[dbo].[t_tile_voting]

**[dbo].[p_tile_voting_update]**

Parameters

Name


-----

Direction

@tileid

uniqueidentifier

16

@userid

int

4

@projectid

int

4

@rate

int

4

@thumb

decimal(18,9)

9

@thumbs

decimal(18,9)


-----

@ratingsum

int

4

Out

@ratingcount

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tile_voting_update]

@tileid uniqueidentifier,

@userid int,

@projectid int,

@rate int,

@thumb decimal(18,9),

@thumbs decimal(18,9) output,


-----

@ratingcount int output,

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_tile_voting

SET rate = @rate,

thumb = @thumb

WHERE tileid = @tileid

and userid = @userid

SET @rows = @@ROWCOUNT

IF @rows=0

BEGIN

INSERT INTO t_tile_voting (tileid, userid, projectid, rate, thumb)

VALUES (@tileid, @userid, @projectid, @rate, @thumb)

SET @rows = @@ROWCOUNT

END

IF @rows=1

BEGIN

SELECT @thumbs = SUM(thumb)


-----

SELECT @ratingsum = SUM(rate), @ratingcount = COUNT(tileid)

FROM t_tile_voting with (nolock)

WHERE tileid = @tileid

and rate <> 0

END

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_voting]

**[dbo].[p_tilecopy_cleanup]**

SQL Script

CREATE PROCEDURE [dbo].[p_tilecopy_cleanup]

AS

BEGIN


-----

BEGIN TRY

DECLARE @cutoffTime DATETIME

SET @cutoffTime =DATEADD(MINUTE, -5, GETUTCDATE())

DELETE FROM dbo.t_tilecopy_sourcetile

WHERE copyfinishedtimestamp < @cutoffTime

DELETE FROM dbo.t_tilecopy_copiedtile

WHERE copyfinishedtimestamp < @cutoffTime

DELETE FROM dbo.t_tilecopy_copiedrelation

WHERE copyfinishedtimestamp < @cutoffTime

COMMIT TRANSACTION p_tilecopy_cleanup;

END TRY

BEGIN CATCH

DECLARE @error INT,

@message VARCHAR(4000)

SELECT

@error = ERROR_NUMBER(),

@message = ERROR_MESSAGE()

ROLLBACK TRANSACTION p tilecopy cleanup;


-----

@message);

END CATCH

END

GO

Uses

[dbo].[t_tilecopy_copiedrelation]

[dbo].[t_tilecopy_copiedtile]

[dbo].[t_tilecopy_sourcetile]

**[dbo].[p_tilecopy_getcopiedtiles_by_token]**

Parameters

Name

Data Type

Max Length (Bytes)

@token

uniqueidentifier

16

@pageSize

int


-----

@pageNumber

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilecopy_getcopiedtiles_by_token]

-- Add the parameters for the stored procedure here

@token UNIQUEIDENTIFIER,

@pageSize INT,

@pageNumber INT

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

-- if the parameters are null, set them to respectively

-- MAXINT and 0 to not use pages

SET @pageSize = ISNULL(@pageSize, 2147483647)

SET @pageNumber = ISNULL(@pageNumber, 0)


-----

,[token]

,[copyfinishedtimestamp]

,[usernamecreator]

,[sourceprojectid]

,[targetprojectid]

,[tileid]

,[projectid]

,[parentid]

,[tiletype]

,[tilecontent]

,[positionx]

,[positiony]

,[height]

,[width]

,[zindex]

,[scalex]

,[scaley]

,[rotation]

,[totalthumbup]

,[totlathumbdown]

,[overallrating]


-----

,[ispinned]

,[backgroundcolor]

,[originalfilename]

,[lockeduser]

,[lockedby]

,[lockeddate]

,[lastupdate]

,[blobstatusid]

,[oldId]

,[bookedby]

,[bookingdate]

,[retry]

,[statemachinestatusid]

FROM [dbo].[t_tilecopy_copiedtile]

WHERE [token] = @token

ORDER BY [copyfinishedtimestamp]

OFFSET @pageSize * (@pageNumber-1) ROWS FETCH NEXT
@pageSize ROWS ONLY

END

GO


-----

[dbo].[t_tilecopy_copiedtile]

**[dbo].[p_tilecopy_getrelations_by_token]**

Parameters

Name

Data Type

Max Length (Bytes)

@token

uniqueidentifier

16

@pageSize

int

4

@pageNumber

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilecopy_getrelations_by_token]


-----

@pageSize INT,

@pageNumber INT

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

-- if the parameters are null, set them to respectively

-- MAXINT and 0 to not use pages

SET @pageSize = ISNULL(@pageSize, 2147483647)

SET @pageNumber = ISNULL(@pageNumber, 0)

SELECT [id]

,[token]

,[copyfinishedtimestamp]

,[usernamecreator]

,[sourceprojectid]

,[targetprojectid]

,[tilerelationid]

,[projectid]


-----

,[tilerelationstyleid]

,[tilerelationanchoridorigin]

,[tilerelationanchoriddestination]

,[tilerelationstartendsymbolorigin]

,[tilerelationstartendsymboldestination]

,[tilerelationlineid]

,[color]

,[thickness]

FROM [dbo].[t_tilecopy_copiedrelation]

WHERE [token] = @token

ORDER BY [copyfinishedtimestamp]

OFFSET @pageSize * (@pageNumber-1) ROWS FETCH NEXT
@pageSize ROWS ONLY

END

GO

Uses

[dbo].[t_tilecopy_copiedrelation]

**[dbo].[p_tilecopy_getsourcetiles_by_token]**


-----

Name

Data Type

Max Length (Bytes)

@token

uniqueidentifier

16

@pageSize

int

4

@pageNumber

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilecopy_getsourcetiles_by_token]

-- Add the parameters for the stored procedure here

@token UNIQUEIDENTIFIER,

@pageSize INT,

@pageNumber INT

AS


-----

-- interfering with SELECT statements.

SET NOCOUNT ON;

-- if the parameters are null, set them to respectively

-- MAXINT and 0 to not use pages

SET @pageSize = ISNULL(@pageSize, 2147483647)

SET @pageNumber = ISNULL(@pageNumber, 0)

SELECT [id]

,[token]

,[copyfinishedtimestamp]

,[usernamecreator]

,[sourceprojectid]

,[targetprojectid]

,[tileid]

FROM [dbo].[t_tilecopy_sourcetile]

WHERE [token] = @token

ORDER BY [copyfinishedtimestamp]

OFFSET @pageSize * (@pageNumber-1) ROWS FETCH NEXT
@pageSize ROWS ONLY

END

GO


-----

Uses

[dbo].[t_tilecopy_sourcetile]

**[dbo].[p_tilecopy_insertcopiedtile]**

Parameters

Name

Data Type

Max Length (Bytes)

@token

uniqueidentifier

16

@copyfinishedtimestamp

datetime

8

@usernamecreator

nvarchar(50)

100

@sourceprojectid

int


-----

int

4

@tileid

uniqueidentifier

16

@projectid

int

4

@parentid

uniqueidentifier

16

@tiletype

int

4

@tilecontent

nvarchar(max)

max

@positionx

float

8

@positiony


-----

@height

float

8

@width

float

8

@zindex

int

4

@scalex

float

8

@scaley

float

8

@rotation

float

8

@totalthumbup

int


-----

@totalthumbdown

int

4

@overallrating

decimal(2,1)

5

@totalrates

int

4

@ispinned

bit

1

@backgroundcolor

nvarchar(7)

14

@originalfilename

nvarchar(255)

510

@lockeduser

nvarchar(50)

100


-----

nvarchar(50)

100

@lockeddate

datetime

8

@lastupdate

datetime

8

@blobstatusid

int

4

@oldId

uniqueidentifier

16

@bookedby

uniqueidentifier

16

@bookingdate

datetime

8

@retry


-----

@statemachinestatusid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilecopy_insertcopiedtile]

-- Add the parameters for the stored procedure here

@token [UNIQUEIDENTIFIER],

@copyfinishedtimestamp [DATETIME],

@usernamecreator [NVARCHAR](50),

@sourceprojectid [INT],

@targetprojectid [INT],

@tileid [UNIQUEIDENTIFIER],

@projectid [INT],

@parentid [UNIQUEIDENTIFIER],

@tiletype [INT],

@tilecontent [NVARCHAR](MAX),

@positionx [FLOAT],

@positiony [FLOAT],


-----

@zindex [INT],

@scalex [FLOAT],

@scaley [FLOAT],

@rotation [FLOAT],

@totalthumbup [INT],

@totalthumbdown [INT],

@overallrating [DECIMAL](2, 1),

@totalrates [INT],

@ispinned [BIT],

@backgroundcolor [NVARCHAR](7),

@originalfilename [NVARCHAR](255),

@lockeduser [NVARCHAR](50),

@lockedby [NVARCHAR](50),

@lockeddate [DATETIME],

@lastupdate [DATETIME],

@blobstatusid [INT],

@oldId UNIQUEIDENTIFIER,

@bookedby [UNIQUEIDENTIFIER],

@bookingdate [DATETIME],

@retry [INT],

@statemachinestatusid [INT]


-----

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

-- Insert statements for procedure here

INSERT INTO [dbo].[t_tilecopy_copiedtile]

([token]

,[copyfinishedtimestamp]

,[usernamecreator]

,[sourceprojectid]

,[targetprojectid]

,[tileid]

,[projectid]

,[parentid]

,[tiletype]

,[tilecontent]

,[positionx]

,[positiony]

,[height]

,[width]


-----

,[scaley]

,[rotation]

,[totalthumbup]

,[totlathumbdown]

,[overallrating]

,[totalrates]

,[ispinned]

,[backgroundcolor]

,[originalfilename]

,[lockeduser]

,[lockedby]

,[lockeddate]

,[lastupdate]

,[blobstatusid]

,[oldId]

,[bookedby]

,[bookingdate]

,[retry]

,[statemachinestatusid])

VALUES


-----

,@copyfinishedtimestamp

,@usernamecreator

,@sourceprojectid

,@targetprojectid

,@tileid

,@projectid

,@parentid

,@tiletype

,@tilecontent

,@positionx

,@positiony

,@height

,@width

,@zindex

,@scalex

,@scaley

,@rotation

,@totalthumbup

,@totalthumbdown

,@overallrating

,@totalrates


-----

,@backgroundcolor

,@originalfilename

,@lockeduser

,@lockedby

,@lockeddate

,@lastupdate

,@blobstatusid

,@oldId

,@bookedby

,@bookingdate

,@retry

,@statemachinestatusid

)

END

GO

Uses

[dbo].[t_tilecopy_copiedtile]

**[dbo].[p_tilecopy_insertrelation]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@token

uniqueidentifier

16

@copyfinishedtimestamp

datetime

8

@usernamecreator

nvarchar(50)

100

@sourceprojectid

int

4

@targetprojectid

int

4

@tilerelationid

int


-----

int

4

@tileid

uniqueidentifier

16

@related_tileid

uniqueidentifier

16

@tilerelationstyleid

int

4

@tilerelationanchoridorigin

int

4

@tilerelationanchoriddestination

int

4

@tilerelationstartendsymbolorigin

int

4

@tilerelationstartendsymboldestination


-----

@tilerelationlineid

int

4

@color

nvarchar(7)

14

@thickness

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilecopy_insertrelation]

@token [UNIQUEIDENTIFIER] ,

@copyfinishedtimestamp [DATETIME] ,

@usernamecreator [NVARCHAR](50),

@sourceprojectid [INT] ,

@targetprojectid [INT] ,

@tilerelationid [INT] ,

@projectid [INT] ,

@tileid [UNIQUEIDENTIFIER] ,


-----

@tilerelationanchoridorigin [INT] ,

@tilerelationanchoriddestination [INT] ,

@tilerelationstartendsymbolorigin [INT] ,

@tilerelationstartendsymboldestination [INT] ,

@tilerelationlineid [INT] ,

@color [NVARCHAR](7) ,

@thickness [INT]

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

INSERT INTO [dbo].[t_tilecopy_copiedrelation]

(

[token]

,[copyfinishedtimestamp]

,[usernamecreator]

,[sourceprojectid]

,[targetprojectid]

,[tilerelationid]


-----

,[related_tileid]

,[tilerelationstyleid]

,[tilerelationanchoridorigin]

,[tilerelationanchoriddestination]

,[tilerelationstartendsymbolorigin]

,[tilerelationstartendsymboldestination]

,[tilerelationlineid]

,[color]

,[thickness]

)

VALUES

(

@token,

@copyfinishedtimestamp,

@usernamecreator,

@sourceprojectid,

@targetprojectid,

@tilerelationid,

@projectid ,

@tileid ,

@related tileid ,


-----

@tilerelationanchoridorigin ,

@tilerelationanchoriddestination ,

@tilerelationstartendsymbolorigin ,

@tilerelationstartendsymboldestination ,

@tilerelationlineid ,

@color ,

@thickness

)

END

GO

Uses

[dbo].[t_tilecopy_copiedrelation]

**[dbo].[p_tilecopy_insertsourcetile]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

uniqueidentifier

16

@copyfinishedtimestamp

datetime

8

@usernamecreator

nvarchar(50)

100

@sourceprojectid

int

4

@targetprojectid

int

4

@tileid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [dbo].[p_tilecopy_insertsourcetile]

-- Add the parameters for the stored procedure here


-----

@copyfinishedtimestamp [datetime],

@usernamecreator [nvarchar](50),

@sourceprojectid [int],

@targetprojectid [int],

@tileid [uniqueidentifier]

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

INSERT INTO [dbo].[t_tilecopy_sourcetile]

([token]

,[copyfinishedtimestamp]

,[usernamecreator]

,[sourceprojectid]

,[targetprojectid]

,[tileid])

VALUES

(

@token,i


-----

@sourceprojectid,

@targetprojectid,

@tileid

)

END

GO

Uses

[dbo].[t_tilecopy_sourcetile]

**[dbo].[p_tilestatus_copy_book]**

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_copy_book]

AS BEGIN

DECLARE @booked_by UNIQUEIDENTIFIER

SET @booked_by = NEWID()

DECLARE @booking_date DATETIME

SET @booking_date = GETUTCDATE()


-----

UPDATE TOP(1) dbo.t_tilestatus_copy_booking

SET bookedby=@booked_by,

bookingdate = @booking_date,

lastupdate = @booking_date,

statemachinestatusid =

[dbo].fn_GetStateMachineStatusId('working')

WHERE statemachinestatusid =

[dbo].fn_GetStateMachineStatusId('ready')

IF @@ROWCOUNT > 0

BEGIN

SELECT Id,

username,

sourceprojectid,

destinationprojectid,

tilesandpositions,

tileoffsetx,

tileoffsety,

clientconnectionid,

appver,

uniquedeviceid,

bookedby,

bookingdate,


-----

FROM dbo.t_tilestatus_copy_booking

WHERE bookedby=@booked_by

END

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_tilestatus_copy_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_tilestatus_copy_fallback]**

Parameters

Name

Data Type

Max Length (Bytes)

@max_retries

int


-----

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_copy_fallback]

@max_retries int,

@booking_elapsed_time_in_sec int

AS

BEGIN

DECLARE @lastupdate DATETIME

SET @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE dbo.t_tilestatus_copy_booking

SET bookedby=null,

bookingdate = null,

lastupdate = @lastupdate,

retry = retry + 1,

statemachinestatusid = CASE WHEN (retry >= @max_retries)

THEN dbo.fn_GetStateMachineStatusId('ERROR')


-----

END

WHERE statemachinestatusid =
dbo.fn_GetStateMachineStatusId('WORKING')

AND DATEDIFF(SECOND, bookingdate, GETUTCDATE()) >=
@booking_elapsed_time_in_sec

END

GO

Uses

[dbo].[t_tilestatus_copy_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_tilestatus_copy_history]**

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_copy_history]

AS

BEGIN

INSERT [dbo].[t_tilestatus_copy_booking_history]


-----

[username],

[sourceprojectid],

[destinationprojectid],

[tilesandpositions],

[tileoffsetx],

[tileoffsety],

[clientconnectionid],

[appver],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],

[retry],

[statemachinestatusid]

)

SELECT

[Id],

[creationdate],

[username],

[sourceprojectid],

[destinationprojectid],


-----

[tileoffsetx],

[tileoffsety],

[clientconnectionid],

[appver],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],

[retry],

[statemachinestatusid]

FROM

(

DELETE [dbo].[t_tilestatus_copy_booking]

OUTPUT

DELETED.[Id],

DELETED.[creationdate],

DELETED.[username],

DELETED.[sourceprojectid],

DELETED.[destinationprojectid],

DELETED.[tilesandpositions],

DELETED.[tileoffsetx],


-----

DELETED.[clientconnectionid],

DELETED.[appver],

DELETED.[uniquedeviceid],

DELETED.[bookedby],

DELETED.[lastupdate],

DELETED.[bookingdate],

DELETED.[retry],

DELETED.[statemachinestatusid]

WHERE [statemachinestatusid] >=

[dbo].fn_GetStateMachineStatusId('FINISHED')

) AS RowsToMove ;

END

GO

Uses

[dbo].[t_tilestatus_copy_booking]

[dbo].[t_tilestatus_copy_booking_history]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_tilestatus_copy_history_search]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@sourceProjectId

int

4

@destinationProjectId

int

4

@pagesize

int

4

@pagenumber

int

4

@wantsCount

bit


-----

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_copy_history_search]

@sourceProjectId int,

@destinationProjectId int,

@pagesize int,

@pagenumber int,

@wantsCount bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT [Id],

[creationdate],

[username],

[sourceprojectid],

[destinationprojectid],

[tilesandpositions],

[tileoffsetx],


-----

[clientconnectionid],

[appver],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],

[retry],

[statemachinestatusid]

FROM [dbo].[t_tilestatus_copy_booking_history] WITH (NOLOCK)

WHERE ((@sourceProjectId IS NULL) OR (sourceprojectid =
@sourceProjectId))

AND ((@destinationProjectId IS NULL) OR (destinationprojectid =
@destinationProjectId))

ORDER BY [id]

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

IF (@wantsCount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM [dbo].[t_tilestatus_copy_booking_history] WITH (NOLOCK)

WHERE ((@sourceProjectId IS NULL) OR (sourceprojectid =
@sourceProjectId))


-----

@destinationProjectId))

END ELSE BEGIN

SET @totalrows = 0

END

END

GO

Uses

[dbo].[t_tilestatus_copy_booking_history]

**[dbo].[p_tilestatus_copy_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@username

nvarchar(200)

400

@sourceprojectid

int


-----

@destinationprojectid

int

4

@tilesandpositions

nvarchar(max)

max

@tileoffsetx

float

8

@tileoffsety

float

8

@clientconnectionid

nvarchar(50)

100

@appver

nvarchar(50)

100

@deviceId

uniqueidentifier

16


-----

CREATE PROCEDURE [dbo].[p_tilestatus_copy_insert]

@username NVARCHAR(200),

@sourceprojectid INT,

@destinationprojectid INT,

@tilesandpositions NVARCHAR(MAX),

@tileoffsetx float,

@tileoffsety float,

@clientconnectionid NVARCHAR(50),

@appver NVARCHAR(50),

@deviceId UNIQUEIDENTIFIER

AS

BEGIN

DECLARE @statemachinestatusid INT

SET @statemachinestatusid =
dbo.fn_GetStateMachineStatusId('ready')

INSERT INTO [t_tilestatus_copy_booking]

(

[username],

[sourceprojectid],


-----

[tileoffsetx],

[tileoffsety],

[clientconnectionid],

[appver],

[uniquedeviceid],

[lastupdate],

[bookedby],

[bookingdate],

[retry],

[statemachinestatusid]

)

VALUES

(

@username,

@sourceprojectid,

@destinationprojectid,

@tilesandpositions,

@tileoffsetx,

@tileoffsety,

@clientconnectionid,

@appver,


-----

GETUTCDATE(),

NULL,

NULL,

0,

@statemachinestatusid

)

END

RETURN 0

GO

Uses

[dbo].[t_tilestatus_copy_booking]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_tilestatus_copy_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

int

4

@retries

int

4

@statemachinestatusid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_copy_unbook]

@id INT,

@retries INT,

@statemachinestatusid INT

AS

SET NOCOUNT ON

UPDATE dbo.t_tilestatus_copy_booking

SET

bookedby=NULL,

bookingdate=NULL,

retry=@retries,


-----

lastupdate = GETUTCDATE()

WHERE

Id=@id

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus_copy_booking]

**[dbo].[p_tilestatus_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16


-----

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_delete]

@tileid uniqueidentifier,

@rows int = 0 output

AS

--SET NOCOUNT ON

--DELETE

--FROM t_tilestatus

-- WHERE tileid = @tileid

--set @rows = @@ROWCOUNT

--SET NOCOUNT OFF

--this stored procedure it is not used any more we shall clean up...

SET NOCOUNT ON

BEGIN TRANSACTION;

DELETE


-----

WHERE tileid = @tileid

DELETE

FROM t_tile_relation

WHERE related_tileid = @tileid

DELETE

FROM t_tile_voting

WHERE tileid = @tileid

DELETE

FROM t_tilestatus

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_relation]

[dbo] [t tile voting]


-----

**[dbo].[p_tilestatus_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@tileid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_get_by_id]

@tileid UNIQUEIDENTIFIER

AS

SET NOCOUNT ON;

SELECT tileid,

projectid,

parentid,


-----

tilecontent,

positionx,

positiony,

height,

width,

zindex,

scalex,

scaley,

rotation,

ispinned,

backgroundcolor,

blobstatusid,

totalthumbup,

totlathumbdown,

overallrating,

totalrates,

lockeduser,

lockedby,

lockeddate,

lastupdate,

bookedby,


-----

retry,

statemachinestatusid,

originalfilename

FROM t_tilestatus WITH(NOLOCK)

WHERE tileid = @tileid

RETURN

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_get_by_parenttile]**

Parameters

Name

Data Type

Max Length (Bytes)

@parentId

uniqueidentifier

16


-----

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_get_by_parenttile]

@parentId UNIQUEIDENTIFIER,

@tileType INT

AS

SET NOCOUNT ON;

SELECT tileid,

parentid,

projectid,

tiletype,

tilecontent,

positionx,

positiony,

height,

width,

zindex,

scalex,

scaley,


-----

ispinned,

backgroundcolor,

blobstatusid,

totalthumbup,

totlathumbdown,

overallrating,

totalrates,

lockeduser,

lockedby,

lockeddate,

lastupdate,

bookedby,

bookingdate,

retry,

statemachinestatusid,

originalfilename

FROM t_tilestatus WITH(NOLOCK)

WHERE parentid = @parentId

AND tiletype = @tileType

RETURN 0


-----

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_get_by_projectid]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_get_by_projectid]

@projectid int

AS

SET NOCOUNT ON;

SELECT tileid,

parentid,


-----

projectid,

tilecontent,

positionx,

positiony,

height,

width,

zindex,

scalex,

scaley,

rotation,

ispinned,

backgroundcolor,

blobstatusid,

totalthumbup,

totlathumbdown,

overallrating,

totalrates,

lockeduser,

lockedby,

lockeddate,

lastupdate,


-----

bookingdate,

retry,

statemachinestatusid,

originalfilename

FROM t_tilestatus with(nolock)

WHERE projectid = @projectid

AND blobstatusid < dbo.fn_GetBlobStatus('UploadError')

AND tiletype <> dbo.fn_GetTileType('Thumbnail')

RETURN

GO

Uses

[dbo].[t_tilestatus]

[dbo].[fn_GetBlobStatus]

[dbo].[fn_GetTileType]

**[dbo].[p_tilestatus_get_by_projectid_paged]**

Parameters

Name


-----

Direction

@projectid

int

4

@pagesize

int

4

@pagenumber

int

4

@tocount

bit

1

@totalrows

int

4

Out

SQL Script


-----

@projectid int,

@pagesize int,

@pagenumber int,

@tocount bit,

@totalrows int = 0 output

AS

SET NOCOUNT ON;

SELECT tileid,

parentid,

tiletype,

tilecontent,

positionx,

positiony,

height,

width,

zindex,

scalex,

scaley,

rotation,

ispinned,


-----

totalthumbup,

totlathumbdown,

overallrating,

totalrates,

lockeduser,

lockedby,

lockeddate,

lastupdate,

bookedby,

bookingdate,

retry,

statemachinestatusid,

originalfilename

FROM t_tilestatus with(nolock)

WHERE projectid = @projectid

AND blobstatusid < dbo.fn_GetBlobStatus('UploadError')

AND tiletype <> dbo.fn_GetTileType('Thumbnail')

ORDER BY tileid

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;


-----

SELECT @totalrows = count(1)

FROM t_tilestatus with(nolock)

WHERE projectid = @projectid

AND blobstatusid < dbo.fn_GetBlobStatus('UploadError')

AND tiletype <> dbo.fn_GetTileType('Thumbnail')

END

RETURN

GO

Uses

[dbo].[t_tilestatus]

[dbo].[fn_GetBlobStatus]

[dbo].[fn_GetTileType]

**[dbo].[p_tilestatus_get_by_projectid_with_thumbnails]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

SQL Script

CREATE PROCEDURE [dbo].

[p_tilestatus_get_by_projectid_with_thumbnails]

@projectid INT

AS

SET NOCOUNT ON;

SELECT tileid,

parentid,

tiletype,

projectid,

tilecontent,

positionx,

positiony,

height,

width,

zindex,

scalex,

scaley,

rotation,


-----

backgroundcolor,

blobstatusid,

totalthumbup,

totlathumbdown,

overallrating,

totalrates,

lockeduser,

lockedby,

lockeddate,

lastupdate,

bookedby,

bookingdate,

retry,

statemachinestatusid,

originalfilename

FROM t_tilestatus WITH(NOLOCK)

WHERE projectid = @projectid

AND blobstatusid < dbo.fn_GetBlobStatus('UploadError')

RETURN 0

GO


-----

[dbo].[t_tilestatus]

[dbo].[fn_GetBlobStatus]

**[dbo].[p_tilestatus_get_max_zindex]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectId

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_get_max_zindex]

@projectId INT

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;


-----

SELECT MAX(zindex) FROM dbo.t_tilestatus

WHERE projectid=@projectId

END

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_get_thumbnails_for_tile]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@parentId

uniqueidentifier

16

@start

int


-----

@end

int

4

@totalThumbnails

int

4

Out

SQL Script

-==================================

-- Author: Dennis Vroegop

-- Create date: 04/05/2020

-- Description: Returns a subset of the thumbnails for a tile

-==================================

CREATE PROCEDURE [dbo].[p_tilestatus_get_thumbnails_for_tile]

-- Add the parameters for the stored procedure here

@parentId UNIQUEIDENTIFIER,

@start INT = 0,

@end INT = 0,


-----

AS

BEGIN

SET NOCOUNT ON

SELECT tileid, JSON_VALUE(tilecontent, '$.SequenceNumber')

[index] FROM dbo.t_tilestatus

WHERE parentid = @parentId

AND JSON_VALUE(tilecontent, '$.SequenceNumber') >= @start

AND JSON_VALUE(tilecontent, '$.SequenceNumber') <= @end

AND tiletype = [dbo].fn_GetTileType('Thumbnail')

ORDER BY JSON_VALUE(tilecontent, '$.SequenceNumber') ASC

SET NOCOUNT OFF

SELECT @totalThumbnails = COUNT(*) FROM dbo.t_tilestatus
WITH (NOLOCK) WHERE parentid = @parentId AND blobstatusid
<> [dbo].fn_GetBlobStatus('Deleted')

RETURN 0

END

GO

Uses

[db ] [ il ]


-----

[dbo].[fn_GetTileType]

**[dbo].[p_tilestatus_get_toplevel_by_projectid]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_get_toplevel_by_projectid]

@projectid INT

AS

BEGIN

SET NOCOUNT ON

SELECT

tileid


-----

WHERE

projectid = @projectid

AND parentid IS NULL

RETURN 0

END

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_get_upgradable_for_project]**

Parameters

Name

Data Type

Max Length (Bytes)

@projectid

int


-----

CREATE PROCEDURE [dbo].

[p_tilestatus_get_upgradable_for_project]

@projectid INT

AS

BEGIN

SELECT tileid,

tiletype,

tilecontent,

originalfilename FROM dbo.t_tilestatus WITH (NOLOCK)

WHERE

projectid=@projectid

AND

blobstatusid <> dbo.fn_GetBlobStatus('deleted')

AND

(

tiletype = dbo.fn_GetTileType('Image')

OR

tiletype = dbo.fn_GetTileType('PDF')

OR

tiletype = dbo.fn_GetTileType('Video')

OR


-----

OR

tiletype = dbo.fn_GetTileType('Word')

OR

tiletype = dbo.fn_GetTileType('Excel')

OR

tiletype = dbo.fn_GetTileType('PowerPoint')

OR

tiletype = dbo.fn_GetTileType('Thumbnail')

)

END

RETURN 0

GO

Uses

[dbo].[t_tilestatus]

[dbo].[fn_GetBlobStatus]

[dbo].[fn_GetTileType]

**[dbo].[p_tilestatus_gettree_by_id]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@requestedIds

TileStatusIdSet

max

@includeDeleted

bit

1

SQL Script

-==================================

-- Author: Dennis Vroegop

-- Create Date: 07/05/2020

-- Description: Returns a tile and it's children

-==================================

CREATE PROCEDURE [dbo].[p_tilestatus_gettree_by_id]

(

-- Add the parameters for the stored procedure here

@requestedIds [dbo].TileStatusIdSet READONLY ,


-----

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON

DECLARE @projectId INT

SELECT @projectId = projectid FROM dbo.t_tilestatus WHERE
tileid = (SELECT TOP(1) TileId FROM @requestedIds)

;WITH tree AS (

SELECT

t1.tileid,

t1.projectid,

t1.parentid,

t1.tiletype,

t1.tilecontent,

t1.positionx,

t1.positiony,

t1.height,


-----

t1.scalex,

t1.scaley,

t1.rotation,

t1.totalthumbup,

t1.totlathumbdown,

t1.overallrating,

t1.totalrates,

t1.ispinned,

t1.backgroundcolor,

t1.lockeduser,

t1.lockedby,

t1.lockeddate,

t1.lastupdate,

t1.blobstatusid,

t1.bookedby,

t1.bookingdate,

t1.retry,

t1.statemachinestatusid ,

t1.originalfilename,

[level] = 1

FROM dbo.t tilestatus t1


-----

AND t1.projectid = @projectId

AND EXISTS

(SELECT TileId FROM @requestedIds WHERE t1.tileid = TileId)

UNION ALL

SELECT

t2.tileid,

t2.projectid,

t2.parentid,

t2.tiletype,

t2.tilecontent,

t2.positionx,

t2.positiony,

t2.height,

t2.width,

t2.zindex,

t2.scalex,

t2.scaley,

t2.rotation,

t2.totalthumbup,


-----

t2.totalrates,

t2.ispinned,

t2.backgroundcolor,

t2.lockeduser,

t2.lockedby,

t2.lockeddate,

t2.lastupdate,

t2.blobstatusid,

t2.bookedby,

t2.bookingdate,

t2.retry,

t2.statemachinestatusid,

t2.originalfilename,

[level] = tree.[level] +1

FROM dbo.t_tilestatus t2 INNER JOIN

tree ON tree.tileid = t2.parentid

WHERE t2.projectid = @projectId

)

-- Check to see if we need to include the deleted ones as well or not.

SELECT


-----

tree.parentid,

tree.tiletype,

tree.tilecontent,

tree.positionx,

tree.positiony,

tree.height,

tree.width,

tree.zindex,

tree.scalex,

tree.scaley,

tree.rotation,

tree.totalthumbup,

tree.totlathumbdown,

tree.overallrating,

tree.totalrates,

tree.ispinned,

tree.backgroundcolor,

tree.lockeduser,

tree.lockedby,

tree.lockeddate,

tree.lastupdate,


-----

tree.bookedby,

tree.bookingdate,

tree.retry,

tree.statemachinestatusid,

tree.originalfilename

FROM tree

WHERE

@includeDeleted = 1

OR (@includeDeleted = 0 AND tree.blobstatusid <>
dbo.fn_GetBlobStatus('deleted'))

END

GO

Uses

[dbo].[t_tilestatus]

[dbo].[fn_GetBlobStatus]

[dbo].[TileStatusIdSet]

**[dbo].[p_tilestatus_insert]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@projectid

int

4

@parentid

uniqueidentifier

16

@tiletype

int

4

@tilecontent

nvarchar(max)

max


-----

float

8

@positiony

float

8

@height

float

8

@width

float

8

@zindex

int

4

@scalex

float

8

@scaley


-----

@rotation

float

8

@ispinned

bit

1

@backgroundcolor

nvarchar(7)

14

@blobstatusid

int

4

@lockeduser

nvarchar(50)

100

@lockedby

nvarchar(50)


-----

@lockeddate

datetime

8

@originalfilename

nvarchar(255)

510

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_insert]

@tileid uniqueidentifier,

@projectid int,

@parentid uniqueidentifier,

@tiletype int,

@tilecontent nvarchar(max),

@positionx float,

@positiony float,


-----

@width float,

@zindex int,

@scalex float,

@scaley float,

@rotation float,

@ispinned bit,

@backgroundcolor nvarchar(7),

@blobstatusid int,

@lockeduser nvarchar(50),

@lockedby nvarchar(50),

@lockeddate datetime,

@originalfilename NVARCHAR(255),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

declare @RET_VAL INT

SET @RET_VAL = 0

SET NOCOUNT ON


-----

BEGIN

IF NOT EXISTS ( SELECT 1

FROM t_tilestatus

WHERE tileid = @tileid)

BEGIN

INSERT INTO t_tilestatus

(

tileid,

projectid,

parentid,

tiletype,

tilecontent,

positionx,

positiony,

height,

width,

zindex,

scalex,

scaley,

rotation,

ispinned,


-----

lockeduser,

lockedby,

lockeddate,

lastupdate,

originalfilename

)

--OUTPUT inserted.projectid

VALUES

(

@tileid,

@projectid,

@parentid,

@tiletype,

@tilecontent,

@positionx,

@positiony,

@height,

@width,

@zindex,

@scalex,

@scaley,


-----

@ispinned,

@backgroundcolor,

@blobstatusid,

@lockeduser,

@lockedby,

@lockeddate,

@lastupdate,

@originalfilename

)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

ELSE

BEGIN

SET @RET_VAL = -1

END

END

RETURN @RET_VAL

GO


-----

**[dbo].[p_tilestatus_stroke_by_tileid]**

Parameters

Name

Data Type

Max Length (Bytes)

@tileid

uniqueidentifier

16

SQL Script

create PROCEDURE [dbo].[p_tilestatus_stroke_by_tileid]

@tileid uniqueidentifier

AS

SET NOCOUNT ON;

SELECT tilestatusstrokeid,

stroke

FROM t_tilestatus_stroke with(nolock)

WHERE tileid = @tileid


-----

GO

Uses

[dbo].[t_tilestatus_stroke]

**[dbo].[p_tilestatus_stroke_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tilestatusstrokeid

uniqueidentifier

16

@tileid

uniqueidentifier

16

@stroke


-----

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_stroke_insert]

@tilestatusstrokeid uniqueidentifier,

@tileid uniqueidentifier,

@stroke varbinary(max),

@rows int = 0 output

AS

SET NOCOUNT ON

SET @rows = 0

INSERT INTO t_tilestatus_stroke

(

tilestatusstrokeid,

tileid,

stroke


-----

@tilestatusstrokeid,

@tileid,

@stroke

)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus_stroke]

**[dbo].[p_tilestatus_stroke_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

uniqueidentifier

16

@tileid

uniqueidentifier

16

@stroke

varbinary(max)

max

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_tilestatus_stroke_update]

@tilestatusstrokeid uniqueidentifier,

@tileid uniqueidentifier,

@stroke varbinary(max),


-----

AS

SET NOCOUNT ON

UPDATE t_tilestatus_stroke

SET stroke = @stroke

WHERE tilestatusstrokeid = @tilestatusstrokeid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus_stroke]

**[dbo].[p_tilestatus_unlock_by_ids]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

TileStatusIdSet

max

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_unlock_by_ids]

-- Add the parameters for the stored procedure here

@ids [dbo].TileStatusIdSet READONLY

AS

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

-- Insert statements for procedure here

UPDATE dbo.t_tilestatus

SET lockeduser=NULL,

lockedby=NULL,

lockeddate= NULL

FROM dbo.t_tilestatus AS ts

INNER JOIN @ids AS p ON ts.tileid = p.TileId

END


-----

Uses

[dbo].[t_tilestatus]

[dbo].[TileStatusIdSet]

**[dbo].[p_tilestatus_unlock_by_lockedby]**

Parameters

Name

Data Type

Max Length (Bytes)

@lockedby

nvarchar(50)

100

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_unlock_by_lockedby]

@lockedby nvarchar(50)

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()


-----

UPDATE t_tilestatus

SET lockeduser = null,

lockedby = null,

lockeddate = null,

lastupdate = @lastupdate

OUTPUT INSERTED.tileid

WHERE lockedby = @lockedby

RETURN 0

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_unlock_by_project_lockedby]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

nvarchar(50)

100

@projectid

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].

[p_tilestatus_unlock_by_project_lockedby]

@lockedby nvarchar(50),

@projectid int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SELECT tileid,


-----

tiletype,

tilecontent,

positionx,

positiony,

height,

width,

zindex,

scalex,

scaley,

rotation,

ispinned,

backgroundcolor,

blobstatusid,

lockeduser,

lockedby,

lockeddate,

lastupdate,

bookedby,

bookingdate,

retry,

statemachinestatusid,


-----

FROM t_tilestatus

WHERE projectid = @projectid

AND lockedby = @lockedby

SET NOCOUNT ON

UPDATE t_tilestatus

SET lockeduser = null,

lockedby = null,

lockeddate = null,

lastupdate = @lastupdate

WHERE projectid = @projectid

AND lockedby = @lockedby

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_unlock_forgot]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_unlock_forgot]

@rows int = 0 output

AS

declare @lastupdate smalldatetime

set @lastupdate = GETUTCDATE()

UPDATE t_tilestatus

SET lastupdate = @lastupdate,

lockeduser = null,

lockedby = null,


-----

WHERE lockedby is not null

AND lockedby not in

(

SELECT connectionid FROM t_online_user with (nolock)

)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_online_user]

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@tileid

uniqueidentifier

16

@projectid

int

4

@parentid

uniqueidentifier

16

@tiletype

int

4

@tilecontent

nvarchar(max)

max

@positionx

float


-----

float

8

@height

float

8

@width

float

8

@zindex

int

4

@scalex

float

8

@scaley

float

8

@rotation


-----

@ispinned

bit

1

@backgroundcolor

nvarchar(7)

14

@blobstatusid

int

4

@lockeduser

nvarchar(50)

100

@lockedby

nvarchar(50)

100

@lockeddate

datetime


-----

@connectionid

nvarchar(50)

100

@originalfilename

nvarchar(255)

510

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_update]

@tileid uniqueidentifier,

@projectid int,

@parentid uniqueidentifier,

@tiletype int,

@tilecontent nvarchar(max),


-----

@positiony float,

@height float,

@width float,

@zindex int,

@scalex float,

@scaley float,

@rotation float,

@ispinned bit,

@backgroundcolor nvarchar(7),

@blobstatusid int,

@lockeduser nvarchar(50),

@lockedby nvarchar(50),

@lockeddate datetime,

@connectionid nvarchar(50),

@originalfilename NVARCHAR(255),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON


-----

tiletype = @tiletype,

tilecontent = @tilecontent,

positionx = @positionx,

positiony = @positiony,

height = @height,

width = @width,

zindex = @zindex,

scalex = @scalex,

scaley = @scaley,

rotation = @rotation,

ispinned = @ispinned,

backgroundcolor = @backgroundcolor,

--IMPORTANT blobstatus never go back

blobstatusid = case when @blobstatusid < blobstatusid then
blobstatusid else @blobstatusid end,

lockeduser = @lockeduser,

lockedby = @lockedby,

lockeddate = @lockeddate,

lastupdate = @lastupdate,

originalfilename = @originalfilename

WHERE tileid = @tileid


-----

SET NOCOUNT OFF

UPDATE t_online_user

SET lastupdate = @lastupdate

WHERE connectionid = @connectionid

RETURN 0

GO

Uses

[dbo].[t_online_user]

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update_blobstatusid]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier


-----

@blobstatusid

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_update_blobstatusid]

@tileid uniqueidentifier,

@blobstatusid int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

declare @statemachinestatusid int

if(@blobstatusid = dbo.fn_GetBlobStatus('UPLOADERROR') or
@blobstatusid = dbo.fn_GetBlobStatus('DELETED'))

begin


-----

dbo.fn_GetStateMachineStatusId('READY')

end

else

begin

set @statemachinestatusid = dbo.fn_GetStateMachineStatusId('NOT
READY')

end

SET NOCOUNT ON

UPDATE t_tilestatus

SET --IMPORTANT blobstatus never go back

blobstatusid = case when @blobstatusid < blobstatusid then
blobstatusid else @blobstatusid end,

lastupdate = @lastupdate,

statemachinestatusid = @statemachinestatusid

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

-- second time for updating parent

UPDATE t_tilestatus

SET --IMPORTANT blobstatus never go back

blobstatusid = case when @blobstatusid < blobstatusid then
blobstatusid else @blobstatusid end,

lastupdate = @lastupdate


-----

WHERE parentid = @tileid

IF(@blobstatusid = dbo.fn_GetBlobStatus('DELETED'))

BEGIN

DELETE

FROM t_tile_voting

WHERE tileid = @tileid

END

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tile_voting]

[dbo].[t_tilestatus]

[dbo].[fn_GetBlobStatus]

[dbo].[fn_GetStateMachineStatusId]

**[dbo].[p_tilestatus_update_containertype]**


-----

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@tiletype

int

4

@positionx

float

8

@positiony

float

8

@height

float

8

@ id h


-----

@zindex

int

4

@scalex

float

8

@scaley

float

8

@rotation

float

8

@rows

int

4

Out

SQL Script


-----

CREATE PROCEDURE [dbo].[p_tilestatus_update_containertype]

@tileid uniqueidentifier,

@tiletype int,

@positionx float,

@positiony float,

@height float,

@width float,

@zindex int,

@scalex float,

@scaley float,

@rotation float,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t_tilestatus

SET tiletype = @tiletype,

positionx = @positionx,

positiony = @positiony,


-----

width = @width,

zindex = @zindex,

scalex = @scalex,

scaley = @scaley,

rotation = @rotation,

lastupdate = @lastupdate

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update_content]**

Parameters

Name

Data Type


-----

@tileid

uniqueidentifier

16

@tilecontent

nvarchar(max)

max

@backgroundcolor

nvarchar(7)

14

@connectionid

nvarchar(50)

100

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_tilestatus_update_content]

@ il id i id ifi


-----

@backgroundcolor nvarchar(7),

@connectionid nvarchar(50),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t_tilestatus

SET tilecontent = @tilecontent,

backgroundcolor = @backgroundcolor,

lastupdate = @lastupdate

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

UPDATE t_online_user

SET lastupdate = @lastupdate

WHERE connectionid = @connectionid

RETURN 0

GO


-----

[dbo].[t_online_user]

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update_grouped]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@parentid

uniqueidentifier

16

@positionx

float


-----

float

8

@height

float

8

@width

float

8

@zindex

int

4

@scalex

float

8

@scaley

float

8

@rotation


-----

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_tilestatus_update_grouped]

@tileid uniqueidentifier,

@parentid uniqueidentifier,

@positionx float,

@positiony float,

@height float,

@width float,

@zindex int,

@scalex float,

@scaley float,

@rotation float,

@rows int = 0 output

AS


-----

SET NOCOUNT ON

UPDATE t_tilestatus

SET parentid = @parentid,

positionx = @positionx,

positiony = @positiony,

height = @height,

width = @width,

zindex = @zindex,

scalex = @scalex,

scaley = @scaley,

rotation = @rotation,

lastupdate = @lastupdate

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@lockeduser

nvarchar(50)

100

@lockedby

nvarchar(50)

100

@lockeddate

datetime

8

@ i id


-----

100

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_tilestatus_update_lock]

@tileid uniqueidentifier,

@lockeduser nvarchar(50),

@lockedby nvarchar(50),

@lockeddate datetime,

@connectionid nvarchar(50),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t tilestatus


-----

lockedby = @lockedby,

lockeddate = @lockeddate,

lastupdate = @lastupdate

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

UPDATE t_online_user

SET lastupdate = @lastupdate

WHERE connectionid = @connectionid

RETURN 0

GO

Uses

[dbo].[t_online_user]

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update_pinning]**

Parameters

Name


-----

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@ispinned

bit

1

@rows

int

4

Out

SQL Script

create PROCEDURE [dbo].[p_tilestatus_update_pinning]

@tileid uniqueidentifier,

@ispinned bit,

@rows int = 0 output

AS


-----

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t_tilestatus

SET ispinned = @ispinned,

lastupdate = @lastupdate

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update_position]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@tileid

uniqueidentifier

16

@positionx

float

8

@positiony

float

8

@height

float

8

@width

float

8

@zindex

int


-----

float

8

@scaley

float

8

@rotation

float

8

@connectionid

nvarchar(50)

100

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_update_position]

@tileid uniqueidentifier


-----

@positiony float,

@height float,

@width float,

@zindex int,

@scalex float,

@scaley float,

@rotation float,

@connectionid nvarchar(50),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t_tilestatus

SET positionx = @positionx,

positiony = @positiony,

height = @height,

width = @width,

zindex = @zindex,

scalex = @scalex,


-----

lastupdate = @lastupdate

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

UPDATE t_online_user

SET lastupdate = @lastupdate

WHERE connectionid = @connectionid

RETURN 0

GO

Uses

[dbo].[t_online_user]

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update_voting]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@tileid

uniqueidentifier

16

@totalthumbup

int

4

@totlathumbdown

int

4

@overallrating

decimal(2,1)

5

@totalrates

int

4

@rows

int


-----

SQL Script

create procedure [dbo].[p_tilestatus_update_voting]

@tileid uniqueidentifier,

@totalthumbup int,

@totlathumbdown int,

@overallrating decimal(2,1),

@totalrates int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE t_tilestatus

SET totalthumbup = @totalthumbup,

totlathumbdown = @totlathumbdown,

overallrating = @overallrating,

totalrates = @totalrates,

lastupdate = @lastupdate

WHERE tileid = @tileid


-----

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_update_zindex]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@zindex

int


-----

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_update_zindex]

@tileid uniqueidentifier,

@zindex int,

@rows int = 0 output

AS

SET NOCOUNT ON

UPDATE t_tilestatus

SET zindex = @zindex

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO


-----

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_upgrade_book]**

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_upgrade_book]

AS BEGIN

DECLARE @booked_by UNIQUEIDENTIFIER

SET @booked_by = NEWID()

DECLARE @booking_date DATETIME

SET @booking_date = GETUTCDATE()

SET NOCOUNT ON

UPDATE TOP(1) dbo.t_tilestatus_upgrade_booking

SET bookedby=@booked_by,

bookingdate = @booking_date,

lastupdate = @booking_date,

statemachinestatusid =

[dbo].fn_GetStateMachineStatusId('working')

WHERE statemachinestatusid =

[dbo] fn GetStateMachineStatusId('ready')


-----

BEGIN

SELECT [Id],

[creationdate],

[username],

[projectupgradeid]

[tileid],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],

[retry]

FROM dbo.t_tilestatus_upgrade_booking

WHERE bookedby=@booked_by

END

SET NOCOUNT OFF

END

GO

Uses

[dbo].[t_tilestatus_upgrade_booking]


-----

**[dbo].[p_tilestatus_upgrade_file]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@tileid

uniqueidentifier

16

@tilecontent

nvarchar(max)

max

@originalfilename

nvarchar(255)

510

@rows

int


-----

SQL Script

create PROCEDURE [dbo].[p_tilestatus_upgrade_file]

@tileid uniqueidentifier,

@tilecontent nvarchar(max),

@originalfilename NVARCHAR(255),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE dbo.t_tilestatus

SET tilecontent = @tilecontent,

originalfilename = @originalfilename,

lastupdate = @lastupdate

WHERE tileid = @tileid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO


-----

[dbo].[t_tilestatus]

**[dbo].[p_tilestatus_upgrade_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

@username

nvarchar(200)

400

@projectupgradeid

int

4

@tileid

uniqueidentifier

16

@uniquedeviceid

uniqueidentifier

16


-----

CREATE PROCEDURE [dbo].[p_tilestatus_upgrade_insert]

@username NVARCHAR(200),

@projectupgradeid INT,

@tileid UNIQUEIDENTIFIER,

@uniquedeviceid UNIQUEIDENTIFIER

AS

BEGIN

DECLARE @statemachinestatusid INT

SET @statemachinestatusid =
dbo.fn_GetStateMachineStatusId('ready')

INSERT INTO [dbo].[t_tilestatus_upgrade_booking]

(

[creationdate],

[username],

[projectupgradeid],

[tileid],

[uniquedeviceid],

[bookedby],

[lastupdate],

[bookingdate],


-----

VALUES

(

GETUTCDATE(),

@username,

@projectupgradeid,

@tileid,

@uniquedeviceid,

NULL,

GETUTCDATE(),

NULL,

0,

@statemachinestatusid

)

END

RETURN 0

GO

Uses

[dbo].[t_tilestatus_upgrade_booking]


-----

**[dbo].[p_tilestatus_upgrade_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

@retries

int

4

@statemachinestatusid

int

4

SQL Script

CREATE PROCEDURE [dbo].[p_tilestatus_upgrade_unbook]

@id INT,

@retries INT,

@statemachinestatusid INT


-----

SET NOCOUNT ON

UPDATE dbo.t_tilestatus_upgrade_booking

SET

bookedby=NULL,

bookingdate=NULL,

retry=@retries,

statemachinestatusid=@statemachinestatusid,

lastupdate = GETUTCDATE()

WHERE

Id=@id

SET NOCOUNT OFF

RETURN 0

GO

Uses

[dbo].[t_tilestatus_upgrade_booking]

**[dbo].[p_update_blobstatus_for_thumbnails]**


-----

Data Type

Max Length (Bytes)

@tileId

uniqueidentifier

16

@blobstatus

int

4

SQL Script

-- Stored Procedure

-==================================

-- Author: Dennis Vroegop

-- Create date: 02 04 2020

-- Description: Updates the blob status only for the thumbnail
creation

-==================================

CREATE PROCEDURE [dbo].[p_update_blobstatus_for_thumbnails]

@tileId uniqueidentifier,

@blobstatus int = 0


-----

BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from

-- interfering with SELECT statements.

SET NOCOUNT ON;

-- Insert statements for procedure here

UPDATE dbo.t_tilestatus

SET blobstatusid = @blobstatus

WHERE tileid= @tileId

END

GO

Uses

[dbo].[t_tilestatus]

**[dbo].[p_user_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_user_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT userid, username, firstname, lastname, photourl, is_guest,
creationdate, lastupdate, lastactivitydate


-----

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM t_user with (nolock)

RETURN 0

END

GO

Uses

[dbo].[t_user]

**[dbo].[p_user_get_by_project]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid


-----

@is_guest

bit

1

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_user_get_by_project]

@projectid int,

@is_guest bit,

@pagesize int,


-----

AS BEGIN

SET NOCOUNT ON;

SELECT u.userid, u.username, u.firstname, u.lastname, u.photourl,
u.is_guest, u.creationdate, u.lastupdate, u.lastactivitydate

FROM t_user as u WITH (NOLOCK)

LEFT JOIN t_project_participant as p WITH (NOLOCK) on p.userid
= u.userid

WHERE p.projectid = @projectid

AND ((@is_guest is null) or (u.is_guest = @is_guest))

ORDER BY projectid desc

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM t_user as u WITH (NOLOCK)

LEFT JOIN t_project_participant as p WITH (NOLOCK) on p.userid
= u.userid

WHERE p.projectid = @projectid

AND ((@is_guest is null) or (u.is_guest = @is_guest))

RETURN

END

GO


-----

Uses

[dbo].[t_project_participant]

[dbo].[t_user]

**[dbo].[p_user_get_by_project_count]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@projectid

int

4

@permission

tinyint

1

@is_guest

bit


-----

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_user_get_by_project_count]

@projectid int,

@permission tinyint,

@is_guest bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON;

SELECT @totalrows = count(1)

FROM t_user as u WITH (NOLOCK)

LEFT JOIN t_project_participant as pp WITH (NOLOCK) on
pp.userid = u.userid

WHERE pp.projectid = @projectid

AND ((@permission is null) or (pp.permission = @permission))

AND ((@is_guest is null) or (u.is_guest = @is_guest))

RETURN

END


-----

Uses

[dbo].[t_project_participant]

[dbo].[t_user]

**[dbo].[p_user_get_by_userid]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@username

nvarchar(250)

500

Out

@rows


-----

Out

SQL Script

CREATE PROCEDURE [dbo].[p_user_get_by_userid]

@userid INT,

@username NVARCHAR (250) OUTPUT,

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

SELECT @username = username

FROM t_user WITH (NOLOCK)

WHERE userid = @userid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO


-----

[dbo].[t_user]

**[dbo].[p_user_get_by_username]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@input_username

nvarchar(250)

500

@userid

int

4

Out

@username

nvarchar(250)

500

Out


-----

nvarchar(50)

100

Out

@lastname

nvarchar(50)

100

Out

@photourl

nvarchar(250)

500

Out

@companyname

nvarchar(250)

500

Out

@phonenumber

nvarchar(50)

100

Out

@language

nvarchar(50)


-----

Out

@country

nvarchar(5)

10

Out

@companysize

tinyint

1

Out

@companyindustry

tinyint

1

Out

@companyrole

nvarchar(250)

500

Out

@usecase

nvarchar(100)

200

Out


-----

datetime

8

Out

@receive_news

bit

1

Out

@is_guest

bit

1

Out

@creationdate

datetime

8

Out

@lastupdate

datetime

8

Out

@lastactivitydate

datetime


-----

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_user_get_by_username]

@input_username NVARCHAR (250),

@userid INT = 0 OUTPUT,

@username NVARCHAR (250) OUTPUT,

@firstname NVARCHAR (50) OUTPUT,

@lastname NVARCHAR (50) OUTPUT,

@photourl NVARCHAR (250) OUTPUT,

@companyname NVARCHAR (250) OUTPUT,

@phonenumber NVARCHAR (50) OUTPUT,

@language NVARCHAR (50) OUTPUT,

@country NVARCHAR (5) OUTPUT,

@companysize TINYINT OUTPUT,

@companyindustry TINYINT OUTPUT,

@companyrole NVARCHAR (250) OUTPUT,


-----

@receive_news BIT OUTPUT,

@is_guest BIT OUTPUT,

@creationdate DATETIME OUTPUT,

@lastupdate DATETIME OUTPUT,

@lastactivitydate DATETIME OUTPUT,

@rows INT = 0 OUTPUT

AS BEGIN

SET NOCOUNT ON

SELECT @userid = userid,

@username = username,

@firstname = firstname,

@lastname = lastname,

@photourl = photourl,

@companyname = companyname,

@phonenumber = phonenumber,

@language = [language],

@country = country,

@companysize = companysize,

@companyindustry = companyindustry,

@companyrole = companyrole,


-----

@receive_news = receive_news,

@is_guest = is_guest,

@creationdate = creationdate,

@lastupdate = lastupdate,

@lastactivitydate = lastactivitydate

FROM t_user WITH (NOLOCK)

WHERE username = @input_username

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_user]

**[dbo].[p_user_insert]**

Parameters


-----

Max Length (Bytes)

Direction

@username

nvarchar(250)

500

@firstname

nvarchar(50)

100

@lastname

nvarchar(50)

100

@photourl

nvarchar(250)

500

@companyname

nvarchar(250)

500

@phonenumber

h ( 0)


-----

@language

nvarchar(50)

100

@country

nvarchar(5)

10

@companysize

tinyint

1

@companyindustry

tinyint

1

@companyrole

nvarchar(250)

500

@usecase

nvarchar(100)

200


-----

bit

1

@terms_accepted

datetime

8

@receive_news

bit

1

@userid

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_user_insert]

@username NVARCHAR(250),


-----

@lastname NVARCHAR(50),

@photourl NVARCHAR(250),

@companyname NVARCHAR (250),

@phonenumber NVARCHAR (50),

@language NVARCHAR (50),

@country NVARCHAR (5),

@companysize TINYINT,

@companyindustry TINYINT,

@companyrole NVARCHAR (250),

@usecase NVARCHAR (100),

@is_guest BIT,

@terms_accepted DATETIME,

@receive_news BIT,

@userid int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO t_user

(

username,i


-----

photourl,

companyname,

phonenumber,

[language],

country,

companysize,

companyindustry,

companyrole,

usecase,

terms_accepted,

receive_news,

is_guest,

creationdate

)

VALUES

(

@username,

@firstname,

@lastname,

@photourl,

@companyname,


-----

@language,

@country,

@companysize,

@companyindustry,

@companyrole,

@usecase,

@terms_accepted,

@receive_news,

@is_guest,

GETUTCDATE()

)

set @userid = @@IDENTITY

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[db ] [ ]


-----

**[dbo].[p_user_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@userid

int

4

@username

nvarchar(250)

500

@firstname

nvarchar(50)

100

@lastname

nvarchar(50)

100


-----

nvarchar(250)

500

@companyname

nvarchar(250)

500

@phonenumber

nvarchar(50)

100

@language

nvarchar(50)

100

@country

nvarchar(5)

10

@companysize

tinyint

1

@companyindustry


-----

@companyrole

nvarchar(250)

500

@usecase

nvarchar(100)

200

@terms_accepted

datetime

8

@receive_news

bit

1

@is_guest

bit

1

@lastactivitydate

datetime


-----

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [dbo].[p_user_update]

@userid int,

@username nvarchar(250),

@firstname nvarchar(50),

@lastname nvarchar(50),

@photourl nvarchar(250),

@companyname NVARCHAR (250),

@phonenumber NVARCHAR (50),

@language NVARCHAR (50),

@country NVARCHAR (5),

@companysize TINYINT,

@companyindustry TINYINT,

@companyrole NVARCHAR (250),

@usecase NVARCHAR (100),

@terms_accepted datetime,


-----

@is_guest BIT,

@lastactivitydate datetime,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE t_user

SET username = @username,

firstname = @firstname,

lastname = @lastname,

photourl = @photourl,

companyname = @companyname,

phonenumber = @phonenumber,

[language] = @language,

country = @country,

companysize = @companysize,

companyindustry = @companyindustry,

companyrole = @companyrole,

usecase = @usecase,

terms_accepted = COALESCE(terms_accepted, @terms_accepted),

receive_news = @receive_news,


-----

lastupdate = GETUTCDATE()

WHERE userid = @userid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[dbo].[t_user]

**[licensing].[p_billing_type_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id


-----

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_billing_type_delete]

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_billing_type]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses


-----

[licensing]

**[licensing].[p_billing_type_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out


-----

CREATE PROC [licensing].[p_billing_type_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name]

FROM [licensing].[t_billing_type] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_billing_type] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[li i ] [ billi ]


-----

**[licensing].[p_billing_type_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_billing_type_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name]

FROM [licensing].[t_billing_type] WITH(NOLOCK)

WHERE [id] = @id


-----

END

GO

Uses

[licensing].[t_billing_type]

[licensing]

**[licensing].[p_billing_type_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@name

nvarchar(250)

500

@id

int


-----

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_billing_type_insert]

@name nvarchar(250),

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_billing_type] (

[name]

)

VALUES (

@name

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT


-----

END

GO

Uses

[licensing].[t_billing_type]

[licensing]

**[licensing].[p_billing_type_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@name

nvarchar(250)

500


-----

int

4

Out

SQL Script

CREATE PROC [licensing].[p_billing_type_update]

@id int,

@name nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_billing_type] SET

[name] = @name

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses


-----

[licensing]

**[licensing].[p_customer_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_customer_delete]


-----

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_customer]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_customer]

[licensing]

**[licensing].[p_customer_get_all]**

Parameters

Name

Data Type


-----

Direction

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_customer_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],


-----

[username]

FROM [licensing].[t_customer] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_customer] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_customer]

[licensing]

**[licensing].[p_customer_get_by_id]**

Parameters

Name


-----

@id

int

4

SQL Script

CREATE PROC [licensing].[p_customer_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name],

[username]

FROM [licensing].[t_customer] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_customer]

[li i ]


-----

**[licensing].[p_customer_get_by_username]**

Parameters

Name

Data Type

Max Length (Bytes)

@username

nvarchar(250)

500

SQL Script

CREATE PROC [licensing].[p_customer_get_by_username]

@username nvarchar(250)

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name],

[username]

FROM [licensing].[t_customer] WITH(NOLOCK)

WHERE [username] = @username


-----

END

GO

Uses

[licensing].[t_customer]

[licensing]

**[licensing].[p_customer_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@name

nvarchar(500)

1000

@username

nvarchar(250)

500


-----

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_customer_insert]

@name nvarchar(500),

@username nvarchar(250),

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_customer] (

[name],

[username]

)

VALUES (


-----

@username

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_customer]

[licensing]

**[licensing].[p_customer_search]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

1000

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_customer_search]

@nameFilter nvarchar(500),

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON


-----

[name],

[username]

FROM [licensing].[t_customer] WITH(NOLOCK)

WHERE ((@nameFilter is null) or ([name] like @nameFilter))

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_customer] WITH(NOLOCK)

WHERE ((@nameFilter is null) or ([name] like @nameFilter))

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_customer]

[licensing]

**[licensing].[p_customer_update]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@name

nvarchar(500)

1000

@username

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_customer_update]


-----

@name nvarchar(500),

@username nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_customer] SET

[name] = @name,

[username] = @username

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_customer]

[licensing]

**[licensing].[p_import_data_book]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@type

int

4

SQL Script

CREATE PROC [licensing].[p_import_data_book]

@type int

AS BEGIN

declare @booked_by uniqueidentifier

set @booked_by = NEWID()

declare @booking_date smalldatetime

set @booking_date = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(5) t_import_data

SET booked_by = @booked_by,

booking date @booking date


-----

WHERE [type] = @type

AND (state_machine_status = 1 /*Ready*/)

IF @@ROWCOUNT > 0

BEGIN

SELECT [id],

[type],

[payload],

[creationdate],

[lastupdate],

[booked_by],

[booking_date],

[retry],

[state_machine_status]

FROM t_import_data with(nolock)

WHERE [type] = @type

AND booked_by = @booked_by

END

SET NOCOUNT OFF

END

GO


-----

Uses

[licensing].[t_import_data]

[licensing]

**[licensing].[p_import_data_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script


-----

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_import_data]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_import_data]

[licensing]

**[licensing].[p_import_data_insert]**

Parameters

Name


-----

Direction

@type

int

4

@payload

nvarchar(max)

max

@state_machine_status

int

4

@id

int

4

Out

@rows

int

4

Out

SQL Script


-----

@type int,

@payload nvarchar(MAX),

@state_machine_status int,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_import_data] (

[type],

[payload],

[lastupdate],

[booked_by],

[booking_date],

[state_machine_status]

)

VALUES (

@type,

@payload,

getutcdate(),

null,


-----

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_import_data]

[licensing]

**[licensing].[p_import_data_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id


-----

@number_of_retries

int

4

@state_machine_status

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_import_data_unbook]

@id int,

@number_of_retries int,

@state_machine_status int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON


-----

SET booked_by = null,

booking_date = null,

lastupdate = GETUTCDATE(),

retry = @number_of_retries,

state_machine_status = @state_machine_status

WHERE id = @id

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_import_data]

[licensing]

**[licensing].[p_license_file_history_get_by_id]**

Parameters

Name


-----

@id

int

4

SQL Script

CREATE PROC [licensing].[p_license_file_history_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[customer],

[license_data],

[created_by],

[date_created]

FROM [licensing].[t_license_file_history] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO


-----

[licensing]

**[licensing].[p_license_file_history_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@customer

nvarchar(500)

1000

@license_data

varbinary(8000)

8000

@created_by

nvarchar(250)

500

@date created


-----

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_license_file_history_insert]

@customer nvarchar(500),

@license_data varbinary(8000),

@created_by nvarchar(250),

@date_created datetime,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ONi


-----

[license_data],

[created_by],

[date_created]

)

VALUES (

@customer,

@license_data,

@created_by,

@date_created

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_license_file_history]

[licensing]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@customerFilter

nvarchar(500)

1000

@date_created_from

datetime

8

@date_created_to

datetime

8

@pagesize

int


-----

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_license_file_history_search]

@customerFilter nvarchar(500),

@date_created_from datetime,

@date_created_to datetime,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[customer],

[license_data],

[created_by],


-----

WHERE ((@customerFilter is null) or ([customer] like
@customerFilter))

AND ((@date_created_from is null) or ([date_created] >=
@date_created_from))

AND ((@date_created_to is null) or ([date_created] <=
@date_created_to))

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_license_file_history] WITH(NOLOCK)

WHERE ((@customerFilter is null) or ([customer] like
@customerFilter))

AND ((@date_created_from is null) or ([date_created] >=
@date_created_from))

AND ((@date_created_to is null) or ([date_created] <=
@date_created_to))

SET NOCOUNT OFF

END

GO

Uses

[licensing] [t license file history]


-----

**[licensing].[p_order_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_order_delete]

@id int,


-----

SET NOCOUNT ON

DELETE FROM [licensing].[t_order]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_order]

[licensing]

**[licensing].[p_order_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_order_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[subscription_id],


-----

[promo_code_id],

[payment_method_id],

[created_by_username],

[date_created],

[status],

[external_reference]

FROM [licensing].[t_order] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_order] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_order]

[licensing]


-----

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_order_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[subscription_id],

[currency],

[promo_code_id],

[payment_method_id],

[created_by_username],


-----

[external_reference]

FROM [licensing].[t_order] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_order]

[licensing]

**[licensing].[p_order_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@subscription_id

int


-----

@currency

nvarchar(5)

10

@promo_code_id

int

4

@payment_method_id

int

4

@created_by_username

nvarchar(250)

500

@date_created

datetime

8

@status

tinyint


-----

nvarchar(500)

1000

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_order_insert]

@subscription_id int,

@currency nvarchar(5),

@promo_code_id int,

@payment_method_id int,

@created_by_username nvarchar(250),

@date_created datetime,

@status tinyint,


-----

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_order] (

[subscription_id],

[currency],

[promo_code_id],

[payment_method_id],

[created_by_username],

[date_created],

[status],

[external_reference]

)

VALUES (

@subscription_id,

@currency,

@promo_code_id,

@payment_method_id,

@created_by_username,

@date_created,


-----

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_order]

[licensing]

**[licensing].[p_order_search]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@subscription_id


-----

@product_id

int

4

@order_status

int

4

@subscription_activeto_start

datetime

8

@subscription_activeto_end

datetime

8

@pagesize

int

4

@pagenumber

int


-----

int

4

Out

SQL Script

CREATE PROC [licensing].[p_order_search]

@subscription_id int,

@product_id int,

@order_status int,

@subscription_activeto_start datetime,

@subscription_activeto_end datetime,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[subscription_id],

[currency],

[promo_code_id],

[payment_method_id],


-----

[date_created],

[status],

[external_reference]

FROM [licensing].[t_order] WITH(NOLOCK)

WHERE ((@subscription_id is null) or ([subscription_id] =
@subscription_id))

AND ((@order_status is null) or ([status] = @order_status))

AND ((@product_id is null) or (EXISTS (

SELECT NULL

FROM [licensing].[t_orderline]

WHERE [t_orderline].[order_id] = [t_order].[id]

AND [t_orderline].[product_id] = @product_id

)))

AND (((@subscription_activeto_start is null) and
(@subscription_activeto_end is null)) or (EXISTS (

SELECT NULL

FROM [licensing].[t_subscription]

WHERE [t_subscription].[id] = [t_order].[subscription_id]

AND ((@subscription_activeto_start is null) or ([t_subscription].

[active_to] >= @subscription_activeto_start))

AND ((@subscription_activeto_end is null) or ([t_subscription].

[active_to] <= @subscription_activeto_end))

)))


-----

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_order] WITH(NOLOCK)

WHERE ((@subscription_id is null) or ([subscription_id] =
@subscription_id))

AND ((@order_status is null) or ([status] = @order_status))

AND ((@product_id is null) or (EXISTS (

SELECT NULL

FROM [licensing].[t_orderline]

WHERE [t_orderline].[order_id] = [t_order].[id]

AND [t_orderline].[product_id] = @product_id

)))

AND (((@subscription_activeto_start is null) and
(@subscription_activeto_end is null)) or (EXISTS (

SELECT NULL

FROM [licensing].[t_subscription]

WHERE [t_subscription].[id] = [t_order].[subscription_id]

AND ((@subscription_activeto_start is null) or ([t_subscription].

[active_to] >= @subscription_activeto_start))

AND ((@subscription_activeto_end is null) or ([t_subscription].

[active_to] <= @subscription_activeto_end))


-----

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_order]

[licensing].[t_orderline]

[licensing].[t_subscription]

[licensing]

**[licensing].[p_order_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int


-----

int

4

@currency

nvarchar(5)

10

@promo_code_id

int

4

@payment_method_id

int

4

@created_by_username

nvarchar(250)

500

@date_created

datetime

8

@status


-----

@external_reference

nvarchar(500)

1000

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_order_update]

@id int,

@subscription_id int,

@currency nvarchar(5),

@promo_code_id int,

@payment_method_id int,

@created_by_username nvarchar(250),

@date_created datetime,

@status tinyint,

@external_reference nvarchar(500),


-----

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_order] SET

[subscription_id] = @subscription_id,

[currency] = @currency,

[promo_code_id] = @promo_code_id,

[payment_method_id] = @payment_method_id,

[created_by_username] = @created_by_username,

[date_created] = @date_created,

[status] = @status,

[external_reference] = @external_reference

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_order]

[li i ]


-----

**[licensing].[p_orderline_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_orderline_delete]

@id int,

@rows int = 0 output


-----

SET NOCOUNT ON

DELETE FROM [licensing].[t_orderline]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_orderline]

[licensing]

**[licensing].[p_orderline_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_orderline_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[order_id],

[product_id],


-----

[number_of_devices],

[billing_type_id],

[amount],

[status]

FROM [licensing].[t_orderline] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_orderline] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_orderline]

[licensing]

**[licensing].[p_orderline_get_by_id]**


-----

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_orderline_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[order_id],

[product_id],

[number_of_users],

[number_of_devices],

[billing_type_id],

[amount],

[status]

FROM [licensing].[t_orderline] WITH(NOLOCK)


-----

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_orderline]

[licensing]

**[licensing].[p_orderline_get_by_orderid]**

Parameters

Name

Data Type

Max Length (Bytes)

@order_id

int

4

SQL Script

CREATE PROC [licensing].[p_orderline_get_by_orderid]


-----

SET NOCOUNT ON

SELECT [id],

[order_id],

[product_id],

[number_of_users],

[number_of_devices],

[billing_type_id],

[amount],

[status]

FROM [licensing].[t_orderline] WITH(NOLOCK)

WHERE [order_id] = @order_id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_orderline]

[licensing]

**[licensing].[p_orderline_insert]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@order_id

int

4

@product_id

int

4

@number_of_users

int

4

@number_of_devices

int

4

@billing_type_id

int


-----

@amount

money

8

@status

tinyint

1

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_orderline_insert]

@order_id int,

@product_id int,

@number_of_users int,


-----

@billing_type_id int,

@amount money,

@status tinyint,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_orderline] (

[order_id],

[product_id],

[number_of_users],

[number_of_devices],

[billing_type_id],

[amount],

[status]

)

VALUES (

@order_id,

@product_id,

@number_of_users,


-----

@amount,

@status

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_orderline]

[licensing]

**[licensing].[p_orderline_update]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

int

4

@order_id

int

4

@product_id

int

4

@number_of_users

int

4

@number_of_devices

int

4

@billing_type_id

int

4

@amount


-----

@status

tinyint

1

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_orderline_update]

@id int,

@order_id int,

@product_id int,

@number_of_users int,

@number_of_devices int,

@billing_type_id int,

@amount money,

@status tinyint,

@rows int = 0 output


-----

UPDATE [licensing].[t_orderline] SET

[order_id] = @order_id,

[product_id] = @product_id,

[number_of_users] = @number_of_users,

[number_of_devices] = @number_of_devices,

[billing_type_id] = @billing_type_id,

[amount] = @amount,

[status] = @status

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_orderline]

[licensing]

**[licensing].[p_payment_delete]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_delete]

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_payment]

[id] @id


-----

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment]

[licensing]

**[licensing].[p_payment_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@pagesize

int


-----

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[order_id],

[amount],

[external_reference],

[date_created],

[status]

FROM [licensing].[t_payment] WITH(NOLOCK)


-----

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_payment] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment]

[licensing]

**[licensing].[p_payment_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int


-----

SQL Script

CREATE PROC [licensing].[p_payment_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[order_id],

[amount],

[external_reference],

[date_created],

[status]

FROM [licensing].[t_payment] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment]

[licensing]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@order_id

int

4

@amount

money

8

@external_reference

nvarchar(500)

1000

@date_created

datetime


-----

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_insert]

@order_id int,

@amount money,

@external_reference nvarchar(500),

@date_created datetime,

@status tinyint,

@id int output,

@rows int = 0 output

AS BEGIN


-----

INSERT INTO [licensing].[t_payment] (

[order_id],

[amount],

[external_reference],

[date_created],

[status]

)

VALUES (

@order_id,

@amount,

@external_reference,

@date_created,

@status

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO


-----

[licensing]

**[licensing].[p_payment_method_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_method_delete]


-----

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_payment_method]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment_method]

[licensing]

**[licensing].[p_payment_method_get_all]**

Parameters

Name

Data Type


-----

Direction

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_method_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],


-----

FROM [licensing].[t_payment_method] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_payment_method] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment_method]

[licensing]

**[licensing].[p_payment_method_get_by_id]**

Parameters

Name

Data Type


-----

int

4

SQL Script

CREATE PROC [licensing].[p_payment_method_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name]

FROM [licensing].[t_payment_method] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment_method]

[licensing]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@name

nvarchar(250)

500

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_method_insert]

@name nvarchar(250),

@id i


-----

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_payment_method] (

[name]

)

VALUES (

@name

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment_method]

[licensing]

**[licensing].[p_payment_method_update]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@name

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_method_update]

@id int,

@name nvarchar(250),

@rows int = 0 output


-----

SET NOCOUNT ON

UPDATE [licensing].[t_payment_method] SET

[name] = @name

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment_method]

[licensing]

**[licensing].[p_payment_search]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

@order_id

int

4

@external_reference

nvarchar(500)

1000

@payment_status

int

4

@pagesize

int

4

@pagenumber

int

4

@totalrows

int


-----

SQL Script

CREATE PROC [licensing].[p_payment_search]

@order_id int,

@external_reference nvarchar(500),

@payment_status int,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[order_id],

[amount],

[external_reference],

[date_created],

[status]

FROM [licensing].[t_payment] WITH(NOLOCK)

WHERE ((@order_id is null) or ([order_id] = @order_id))

AND ((@external_reference is null) or ([external_reference] =
@external_reference))

AND ((@payment_status is null) or ([status] = @payment_status))


-----

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_payment] WITH(NOLOCK)

WHERE ((@order_id is null) or ([order_id] = @order_id))

AND ((@external_reference is null) or ([external_reference] =
@external_reference))

AND ((@payment_status is null) or ([status] = @payment_status))

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment]

[licensing]

**[licensing].[p_payment_update]**

Parameters

Name

Data Type


-----

Direction

@id

int

4

@order_id

int

4

@amount

money

8

@external_reference

nvarchar(500)

1000

@date_created

datetime

8

@status

tinyint


-----

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_payment_update]

@id int,

@order_id int,

@amount money,

@external_reference nvarchar(500),

@date_created datetime,

@status tinyint,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_payment] SET

[order_id] = @order_id,

[amount] = @amount,

[external_reference] = @external_reference,

[date_created] = @date_created,


-----

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_payment]

[licensing]

**[licensing].[p_price_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int


-----

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_price_delete]

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_price]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses


-----

[licensing]

**[licensing].[p_price_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out


-----

CREATE PROC [licensing].[p_price_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[pricelist_id],

[billing_type_id],

[product_id],

[amount_initial],

[amount_per_user],

[amount_per_device]

FROM [licensing].[t_price] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_price] WITH(NOLOCK)


-----

GO

Uses

[licensing].[t_price]

[licensing]

**[licensing].[p_price_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_price_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON


-----

[pricelist_id],

[billing_type_id],

[product_id],

[amount_initial],

[amount_per_user],

[amount_per_device]

FROM [licensing].[t_price] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_price]

[licensing]

**[licensing].[p_price_get_by_pricelistid]**

Parameters

Name


-----

Max Length (Bytes)

@pricelist_id

int

4

SQL Script

CREATE PROC [licensing].[p_price_get_by_pricelistid]

@pricelist_id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[pricelist_id],

[billing_type_id],

[product_id],

[amount_initial],

[amount_per_user],

[amount_per_device]

FROM [licensing].[t_price] WITH(NOLOCK)

WHERE [pricelist_id] = @pricelist_id

SET NOCOUNT OFF


-----

Uses

[licensing].[t_price]

[licensing]

**[licensing].[p_price_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@pricelist_id

int

4

@billing_type_id

int

4

@product_id


-----

@amount_initial

money

8

@amount_per_user

money

8

@amount_per_device

money

8

@id

int

4

Out

@rows

int

4

Out

SQL Script


-----

@pricelist_id int,

@billing_type_id int,

@product_id int,

@amount_initial money,

@amount_per_user money,

@amount_per_device money,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_price] (

[pricelist_id],

[billing_type_id],

[product_id],

[amount_initial],

[amount_per_user],

[amount_per_device]

)

VALUES (

@pricelist_id,


-----

@amount_initial,

@amount_per_user,

@amount_per_device

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_price]

[licensing]

**[licensing].[p_price_update]**

Parameters

Name

Data Type


-----

@id

int

4

@pricelist_id

int

4

@billing_type_id

int

4

@product_id

int

4

@amount_initial

money

8

@amount_per_user

money


-----

money

8

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_price_update]

@id int,

@pricelist_id int,

@billing_type_id int,

@product_id int,

@amount_initial money,

@amount_per_user money,

@amount_per_device money,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_price] SET


-----

[product_id] = @product_id,

[amount_initial] = @amount_initial,

[amount_per_user] = @amount_per_user,

[amount_per_device] = @amount_per_device

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_price]

[licensing]

**[licensing].[p_pricelist_delete]**

Parameters

Name

Data Type


-----

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_pricelist_delete]

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_pricelist]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF


-----

GO

Uses

[licensing].[t_pricelist]

[licensing]

**[licensing].[p_pricelist_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@pagesize

int

4

@pagenumber

int


-----

Out

SQL Script

CREATE PROC [licensing].[p_pricelist_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name],

[currency],

[active_from],

[active_to],

[is_active]

FROM [licensing].[t_pricelist] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;


-----

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_pricelist]

[licensing]

**[licensing].[p_pricelist_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_pricelist_get_by_id]


-----

SET NOCOUNT ON

SELECT [id],

[name],

[currency],

[active_from],

[active_to],

[is_active]

FROM [licensing].[t_pricelist] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_pricelist]

[licensing]

**[licensing].[p_pricelist_insert]**


-----

Data Type

Max Length (Bytes)

Direction

@name

nvarchar(500)

1000

@currency

nvarchar(5)

10

@active_from

datetime

8

@active_to

datetime

8

@is_active

bit

1

@id


-----

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_pricelist_insert]

@name nvarchar(500),

@currency nvarchar(5),

@active_from datetime,

@active_to datetime,

@is_active bit,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_pricelist] (

[name],


-----

[active_to],

[is_active]

)

VALUES (

@name,

@currency,

@active_from,

@active_to,

@is_active

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_pricelist]

[licensing]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@name

nvarchar(500)

1000

@currency

nvarchar(5)

10

@active_from

datetime


-----

@is_active

bit

1

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_pricelist_update]

@id int,

@name nvarchar(500),

@currency nvarchar(5),

@active_from datetime,

@active_to datetime,

@is_active bit,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON


-----

[name] = @name,

[currency] = @currency,

[active_from] = @active_from,

[active_to] = @active_to,

[is_active] = @is_active

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_pricelist]

[licensing]

**[licensing].[p_product_delete]**

Parameters

Name


-----

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_product_delete]

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_product]

WHERE [id] = @id

SET @rows = @@ROWCOUNT


-----

END

GO

Uses

[licensing].[t_product]

[licensing]

**[licensing].[p_product_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@pagesize

int

4

@pagenumber

int


-----

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_product_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name],

[description],

[product_family_code],

[min_number_of_users],

[max_number_of_users],

[min_number_of_devices],

[max_number_of_devices],

[external_reference]


-----

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_product] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_product]

[licensing]

**[licensing].[p_product_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@id


-----

SQL Script

CREATE PROC [licensing].[p_product_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name],

[description],

[product_family_code],

[min_number_of_users],

[max_number_of_users],

[min_number_of_devices],

[max_number_of_devices],

[external_reference]

FROM [licensing].[t_product] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO


-----

[licensing].[t_product]

[licensing]

**[licensing].[p_product_get_by_productfamily]**

Parameters

Name

Data Type

Max Length (Bytes)

@product_family_code

nvarchar(100)

200

SQL Script

CREATE PROC [licensing].[p_product_get_by_productfamily]

@product_family_code nvarchar(100)

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name],


-----

[min_number_of_users],

[max_number_of_users],

[min_number_of_devices],

[max_number_of_devices],

[external_reference]

FROM [licensing].[t_product] WITH(NOLOCK)

WHERE [product_family_code] = @product_family_code

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_product]

[licensing]

**[licensing].[p_product_insert]**

Parameters

Name

Data Type


-----

Direction

@name

nvarchar(500)

1000

@description

nvarchar(max)

max

@product_family_code

nvarchar(100)

200

@min_number_of_users

int

4

@max_number_of_users

int

4

@min_number_of_devices

int


-----

@max_number_of_devices

int

4

@external_reference

nvarchar(500)

1000

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_product_insert]

@name nvarchar(500),

@description nvarchar(max),

@product_family_code nvarchar(100),

@min_number_of_users int,


-----

@min_number_of_devices int,

@max_number_of_devices int,

@external_reference nvarchar(500),

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_product] (

[name],

[description],

[product_family_code],

[min_number_of_users],

[max_number_of_users],

[min_number_of_devices],

[max_number_of_devices],

[external_reference]

)

VALUES (

@name,

@description,


-----

@max_number_of_users,

@min_number_of_devices,

@max_number_of_devices,

@external_reference

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_product]

[licensing]

**[licensing].[p_product_update]**

Parameters

Name


-----

Direction

@id

int

4

@name

nvarchar(500)

1000

@description

nvarchar(max)

max

@product_family_code

nvarchar(100)

200

@min_number_of_users

int

4

@max_number_of_users

int


-----

@min_number_of_devices

int

4

@max_number_of_devices

int

4

@external_reference

nvarchar(500)

1000

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_product_update]

@id int,

@name nvarchar(500),

@description nvarchar(max),

@product_family_code nvarchar(100),


-----

@min_number_of_devices int,

@max_number_of_devices int,

@external_reference nvarchar(500),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_product] SET

[name] = @name,

[description] = @description,

[product_family_code] = @product_family_code,

[min_number_of_users] = @min_number_of_users,

[max_number_of_users] = @max_number_of_users,

[min_number_of_devices] = @min_number_of_devices,

[max_number_of_devices] = @max_number_of_devices,

[external_reference] = external_reference

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END


-----

Uses

[licensing].[t_product]

[licensing]

**[licensing].[p_promo_code_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script


-----

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_promo_code]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_code]

[licensing]

**[licensing].[p_promo_code_get_all]**

Parameters


-----

Data Type

Max Length (Bytes)

Direction

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_promo_code_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN


-----

SELECT [id],

[code],

[promo_type_id],

[description],

[product_id],

[max_number_of_uses],

[number_of_users],

[number_of_devices],

[number_of_free_months],

[active_from],

[active_to],

[discount_amount],

[discount_percent],

[usage_count]

FROM [licensing].[t_promo_code] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_promo_code] WITH(NOLOCK)


-----

GO

Uses

[licensing].[t_promo_code]

[licensing]

**[licensing].[p_promo_code_get_by_code]**

Parameters

Name

Data Type

Max Length (Bytes)

@code

nvarchar(100)

200

SQL Script

CREATE PROC [licensing].[p_promo_code_get_by_code]

@code nvarchar(100)

AS BEGIN

SET NOCOUNT ON


-----

[code],

[promo_type_id],

[description],

[product_id],

[max_number_of_uses],

[number_of_users],

[number_of_devices],

[number_of_free_months],

[active_from],

[active_to],

[discount_amount],

[discount_percent],

[usage_count]

FROM [licensing].[t_promo_code] WITH(NOLOCK)

WHERE [code] = @code

SET NOCOUNT OFF

END

GO

Uses


-----

**[licensing].[p_promo_code_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_promo_code_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[code],

[promo_type_id],

[description],


-----

[number_of_users],

[number_of_devices],

[number_of_free_months],

[active_from],

[active_to],

[discount_amount],

[discount_percent],

[usage_count]

FROM [licensing].[t_promo_code] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_code]

[licensing]

**[licensing].[p_promo_code_get_by_promotypeid]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@promo_type_id

int

4

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_promo_code_get_by_promotypeid]


-----

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[code],

[promo_type_id],

[description],

[product_id],

[max_number_of_uses],

[number_of_users],

[number_of_devices],

[number_of_free_months],

[active_from],

[active_to],

[discount_amount],

[discount_percent],

[usage_count]

FROM [licensing].[t_promo_code] WITH(NOLOCK)


-----

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_promo_code] WITH(NOLOCK)

WHERE [promo_type_id] = @promo_type_id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_code]

[licensing]

**[licensing].[p_promo_code_insert]**

Parameters

Name

Data Type

Max Length (Bytes)


-----

nvarchar(100)

200

@promo_type_id

int

4

@description

nvarchar(1000)

2000

@product_id

int

4

@max_number_of_uses

int

4

@number_of_users

int

4

@number_of_devices


-----

@number_of_free_months

int

4

@active_from

datetime

8

@active_to

datetime

8

@discount_amount

money

8

@discount_percent

decimal(18,0)

9

@usage_count

int


-----

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_promo_code_insert]

@code nvarchar(100),

@promo_type_id int,

@description nvarchar(1000),

@product_id int,

@max_number_of_uses int,

@number_of_users int,

@number_of_devices int,

@number_of_free_months int,

@active_from datetime,

@active_to datetime,


-----

@discount_percent decimal,

@usage_count int,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_promo_code] (

[code],

[promo_type_id],

[description],

[product_id],

[max_number_of_uses],

[number_of_users],

[number_of_devices],

[number_of_free_months],

[active_from],

[active_to],

[discount_amount],

[discount_percent],

[usage_count]


-----

@code,

@promo_type_id,

@description,

@product_id,

@max_number_of_uses,

@number_of_users,

@number_of_devices,

@number_of_free_months,

@active_from,

@active_to,

@discount_amount,

@discount_percent,

@usage_count

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO


-----

[licensing].[t_promo_code]

[licensing]

**[licensing].[p_promo_code_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@promo_type_id

int

4

@code

nvarchar(100)

200


-----

nvarchar(1000)

2000

@product_id

int

4

@max_number_of_uses

int

4

@number_of_users

int

4

@number_of_devices

int

4

@number_of_free_months

int

4

@active_from


-----

@active_to

datetime

8

@discount_amount

money

8

@discount_percent

decimal(18,0)

9

@usage_count

int

4

@rows

int

4

Out

SQL Script


-----

@id int,

@promo_type_id int,

@code nvarchar(100),

@description nvarchar(1000),

@product_id int,

@max_number_of_uses int,

@number_of_users int,

@number_of_devices int,

@number_of_free_months int,

@active_from datetime,

@active_to datetime,

@discount_amount money,

@discount_percent decimal,

@usage_count int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_promo_code] SET

[code] = @code,

[promo_type_id] = @promo_type_id,


-----

[max_number_of_uses] = @max_number_of_uses,

[number_of_users] = @number_of_users,

[number_of_devices] = @number_of_devices,

[number_of_free_months] = @number_of_free_months,

[active_from] = @active_from,

[active_to] = @active_to,

[discount_amount] = @discount_amount,

[discount_percent] = @discount_percent,

[usage_count] = @usage_count

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_code]

[licensing]

**[licensing].[p_promo_type_delete]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_promo_type_delete]

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON


-----

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_type]

[licensing]

**[licensing].[p_promo_type_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@pagesize

int


-----

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_promo_type_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name]

FROM [licensing].[t_promo_type] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS


-----

SELECT @totalrows = count(1)

FROM [licensing].[t_promo_type] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_type]

[licensing]

**[licensing].[p_promo_type_get_by_id]**

Parameters

Name

Data Type

Max Length (Bytes)

@id

int


-----

CREATE PROC [licensing].[p_promo_type_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[name]

FROM [licensing].[t_promo_type] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_type]

[licensing]

**[licensing].[p_promo_type_insert]**

Parameters


-----

Max Length (Bytes)

Direction

@name

nvarchar(250)

500

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_promo_type_insert]

@name nvarchar(250),

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON


-----

[name]

)

VALUES (

@name

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_type]

[licensing]

**[licensing].[p_promo_type_update]**

Parameters

Name


-----

Direction

@id

int

4

@name

nvarchar(250)

500

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_promo_type_update]

@id int,

@name nvarchar(250),

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_promo_type] SET


-----

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_promo_type]

[licensing]

**[licensing].[p_subscription_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int


-----

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_delete]

@id int,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_subscription]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses


-----

[licensing]

**[licensing].[p_subscription_device_delete]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_device_delete]


-----

AS BEGIN

SET NOCOUNT ON

DELETE FROM [licensing].[t_subscription_device]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_device]

[licensing]

**[licensing].[p_subscription_device_get_all]**

Parameters

Name

Data Type


-----

Direction

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_device_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],


-----

[device_code],

[device_name],

[date_created],

[status]

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_device]

[licensing]

**[licensing].[p_subscription_device_get_by_id]**


-----

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_subscription_device_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[subscription_id],

[device_code],

[device_name],

[date_created],

[status]

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

WHERE [id] = @id


-----

GO

Uses

[licensing].[t_subscription_device]

[licensing]

**[licensing].[p_subscription_device_get_by_subscriptionid]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@subscription_id

int

4

@status

tinyint


-----

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].

[p_subscription_device_get_by_subscriptionid]

@subscription_id int,

@status tinyint,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],


-----

[device_name],

[date_created],

[status]

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

WHERE [subscription_id] = @subscription_id

AND ((@status is null) or ([status] = @status))

ORDER BY [id] ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

WHERE [subscription_id] = @subscription_id

AND ((@status is null) or ([status] = @status))

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_device]

[licensing]


-----

**[licensing].[p_subscription_device_get_by_subscriptionid_devicecode]**

Parameters

Name

Data Type

Max Length (Bytes)

@subscription_id

int

4

@device_code

nvarchar(250)

500

SQL Script

CREATE PROC [licensing].

[p_subscription_device_get_by_subscriptionid_devicecode]

@subscription_id int,

@device_code nvarchar(250)

AS BEGIN

SET NOCOUNT ON

SELECT [id],


-----

[device_code],

[device_name],

[date_created],

[status]

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

WHERE [subscription_id] = @subscription_id

AND [device_code] = @device_code

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_device]

[licensing]

**[licensing].[p_subscription_device_insert]**

Parameters

Name

Data Type


-----

Direction

@subscription_id

int

4

@device_code

nvarchar(250)

500

@device_name

nvarchar(500)

1000

@date_created

datetime

8

@status

tinyint

1

@id

int


-----

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_device_insert]

@subscription_id int,

@device_code nvarchar(250),

@device_name nvarchar(500),

@date_created datetime,

@status tinyint,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_subscription_device] (

[subscription_id],

[device_code],

[device_name],

[date_created],


-----

VALUES (

@subscription_id,

@device_code,

@device_name,

@date_created,

@status

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_device]

[licensing]

**[licensing].[p_subscription_device_update]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@subscription_id

int

4

@device_code

nvarchar(250)

500

@device_name

nvarchar(500)

1000

@date_created

datetime


-----

tinyint

1

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_device_update]

@id int,

@subscription_id int,

@device_code nvarchar(250),

@device_name nvarchar(500),

@date_created datetime,

@status tinyint,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_subscription_device] SET

[subscription_id] = @subscription_id,


-----

[date_created] = @date_created,

[status] = @status

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_device]

[licensing]

**[licensing].[p_subscription_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[customer_id],

[product_id],

[billing_type_id],


-----

[number_of_devices],

[active_from],

[active_to],

[status],

[date_created]

FROM [licensing].[t_subscription] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription]

[licensing]

**[licensing].[p_subscription_get_by_customerid]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@customer_id

int

4

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script


-----

@customer_id int,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[customer_id],

[product_id],

[billing_type_id],

[number_of_users],

[number_of_devices],

[active_from],

[active_to],

[status],

[date_created]

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE [customer_id] = @customer_id

ORDER BY [id] ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS


-----

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE [customer_id] = @customer_id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription]

[licensing]

**[licensing].[p_subscription_get_by_customerid_productfamilycode]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@customer_id

int


-----

@product_family_code

nvarchar(100)

200

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].

[p_subscription_get_by_customerid_productfamilycode]

@customer_id int,

@product_family_code nvarchar(100),

@pagesize int,

@pagenumber int,


-----

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[customer_id],

[product_id],

[billing_type_id],

[number_of_users],

[number_of_devices],

[active_from],

[active_to],

[status],

[date_created]

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE ((@customer_id is null) or ([customer_id] =
@customer_id))

AND ((@product_family_code is null) OR EXISTS (

SELECT NULL FROM [licensing].[t_product]

WHERE [product_family_code] = @product_family_code

AND [product_id] = [t_subscription].product_id

))

ORDER BY [date created] DESC


-----

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE ((@customer_id is null) or ([customer_id] =
@customer_id))

AND ((@product_family_code is null) OR EXISTS (

SELECT NULL FROM [licensing].[t_product]

WHERE [product_family_code] = @product_family_code

AND [product_id] = [t_subscription].product_id

))

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_product]

[licensing].[t_subscription]

[licensing]

**[licensing].[p_subscription_get_by_id]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@id

int

4

SQL Script

CREATE PROC [licensing].[p_subscription_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[customer_id],

[product_id],

[billing_type_id],

[number_of_users],

[number_of_devices],

[active_from],

[active_to],


-----

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription]

[licensing]

**[licensing].[p_subscription_get_by_subscriptiondevice]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@device_code

nvarchar(250)

500


-----

tinyint

1

@pagesize

int

4

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].

[p_subscription_get_by_subscriptiondevice]

@device_code nvarchar(250),

@device_status tinyint,

@pagesize int,

@pagenumber int,


-----

SET NOCOUNT ON

SELECT [id],

[customer_id],

[product_id],

[billing_type_id],

[number_of_users],

[number_of_devices],

[active_from],

[active_to],

[status],

[date_created]

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE EXISTS (

SELECT null

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

WHERE [subscription_id] = [t_subscription].id

AND [device_code] = @device_code

AND ((@device_status is null) or ([status] = @device_status))

)

ORDER BY [id] ASC


-----

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE EXISTS (

SELECT null

FROM [licensing].[t_subscription_device] WITH(NOLOCK)

WHERE [subscription_id] = [t_subscription].id

AND [device_code] = @device_code

AND ((@device_status is null) or ([status] = @device_status))

)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription]

[licensing].[t_subscription_device]

[licensing]

**[licensing].[p_subscription_get_by_subscriptionuser]**


-----

Name

Data Type

Max Length (Bytes)

Direction

@username

nvarchar(250)

500

@user_status

tinyint

1

@pagesize

int

4

@pagenumber

int

4

@totalrows

int


-----

SQL Script

CREATE PROC [licensing].[p_subscription_get_by_subscriptionuser]

@username nvarchar(250),

@user_status tinyint,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[customer_id],

[product_id],

[billing_type_id],

[number_of_users],

[number_of_devices],

[active_from],

[active_to],

[status],

[date_created]

FROM [licensing].[t_subscription] WITH(NOLOCK)


-----

SELECT null

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

WHERE [subscription_id] = [t_subscription].id

AND [username] = @username

AND ((@user_status is null) or ([status] = @user_status))

)

ORDER BY [id] ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription] WITH(NOLOCK)

WHERE EXISTS (

SELECT null

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

WHERE [subscription_id] = [t_subscription].id

AND [username] = @username

AND ((@user_status is null) or ([status] = @user_status))

)

SET NOCOUNT OFF

END


-----

Uses

[licensing].[t_subscription]

[licensing].[t_subscription_user]

[licensing]

**[licensing].[p_subscription_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@customer_id

int

4

@product_id

int


-----

@number_of_users

int

4

@number_of_devices

int

4

@active_from

datetime

8

@active_to

datetime

8

@status

tinyint

1

@date_created

datetime


-----

@id

int

4

Out

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_insert]

@customer_id int,

@product_id int,

@billing_type_id int,

@number_of_users int,

@number_of_devices int,

@active_from datetime,

@active_to datetime,

@status tinyint,

@date_created datetime,


-----

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_subscription] (

[customer_id],

[product_id],

[billing_type_id],

[number_of_users],

[number_of_devices],

[active_from],

[active_to],

[status],

[date_created]

)

VALUES (

@customer_id,

@product_id,

@billing_type_id,

@number_of_users,

@number_of_devices,

@active_from,


-----

@date_created

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription]

[licensing]

**[licensing].[p_subscription_search]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

1000

@activeFromDateFilter

nvarchar(500)

1000

@activeToDateFilter

nvarchar(500)

1000

@statusFilter

nvarchar(500)

1000

@pagesize

int

4

@pagenumber

int

4

@wantsCount

bit


-----

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_search]

@customerUsernameFilter nvarchar(500),

@activeFromDateFilter nvarchar(500),

@activeToDateFilter nvarchar(500),

@statusFilter nvarchar(500),

@pagesize int,

@pagenumber int,

@wantsCount bit,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [t_subscription].[id],

[t_subscription].[customer_id],

[t_subscription].[product_id],


-----

[t_subscription].[number_of_devices],

[t_subscription].[active_from],

[t_subscription].[active_to],

[t_subscription].[status],

[t_subscription].[date_created],

[t_customer].username as customer_username,

[t_customer].[name] as customer_name

FROM [licensing].[t_subscription] WITH(NOLOCK)

INNER JOIN [licensing].[t_customer] WITH(NOLOCK) ON

[t_subscription].customer_id = [t_customer].id

WHERE ((@customerUsernameFilter is null) or
([t_customer].username like @customerUsernameFilter))

AND ((@activeFromDateFilter is null) or ([licensing].

[fn_ApplyFilter]([t_subscription].[active_from],
SUBSTRING(@activeFromDateFilter, 1, 2), CONVERT(DATETIME,
SUBSTRING(@activeFromDateFilter, 3, 1000), 120)) = 1))

AND ((@activeToDateFilter is null) or ([licensing].[fn_ApplyFilter]
([t_subscription].[active_to], SUBSTRING(@activeToDateFilter, 1,
2), CONVERT(DATETIME, SUBSTRING(@activeToDateFilter, 3,
1000), 120)) = 1))

AND ((@statusFilter is null) or ([licensing].[fn_ApplyFilter]
([t_subscription].[status], SUBSTRING(@statusFilter, 1, 2),
CONVERT(TINYINT, SUBSTRING(@statusFilter, 3, 1000))) = 1))

ORDER BY [date_created] DESC

OFFSET @pagesize * (@pagenumber - 1) ROWS


-----

IF (@wantsCount = 1)

BEGIN

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription] WITH(NOLOCK)

INNER JOIN [licensing].[t_customer] WITH(NOLOCK) ON

[t_subscription].customer_id = [t_customer].id

WHERE ((@customerUsernameFilter is null) or
([t_customer].username like @customerUsernameFilter))

AND ((@activeFromDateFilter is null) or ([licensing].

[fn_ApplyFilter]([t_subscription].[active_from],
SUBSTRING(@activeFromDateFilter, 1, 2), CONVERT(DATETIME,
SUBSTRING(@activeFromDateFilter, 3, 1000), 120)) = 1))

AND ((@activeToDateFilter is null) or ([licensing].[fn_ApplyFilter]
([t_subscription].[active_to], SUBSTRING(@activeToDateFilter, 1,
2), CONVERT(DATETIME, SUBSTRING(@activeToDateFilter, 3,
1000), 120)) = 1))

AND ((@statusFilter is null) or ([licensing].[fn_ApplyFilter]
([t_subscription].[status], SUBSTRING(@statusFilter, 1, 2),
CONVERT(TINYINT, SUBSTRING(@statusFilter, 3, 1000))) = 1))

END ELSE BEGIN

SET @totalrows = 0

END

SET NOCOUNT OFF

END

GO


-----

[licensing].[t_customer]

[licensing].[t_subscription]

[licensing].[fn_ApplyFilter]

[licensing]

**[licensing].[p_subscription_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@customer_id

int

4

@product_id


-----

@billing_type_id

int

4

@number_of_users

int

4

@number_of_devices

int

4

@active_from

datetime

8

@active_to

datetime

8

@status

tinyint


-----

datetime

8

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_update]

@id int,

@customer_id int,

@product_id int,

@billing_type_id int,

@number_of_users int,

@number_of_devices int,

@active_from datetime,

@active_to datetime,

@status tinyint,

@date_created datetime,

@rows int = 0 output

AS BEGIN


-----

UPDATE [licensing].[t_subscription] SET

[customer_id] = @customer_id,

[product_id] = @product_id,

[billing_type_id] = @billing_type_id,

[number_of_users] = @number_of_users,

[number_of_devices] = @number_of_devices,

[active_from] = @active_from,

[active_to] = @active_to,

[status] = @status,

[date_created] = @date_created

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription]

[licensing]


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id

int

4

@rows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_user_delete]

@id int,

@rows int = 0 output

AS BEGIN


-----

DELETE FROM [licensing].[t_subscription_user]

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_user]

[licensing]

**[licensing].[p_subscription_user_get_all]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

@pagenumber

int

4

@totalrows

int

4

Out

SQL Script

CREATE PROC [licensing].[p_subscription_user_get_all]

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[subscription_id],

[username],

[date_created],


-----

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

ORDER BY id ASC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_user]

[licensing]

**[licensing].[p_subscription_user_get_by_id]**

Parameters

Name

Data Type


-----

int

4

SQL Script

CREATE PROC [licensing].[p_subscription_user_get_by_id]

@id int

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[subscription_id],

[username],

[date_created],

[status]

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

WHERE [id] = @id

SET NOCOUNT OFF

END

GO

Uses

[li i ] [ b i i ]


-----

**[licensing].[p_subscription_user_get_by_subscriptionid_username]**

Parameters

Name

Data Type

Max Length (Bytes)

@subscription_id

int

4

@username

nvarchar(250)

500

SQL Script

CREATE PROC [licensing].

[p_subscription_user_get_by_subscriptionid_username]

@subscription_id int,

@username nvarchar(250)

AS BEGIN

SET NOCOUNT ON


-----

[subscription_id],

[username],

[date_created],

[status]

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

WHERE [subscription_id] = @subscription_id

AND [username] = @username

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_user]

[licensing]

**[licensing].[p_subscription_user_insert]**

Parameters

Name

Data Type


-----

Direction

@subscription_id

int

4

@username

nvarchar(250)

500

@date_created

datetime

8

@status

tinyint

1

@id

int

4

Out

@rows

int


-----

Out

SQL Script

CREATE PROC [licensing].[p_subscription_user_insert]

@subscription_id int,

@username nvarchar(250),

@date_created datetime,

@status tinyint,

@id int output,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

INSERT INTO [licensing].[t_subscription_user] (

[subscription_id],

[username],

[date_created],

[status]

)

VALUES (

@subscription_id,

@username,


-----

@status

)

SET @id = SCOPE_IDENTITY()

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_subscription_user]

[licensing]

**[licensing].[p_subscription_user_search]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

@username

nvarchar(250)

500

@product_family_code

nvarchar(100)

200

@status

tinyint

1

@pagesize

int

4

@pagenumber

int

4

@totalrows

int


-----

Out

SQL Script

CREATE PROC [licensing].[p_subscription_user_search]

@subscription_id int,

@username nvarchar(250),

@product_family_code nvarchar(100),

@status tinyint,

@pagesize int,

@pagenumber int,

@totalrows int = 0 output

AS BEGIN

SET NOCOUNT ON

SELECT [id],

[subscription_id],

[username],

[date_created],

[status]

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

WHERE ((@subscription_id is null) OR ([subscription_id] =
@subscription_id))


-----

AND ((@product_family_code is null) OR EXISTS (

SELECT NULL

FROM [licensing].[t_subscription]

INNER JOIN [licensing].[t_product] ON [t_subscription].product_id
= [t_product].id

WHERE [product_family_code] = @product_family_code

AND [t_subscription].id = [t_subscription_user].[subscription_id]

))

ORDER BY [id] DESC

OFFSET @pagesize * (@pagenumber - 1) ROWS

FETCH NEXT @pagesize ROWS ONLY;

SELECT @totalrows = count(1)

FROM [licensing].[t_subscription_user] WITH(NOLOCK)

WHERE ((@subscription_id is null) OR ([subscription_id] =
@subscription_id))

AND ((@username is null) OR ([username] = @username))

AND ((@status is null) OR ([status] = @status))

AND ((@product_family_code is null) OR EXISTS (

SELECT NULL

FROM [licensing].[t_subscription]

INNER JOIN [licensing].[t_product] ON [t_subscription].product_id
= [t product] id


-----

AND [t_subscription].id = [t_subscription_user].[subscription_id]

))

SET NOCOUNT OFF

END

GO

Uses

[licensing].[t_product]

[licensing].[t_subscription]

[licensing].[t_subscription_user]

[licensing]

**[licensing].[p_subscription_user_update]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@id


-----

@subscription_id

int

4

@username

nvarchar(250)

500

@date_created

datetime

8

@status

tinyint

1

@rows

int

4

Out

SQL Script


-----

@id int,

@subscription_id int,

@username nvarchar(250),

@date_created datetime,

@status tinyint,

@rows int = 0 output

AS BEGIN

SET NOCOUNT ON

UPDATE [licensing].[t_subscription_user] SET

[subscription_id] = @subscription_id,

[username] = @username,

[date_created] = @date_created,

[status] = @status

WHERE [id] = @id

SET @rows = @@ROWCOUNT

SET NOCOUNT OFF

END

GO


-----

[licensing]

**[mft].[p_check_download_available]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@requestid

uniqueidentifier

16

@isavailable

bit

1

Out

SQL Script

CREATE PROCEDURE [mft].[p_check_download_available]

@requestid uniqueidentifier,


-----

BEGIN

DECLARE @count INT

SELECT @count = COUNT(*) FROM mft.t_chunkingmachine with
(nolock)

WHERE chunkingmachineid = @requestid

AND chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('ready to download')

AND chunks > 0

IF @count > 0

SET @isavailable = 1

ELSE

SET @isavailable = 0

END

GO

Uses

[mft].[t_chunkingmachine]

[mft].[fn_GetChunkingMachineStatusId]

[mft]

**[mft].[p check storageoperation finished]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@requestid

uniqueidentifier

16

@isfinished

bit

1

Out

SQL Script

CREATE PROCEDURE [mft].[p_check_storageoperation_finished]

@requestid UNIQUEIDENTIFIER,

@isfinished BIT OUTPUT

AS

BEGIN

DECLARE @count INT


-----

(nolock)

WHERE storageoperationsid = @requestid

AND storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('completed')

IF @count > 0

SET @isfinished = 1

ELSE

SET @isfinished = 0

END

GO

Uses

[mft].[t_storageoperations]

[mft].[fn_GetStorageMachineStatusId]

[mft]

**[mft].[p_check_upload_finished]**

Parameters

Name


-----

Direction

@requestid

uniqueidentifier

16

@isfinished

bit

1

Out

SQL Script

CREATE PROCEDURE [mft].[p_check_upload_finished]

@requestid UNIQUEIDENTIFIER,

@isfinished bit OUTPUT

AS

BEGIN

DECLARE @count INT

SELECT @count = COUNT(*) FROM mft.t_mergemachine with
(nolock)

WHERE mergemachineid = @requestid

AND mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('merge completed')

AND chunks > 0


-----

SET @isfinished = 1

ELSE

SET @isfinished = 0

END

GO

Uses

[mft].[t_mergemachine]

[mft].[fn_GetMergeMachineStatusId]

[mft]

**[mft].[p_chunkingmachine_book]**

Parameters

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100


-----

CREATE PROCEDURE [mft].[p_chunkingmachine_book]

@updateby nvarchar(50)

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft.t_chunkingmachine

SET updateby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate,

chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('PROCESSING')

WHERE chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('READY TO PROCESS')

AND bookedby is null

AND bookingdate is null


-----

username, [password], machineid,

filepath, [filename], filecheksum, temppath, buffersize, chunks,
updateby, lastupdate,

bookedby, bookingdate, retry

FROM mft.t_chunkingmachine

WHERE bookedby = @bookeby

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft].[fn_GetChunkingMachineStatusId]

[mft]

**[mft].[p_chunkingmachine_completed]**

Parameters

Name

Data Type


-----

Direction

@chunkingmachineid

uniqueidentifier

16

@updateby

nvarchar(50)

100

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [mft].[p_chunkingmachine_completed]

@chunkingmachineid uniqueidentifier,

@updateby nvarchar(50),

@rows int = 0 output

AS

declare @lastupdate datetime


-----

SET NOCOUNT ON

UPDATE mft.t_chunkingmachine

SET updateby = @updateby,

lastupdate = @lastupdate,

chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('DOWNLOAD COMPLETED')

WHERE chunkingmachineid = @chunkingmachineid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft].[fn_GetChunkingMachineStatusId]

[mft]

**[mft].[p_chunkingmachine_insert]**

Parameters


-----

Data Type

Max Length (Bytes)

Direction

@chunkingmachineid

uniqueidentifier

16

@domain

nvarchar(250)

500

@username

nvarchar(250)

500

@password

nvarchar(500)

1000

@machineid

uniqueidentifier

16

@fil h


-----

1000

@filename

nvarchar(500)

1000

@filecheksum

nvarchar(128)

256

@temppath

nvarchar(500)

1000

@buffersize

int

4

@updateby

nvarchar(50)

100

@rows

int


-----

Out

SQL Script

CREATE PROCEDURE [mft].[p_chunkingmachine_insert]

@chunkingmachineid uniqueidentifier,

@domain nvarchar(250),

@username nvarchar(250),

@password nvarchar(500),

@machineid uniqueidentifier,

@filepath nvarchar(500),

@filename nvarchar(500),

@filecheksum nvarchar(128),

@temppath nvarchar(500),

@buffersize int,

@updateby nvarchar(50),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

S OCO O


-----

INSERT INTO mft.t_chunkingmachine

(

chunkingmachineid,

chunkingmachinestatusid,

domain,

username,

[password],

machineid,

filepath,

[filename],

filecheksum,

temppath,

buffersize,

updateby,

lastupdate

)

VALUES

(

@chunkingmachineid,

mft.fn_GetChunkingMachineStatusId('READY TO PROCESS'),

@domain,


-----

@machineid,

@filepath,

@filename,

@filecheksum,

@temppath,

@buffersize,

@updateby,

@lastupdate

)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft].[fn_GetChunkingMachineStatusId]

[mft]

**[mft].[p_chunkingmachine_unbook]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@chunkingmachineid

uniqueidentifier

16

@updateby

nvarchar(50)

100

@retry

int

4

@chunkingmachinestatusid

int

4

@chunks

int


-----

@filecheksum

nvarchar(128)

256

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [mft].[p_chunkingmachine_unbook]

@chunkingmachineid uniqueidentifier,

@updateby nvarchar(50),

@retry int,

@chunkingmachinestatusid int,

@chunks int,

@filecheksum nvarchar(128),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()


-----

UPDATE top(1) mft.t_chunkingmachine

SET updateby = @updateby,

lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

chunks = @chunks,

retry = @retry,

filecheksum = @filecheksum,

chunkingmachinestatusid = @chunkingmachinestatusid

WHERE chunkingmachineid = @chunkingmachineid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft]

**[mft].[p_cleaningmachine_bookchunking]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100

@minutesfromstart

int

4

SQL Script

CREATE PROCEDURE [mft].[p_cleaningmachine_bookchunking]

@updateby nvarchar(50),

@minutesfromstart int

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime

set @bookingdate GETUTCDATE()


-----

SET NOCOUNT ON

UPDATE top(1) mft.t_chunkingmachine

SET updateby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate,

chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('CLEANING')

WHERE (chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('DOWNLOAD COMPLETED')
OR chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('READY TO CLEAN'))

AND bookedby is null

AND bookingdate is null

AND lastupdate < DATEADD(minute, -@minutesfromstart,
GETUTCDATE())

SELECT chunkingmachineid, chunkingmachinestatusid, domain,
username, [password], machineid,

filepath, [filename], filecheksum, temppath, buffersize, chunks,
updateby, lastupdate,

bookedby, bookingdate, retry

FROM mft.t_chunkingmachine

WHERE bookedby = @bookeby


-----

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft].[fn_GetChunkingMachineStatusId]

[mft]

**[mft].[p_cleaningmachine_bookmergemoving]**

Parameters

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100

@minutesfromstart

int


-----

CREATE PROCEDURE [mft].

[p_cleaningmachine_bookmergemoving]

@updateby nvarchar(50),

@minutesfromstart int

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft.t_mergemachine

SET updateby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate

WHERE (mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('CLEAN COMPLETED') OR

mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('OPERATION CANCELLED') OR


-----

AND bookedby is null

AND bookingdate is null

AND lastupdate < DATEADD(minute, -@minutesfromstart,
GETUTCDATE())

SELECT mergemachineid, mergemachinestatusid,

domain, username, [password], machineid,

filepath, [filename], filecheksum, temppath, chunks, updateby,
lastupdate,

bookedby, bookingdate, retry

FROM mft.t_mergemachine

WHERE bookedby = @bookeby

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_mergemachine]

[mft].[fn_GetMergeMachineStatusId]

[mft]


-----

Parameters

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100

@minutesfromstart

int

4

SQL Script

CREATE PROCEDURE [mft].[p_cleaningmachine_bookmerging]

@updateby nvarchar(50),

@minutesfromstart int

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()


-----

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft.t_mergemachine

SET updateby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate,

mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('CLEANING')

WHERE (mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('MERGE COMPLETED') OR
mergemachinestatusid = mft.fn_GetMergeMachineStatusId('READY
TO CLEAN'))

AND bookedby is null

AND bookingdate is null

AND lastupdate < DATEADD(minute, -@minutesfromstart,
GETUTCDATE())

SELECT mergemachineid, mergemachinestatusid, domain,
username, [password], machineid,

filepath, [filename], filecheksum, temppath, chunks, updateby,
lastupdate,

bookedby, bookingdate, retry

FROM mft t mergemachine


-----

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_mergemachine]

[mft].[fn_GetMergeMachineStatusId]

[mft]

**[mft].[p_cleaningmachine_move_chunkinghistory]**

Parameters

Name

Data Type

Max Length (Bytes)

@chunkingmachineid

uniqueidentifier

16


-----

CREATE PROCEDURE [mft].

[p_cleaningmachine_move_chunkinghistory]

@chunkingmachineid uniqueidentifier

AS

BEGIN

SET NOCOUNT ON;

INSERT INTO mft.t_chunkingmachine_history

SELECT *, GETUTCDATE() as moved_on from
mft.t_chunkingmachine

WHERE mft.t_chunkingmachine.chunkingmachineid =
@chunkingmachineid

DELETE FROM mft.t_chunkingmachine

WHERE mft.t_chunkingmachine.chunkingmachineid =
@chunkingmachineid

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[mft].[t_chunkingmachine]


-----

**[mft].[p_cleaningmachine_move_mergehistory]**

Parameters

Name

Data Type

Max Length (Bytes)

@mergemachineid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [mft].

[p_cleaningmachine_move_mergehistory]

@mergemachineid uniqueidentifier

AS

BEGIN

SET NOCOUNT ON;

INSERT INTO mft.t_mergemachine_history

SELECT *, GETUTCDATE() as moved on from mft.t mergemachine


-----

DELETE FROM mft.t_mergemachine

WHERE mft.t_mergemachine.mergemachineid = @mergemachineid

SET NOCOUNT OFF

RETURN 0

END

GO

Uses

[mft].[t_mergemachine]

[mft].[t_mergemachine_history]

[mft]

**[mft].[p_cleaningmachine_unbookchunking]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction


-----

16

@updateby

nvarchar(50)

100

@retry

int

4

@chunkingmachinestatusid

int

4

@chunks

int

4

@rows

int

4

Out

SQL Script


-----

CREATE PROCEDURE [mft].[p_cleaningmachine_unbookchunking]

@chunkingmachineid uniqueidentifier,

@updateby nvarchar(50),

@retry int,

@chunkingmachinestatusid int,

@chunks int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft.t_chunkingmachine

SET updateby = @updateby,

lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

chunks = @chunks,

retry = @retry,

chunkingmachinestatusid = @chunkingmachinestatusid

WHERE chunkingmachineid = @chunkingmachineid


-----

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft]

**[mft].[p_cleaningmachine_unbookmerging]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@mergemachineid

uniqueidentifier

16

@updateby


-----

@retry

int

4

@mergemachinestatusid

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [mft].[p_cleaningmachine_unbookmerging]

@mergemachineid uniqueidentifier,

@updateby nvarchar(50),

@retry int,

@mergemachinestatusid int,

@rows int = 0 output

AS


-----

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft.t_mergemachine

SET updateby = @updateby,

lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

retry = @retry,

mergemachinestatusid = @mergemachinestatusid

WHERE mergemachineid = @mergemachineid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_mergemachine]

[mft]

**[mft].[p_cleaningmachinenotcompleted_bookchunking]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100

@minutesfromstart

int

4

SQL Script

CREATE PROCEDURE [mft].

[p_cleaningmachinenotcompleted_bookchunking]

@updateby nvarchar(50),

@minutesfromstart int

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime


-----

SET NOCOUNT ON

UPDATE top(1) mft.t_chunkingmachine

SET updateby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate,

chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('CLEANING')

WHERE (chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('READY TO DOWNLOAD'))

AND bookedby is null

AND bookingdate is null

AND lastupdate < DATEADD(minute, -@minutesfromstart,
GETUTCDATE())

SELECT chunkingmachineid, chunkingmachinestatusid, domain,
username, [password], machineid,

filepath, [filename], filecheksum, temppath, buffersize, chunks,
updateby, lastupdate,

bookedby, bookingdate, retry

FROM mft.t_chunkingmachine

WHERE bookedby = @bookeby


-----

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft].[fn_GetChunkingMachineStatusId]

[mft]

**[mft].[p_cleaningmachinenotcompleted_bookchunkingmoving]**

Parameters

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100

@minutesfromstart

int


-----

CREATE PROCEDURE [mft].

[p_cleaningmachinenotcompleted_bookchunkingmoving]

@updateby nvarchar(50),

@minutesfromstart int

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft.t_chunkingmachine

SET updateby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate

WHERE (chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('CLEAN COMPLETED') OR

chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('OPERATION CANCELLED')
OR


-----

AND bookedby is null

AND bookingdate is null

AND lastupdate < DATEADD(minute, -@minutesfromstart,
GETUTCDATE())

SELECT chunkingmachineid, chunkingmachinestatusid, domain,
username, [password], machineid,

filepath, [filename], filecheksum, temppath, buffersize, chunks,
updateby, lastupdate,

bookedby, bookingdate, retry

FROM mft.t_chunkingmachine

WHERE bookedby = @bookeby

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_chunkingmachine]

[mft].[fn_GetChunkingMachineStatusId]

[mft]


-----

Parameters

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100

@minutesfromstart

int

4

SQL Script

CREATE PROCEDURE [mft].

[p_cleaningmachinenotcompleted_bookmerging]

@updateby nvarchar(50),

@minutesfromstart int

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime


-----

SET NOCOUNT ON

UPDATE top(1) mft.t_mergemachine

SET updateby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate,

mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('CLEANING')

WHERE (mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('READY TO MERGE'))

AND bookedby is null

AND bookingdate is null

AND lastupdate < DATEADD(minute, -@minutesfromstart,
GETUTCDATE())

SELECT mergemachineid, mergemachinestatusid,

domain, username, [password], machineid,

filepath, [filename], filecheksum, temppath, chunks, updateby,
lastupdate,

bookedby, bookingdate, retry

FROM mft.t_mergemachine

WHERE bookedby = @bookeby


-----

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_mergemachine]

[mft].[fn_GetMergeMachineStatusId]

[mft]

**[mft].[p_configuration_load_documentexplorer]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@publishid

uniqueidentifier

16

Out


-----

CREATE PROCEDURE [mft].

[p_configuration_load_documentexplorer]

@publishid uniqueidentifier output

AS

SET NOCOUNT ON;

SELECT [key], [value]

FROM mft.t_configuration_documentexplorer with (nolock)

SELECT @publishid = publishid

FROM mft.t_caches with (nolock)

WHERE cacheid =
mft.fn_GetCacheId('configuration_documentexplorer')

RETURN

GO

Uses

[mft]

**[mft].[p_get_activity_from_chunking]**

Parameters

Name


-----

Max Length (Bytes)

@machineid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [mft].[p_get_activity_from_chunking]

@machineid uniqueidentifier

AS

select chunkingmachineid, chunks,
filecheksum,chunkingmachinestatusid

from mft.t_chunkingmachine with (nolock)

where machineid = @machineid

and (chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('READY TO DOWNLOAD') or
chunkingmachinestatusid =
mft.fn_GetChunkingMachineStatusId('ERROR'))

SET NOCOUNT OFF

RETURN 0

GO


-----

[mft].[fn_GetChunkingMachineStatusId]

[mft]

**[mft].[p_get_activity_from_merge]**

Parameters

Name

Data Type

Max Length (Bytes)

@machineid

uniqueidentifier

16

SQL Script

CREATE PROCEDURE [mft].[p_get_activity_from_merge]

@machineid uniqueidentifier

AS

select mergemachineid, filecheksum, mergemachinestatusid

from mft.t_mergemachine with (nolock)


-----

mft.fn_GetMergeMachineStatusId('MERGE COMPLETED') or
mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('ERROR'))

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_mergemachine]

[mft].[fn_GetMergeMachineStatusId]

[mft]

**[mft].[p_get_activity_from_storage]**

Parameters

Name

Data Type

Max Length (Bytes)

@machineid

uniqueidentifier

16


-----

CREATE PROCEDURE [mft].[p_get_activity_from_storage]

@machineid uniqueidentifier

AS

select storageoperationsid, storageoperationsmachinestatusid

from [mft].t_storageoperations with (nolock)

where machineid = @machineid

and (storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('COMPLETED') OR
storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('ERROR'))

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_storageoperations]

[mft].[fn_GetStorageMachineStatusId]

[mft]

**[mft].[p_mergemachine_book]**


-----

Name

Data Type

Max Length (Bytes)

@updateby

nvarchar(50)

100

SQL Script

CREATE PROCEDURE [mft].[p_mergemachine_book]

@updateby nvarchar(50)

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft.t_mergemachine

SET updateby = @updateby,

lastupdate @bookingdate


-----

bookingdate = @bookingdate,

mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('PROCESSING')

WHERE mergemachinestatusid =
mft.fn_GetMergeMachineStatusId('READY TO PROCESS')

AND bookedby is null

AND bookingdate is null

SELECT mergemachineid, mergemachinestatusid, domain,
username, [password], machineid,

filepath, [filename], filecheksum, temppath, chunks, updateby,
lastupdate,

bookedby, bookingdate, retry

FROM mft.t_mergemachine

WHERE bookedby = @bookeby

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_mergemachine]

[mft].[fn_GetMergeMachineStatusId]


-----

**[mft].[p_mergemachine_insert]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@mergemachineid

uniqueidentifier

16

@domain

nvarchar(250)

500

@username

nvarchar(250)

500

@password

nvarchar(500)


-----

@machineid

uniqueidentifier

16

@filepath

nvarchar(500)

1000

@filename

nvarchar(500)

1000

@filecheksum

nvarchar(128)

256

@temppath

nvarchar(500)

1000

@updateby

nvarchar(50)

100


-----

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [mft].[p_mergemachine_insert]

@mergemachineid uniqueidentifier,

@domain nvarchar(250),

@username nvarchar(250),

@password nvarchar(500),

@machineid uniqueidentifier,

@filepath nvarchar(500),

@filename nvarchar(500),

@filecheksum nvarchar(128),

@temppath nvarchar(500),

@updateby nvarchar(50),

@chunks int,


-----

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

INSERT INTO mft.t_mergemachine

(

mergemachineid,

mergemachinestatusid,

domain,

username,

[password],

machineid,

filepath,

[filename],

filecheksum,

temppath,

updateby,

chunks,

lastupdate


-----

@mergemachineid,

mft.fn_GetMergeMachineStatusId('CLIENT UPLOADING'),

@domain,

@username,

@password,

@machineid,

@filepath,

@filename,

@filecheksum,

@temppath,

@updateby,

@chunks,

@lastupdate

)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO


-----

[mft].[fn_GetMergeMachineStatusId]

[mft]

**[mft].[p_mergemachine_ready_to_process]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@mergemachineid

uniqueidentifier

16

@updateby

nvarchar(50)

100

@rows

int


-----

SQL Script

CREATE PROCEDURE [mft].[p_mergemachine_ready_to_process]

@mergemachineid uniqueidentifier,

@updateby nvarchar(50),

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE mft.t_mergemachine

SET updateby = @updateby,

lastupdate = @lastupdate,

mergemachinestatusid = mft.fn_GetMergeMachineStatusId('READY
TO PROCESS')

WHERE mergemachineid = @mergemachineid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO


-----

[mft].[t_mergemachine]

[mft].[fn_GetMergeMachineStatusId]

[mft]

**[mft].[p_mergemachine_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@mergemachineid

uniqueidentifier

16

@updateby

nvarchar(50)

100

@retry

int


-----

@mergemachinestatusid

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [mft].[p_mergemachine_unbook]

@mergemachineid uniqueidentifier,

@updateby nvarchar(50),

@retry int,

@mergemachinestatusid int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) mft t mergemachine


-----

lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

retry = @retry,

mergemachinestatusid = @mergemachinestatusid

WHERE mergemachineid = @mergemachineid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_mergemachine]

[mft]

**[mft].[p_storagemachine_book]**

Parameters

Name

Data Type


-----

@updateby

nvarchar(50)

100

SQL Script

CREATE PROCEDURE [mft].[p_storagemachine_book]

@updateby nvarchar(50)

AS

declare @bookeby uniqueidentifier

set @bookeby = NEWID()

declare @bookingdate datetime

set @bookingdate = GETUTCDATE()

SET NOCOUNT ON

UPDATE top(1) [mft].t_storageoperations

SET updatedby = @updateby,

lastupdate = @bookingdate,

bookedby = @bookeby,

bookingdate = @bookingdate,

storageoperationsmachinestatusid


-----

WHERE storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('READY TO PROCESS')

AND bookedby is null

AND bookingdate is null

SELECT storageoperationsid,
storageoperationsmachinestatusid,storageoperationtype, updatedby,
lastupdate,

bookedby, bookingdate, retry, domain, username, password,
action1, action2, machineid

FROM [mft].t_storageoperations

WHERE bookedby = @bookeby

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_storageoperations]

[mft].[fn_GetStorageMachineStatusId]

[mft]

**[mft].[p_storagemachine_insert]**


-----

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@storageoperationsid

uniqueidentifier

16

@domain

nvarchar(250)

500

@username

nvarchar(250)

500

@password

nvarchar(500)

1000

@storageoperationtype

int


-----

@action1

nvarchar(500)

1000

@action2

nvarchar(500)

1000

@updateby

nvarchar(50)

100

@machineid

uniqueidentifier

16

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [mft].[p_storagemachine_insert]

@storageoperationsid uniqueidentifier


-----

@username nvarchar(250),

@password nvarchar(500),

@storageoperationtype int,

@action1 nvarchar(500),

@action2 nvarchar(500),

@updateby nvarchar(50),

@machineid uniqueidentifier,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()

SET NOCOUNT ON

INSERT INTO [mft].[t_storageoperations]

([storageoperationsid]

,[storageoperationsmachinestatusid]

,[storageoperationtype]

,[updatedby]

,[lastupdate]

,[action1]


-----

,[password]

,[machineid]

,[domain])

VALUES

(

@storageoperationsid,

mft.fn_GetStorageMachineStatusId('READY TO PROCESS'),

@storageoperationtype,

@updateby,

@lastupdate,

@action1,

@action2,

@username,

@password,

@machineid,

@domain

)

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0


-----

Uses

[mft].[t_storageoperations]

[mft].[fn_GetStorageMachineStatusId]

[mft]

**[mft].[p_storagemachine_unbook]**

Parameters

Name

Data Type

Max Length (Bytes)

Direction

@storagemachineid

uniqueidentifier

16

@updateby

nvarchar(50)

100


-----

@storagemachinestatusid

int

4

@rows

int

4

Out

SQL Script

CREATE PROCEDURE [mft].[p_storagemachine_unbook]

@storagemachineid uniqueidentifier,

@updateby nvarchar(50),

@retry int,

@storagemachinestatusid int,

@rows int = 0 output

AS

declare @lastupdate datetime

set @lastupdate = GETUTCDATE()


-----

UPDATE top(1) [mft].[t_storageoperations]

SET updatedby = @updateby,

lastupdate = @lastupdate,

bookedby = null,

bookingdate = null,

retry = @retry,

storageoperationsmachinestatusid = @storagemachinestatusid

WHERE storageoperationsid = @storagemachineid

set @rows = @@ROWCOUNT

SET NOCOUNT OFF

RETURN 0

GO

Uses

[mft].[t_storageoperations]

[mft]

**[mft].[p_storageoperations_move_history]**

SQL Script


-----

-==================================

-- Author: <Author,,Name>

-- Create date: <Create Date,,>

-- Description: <Description,,>

-==================================

CREATE PROCEDURE [mft].[p_storageoperations_move_history]

AS

BEGIN

SET NOCOUNT ON;

INSERT INTO [mft].[t_storageoperations_history]

SELECT * from [mft].[t_storageoperations]

WHERE [mft].

[t_storageoperations].storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('COMPLETED')

OR [mft].t_storageoperations.storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('OPERATION CANCELLED')

OR [mft].t_storageoperations.storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('ERROR')

DELETE FROM [mft].t_storageoperations

WHERE [mft].t_storageoperations.storageoperationsmachinestatusid
= mft.fn_GetStorageMachineStatusId('COMPLETED')


-----

mft.fn_GetStorageMachineStatusId('OPERATION CANCELLED')

OR [mft].t_storageoperations.storageoperationsmachinestatusid =
mft.fn_GetStorageMachineStatusId('ERROR')

END

GO

Uses

[mft].[t_storageoperations]

[mft].[t_storageoperations_history]

[mft].[fn_GetStorageMachineStatusId]

[mft]

**Scalar-valued Functions**

Objects

Name

conversion.fn_GetConvertableFileTypeId

conversion.fn_GetStateMachineStatusId

dbo.fn_GetBlobStatus

dbo.fn_GetCacheId

dbo.fn GetOfficeconverterMachineStatusId


-----

dbo.fn_GetTileType

licensing.fn_ApplyFilter

mft.fn_GetChunkingMachineStatusId

mft.fn_GetMergeMachineStatusId

mft.fn_GetStateMachineStatusId

mft.fn_GetStorageMachineStatusId

**[conversion].[fn_GetConvertableFileTypeId]**

Parameters

Name

Data Type

Max Length (Bytes)

@convertablefiletype

nvarchar(50)

100

SQL Script

CREATE FUNCTION [conversion].[fn_GetConvertableFileTypeId]


-----

RETURNS INT

AS

BEGIN

DECLARE @convertablefiletypeid INT

SET @convertablefiletype = UPPER(@convertablefiletype)

IF @convertablefiletype = 'WORDDOCUMENT'

SET @convertablefiletypeid = 1

ELSE IF @convertablefiletype = 'EXCELDOCUMENT'

SET @convertablefiletypeid = 2

ELSE IF @convertablefiletype = 'POWERPOINTDOCUMENT'

SET @convertablefiletypeid = 3

ELSE IF @convertablefiletype = 'PDFFILE'

SET @convertablefiletypeid = 4

ELSE IF @convertablefiletype = 'UNSUPPORTED'

SET @convertablefiletypeid = 99

ELSE

SET @convertablefiletypeid = -1

RETURN @convertablefiletypeid

END

GO


-----

Uses

[conversion]

**[conversion].[fn_GetStateMachineStatusId]**

Parameters

Name

Data Type

Max Length (Bytes)

@statemachinestatusdescription

nvarchar(50)

100

SQL Script

CREATE FUNCTION [conversion].[fn_GetStateMachineStatusId]

(

@statemachinestatusdescription NVARCHAR(50)

)

RETURNS INT

AS

BEGIN


-----

UPPER(@statemachinestatusdescription)

IF @statemachinestatusdescription = 'NOT READY'

SET @statemachinestatusid = 0

ELSE IF @statemachinestatusdescription = 'READY'

SET @statemachinestatusid = 1

ELSE IF @statemachinestatusdescription = 'WORKING'

SET @statemachinestatusid = 2

ELSE IF @statemachinestatusdescription = 'FINISHED'

SET @statemachinestatusid = 10

ELSE IF @statemachinestatusdescription = 'ERROR'

SET @statemachinestatusid = 11

ELSE

SET @statemachinestatusid = -1

RETURN @statemachinestatusid

END

GO

Uses

[conversion]

Used By


-----

[conversion].[p_conversion_book_history]

[conversion].[p_conversion_insert]

[conversion].[p_image_resizing_book]

[conversion].[p_image_resizing_book_fallback]

[conversion].[p_image_resizing_book_history]

[conversion].[p_image_resizing_booking_insert]

**[dbo].[fn_GetBlobStatus]**

Parameters

Name

Data Type

Max Length (Bytes)

@blobldescription

nvarchar(50)

100

SQL Script

CREATE FUNCTION [dbo].[fn_GetBlobStatus]

(

@blobldescription NVARCHAR(50)


-----

RETURNS INT

AS

BEGIN

DECLARE @blobstatusid INT

SET @blobldescription = UPPER(@blobldescription)

IF @blobldescription = 'NOTONAZURE'

SET @blobstatusid = 1

ELSE IF @blobldescription = 'ONAZURE'

SET @blobstatusid = 2

ELSE IF @blobldescription='CREATINGTHUMBNAILS'

SET @blobstatusid = 5

ELSE IF @blobldescription = 'THUMBNAILSAVAILABLE'

SET @blobstatusid = 6

ELSE IF @blobldescription = 'THUMBNAILERROR'

SET @blobstatusid = 7

ELSE IF @blobldescription = 'UPLOADERROR'

SET @blobstatusid = 10

ELSE IF @blobldescription = 'DELETED'

SET @blobstatusid = 11

ELSE


-----

RETURN @blobstatusid

END

GO

Used By

[dbo].[p_tilestatus_get_by_projectid]

[dbo].[p_tilestatus_get_by_projectid_paged]

[dbo].[p_tilestatus_get_by_projectid_with_thumbnails]

[dbo].[p_tilestatus_get_thumbnails_for_tile]

[dbo].[p_tilestatus_get_upgradable_for_project]

[dbo].[p_tilestatus_gettree_by_id]

[dbo].[p_tilestatus_update_blobstatusid]

**[dbo].[fn_GetCacheId]**

Parameters

Name

Data Type

Max Length (Bytes)

@cachename

nvarchar(50)


-----

SQL Script

CREATE FUNCTION [dbo].[fn_GetCacheId]

(

@cachename nvarchar(50)

)

RETURNS INT

AS

BEGIN

DECLARE @cacheId int

set @cachename = UPPER(@cachename)

if @cachename = 'CACHE'

set @cacheId = 0

else if @cachename = 'CONFIGURATION'

set @cacheId = 1

else

set @cacheId = -1

RETURN @cacheId

END

GO


-----

[dbo].[p_cache_load]

[dbo].[p_configuration_load]

[dbo].[p_configuration_set]

**[dbo].[fn_GetOfficeconverterMachineStatusId]**

Parameters

Name

Data Type

Max Length (Bytes)

@officeconvertermachinestatusdescription

nvarchar(50)

100

SQL Script

-==================================

-- Author: <Dennis Vroegop>

-- Create date: <27/02/2020>

-- Description: <Returns the available statusses >


-----

CREATE FUNCTION [dbo].[fn_GetOfficeconverterMachineStatusId]

(

@officeconvertermachinestatusdescription nvarchar(50)

)

RETURNS INT

AS

BEGIN

DECLARE @officeconvertermachinestatusid int

set @officeconvertermachinestatusdescription =
UPPER(@officeconvertermachinestatusdescription)

if @officeconvertermachinestatusdescription = 'READY TO
PROCESS'

set @officeconvertermachinestatusid = 0

else if @officeconvertermachinestatusdescription = 'PROCESSING'

set @officeconvertermachinestatusid = 1

else if @officeconvertermachinestatusdescription = 'COMPLETED'

set @officeconvertermachinestatusid = 2

else if @officeconvertermachinestatusdescription = 'OPERATION
CANCELLED'

set @officeconvertermachinestatusid = 20

else if @officeconvertermachinestatusdescription = 'ERROR'

set @officeconvertermachinestatusid = 30


-----

set @officeconvertermachinestatusid = -1

RETURN @officeconvertermachinestatusid

END

GO

**[dbo].[fn_GetStateMachineStatusId]**

Parameters

Name

Data Type

Max Length (Bytes)

@statemachinestatusdescription

nvarchar(50)

100

SQL Script

create FUNCTION [dbo].[fn_GetStateMachineStatusId]

(

@statemachinestatusdescription nvarchar(50)


-----

AS

BEGIN

DECLARE @statemachinestatusid int

set @statemachinestatusdescription =
UPPER(@statemachinestatusdescription)

if @statemachinestatusdescription = 'NOT READY'

set @statemachinestatusid = 0

else if @statemachinestatusdescription = 'READY'

set @statemachinestatusid = 1

else if @statemachinestatusdescription = 'WORKING'

set @statemachinestatusid = 2

else if @statemachinestatusdescription = 'FINISHED'

set @statemachinestatusid = 10

else if @statemachinestatusdescription = 'ERROR'

set @statemachinestatusid = 11

else

set @statemachinestatusid = -1

RETURN @statemachinestatusid

END

GO


-----

[dbo].[p_canvasshotter_book]

[dbo].[p_canvasshotter_booking_insert_conditional]

[dbo].[p_canvasshotter_fallback]

[dbo].[p_canvasshotter_history]

[dbo].[p_online_user_book]

[dbo].[p_online_user_unbook_forgot]

[dbo].[p_online_user_update_keepalive]

[dbo].[p_project_copy_book]

[dbo].[p_project_copy_fallback]

[dbo].[p_project_copy_history]

[dbo].[p_project_copy_insert]

[dbo].[p_project_upgrade_book]

[dbo].[p_project_upgrade_fallback]

[dbo].[p_project_upgrade_history]

[dbo].[p_project_upgrade_insert]

[dbo].[p_tilestatus_copy_book]

[dbo].[p_tilestatus_copy_fallback]

[dbo].[p_tilestatus_copy_history]

[dbo].[p_tilestatus_copy_insert]

[dbo].[p_tilestatus_update_blobstatusid]

[dbo].[p tilestatus upgrade book]


-----

**[dbo].[fn_GetTileType]**

Parameters

Name

Data Type

Max Length (Bytes)

@tileType

nvarchar(50)

100

SQL Script

CREATE FUNCTION [dbo].[fn_GetTileType]

(

@tileType NVARCHAR(50)

)

RETURNS INT

AS

BEGIN

DECLARE @tileTypeid INT

SET @tileType = UPPER(@tileType)


-----

SET @tileTypeid = 0

ELSE IF @tileType = 'STICKY'

SET @tileTypeid = 1

ELSE IF @tileType='IMAGE'

SET @tileTypeid = 2

ELSE IF @tileType = 'PDF'

SET @tileTypeid = 3

ELSE IF @tileType = 'GROUP'

SET @tileTypeid = 4

ELSE IF @tileType = 'VIDEO'

SET @tileTypeid = 5

ELSE IF @tileType = 'AUDIO'

SET @tileTypeid = 6

ELSE IF @tileType = 'STACK'

SET @tileTypeid = 8

ELSE IF @tileType = 'YOUTUBEVIDEO'

SET @tileTypeid = 9

ELSE IF @tileType = 'WORD'

SET @tileTypeid = 11

ELSE IF @tileType = 'EXCEL'

SET @tileTypeid = 12


-----

SET @tileTypeid = 13

ELSE IF @tileType = 'TEXT'

SET @tileTypeid = 16

ELSE IF @tileType = 'SHAPE'

SET @tileTypeid = 17

ELSE IF @tileType = 'THUMBNAIL'

SET @tileTypeid = 18

ELSE IF @tileType = 'INK'

SET @tileTypeid = 19

ELSE IF @tileType = 'EMBED'

SET @tileTypeid = 20

ELSE

SET @tileTypeid = -1

RETURN @tileTypeid

END

GO

Used By

[dbo].[p_tilestatus_get_by_projectid]

[dbo].[p_tilestatus_get_by_projectid_paged]


-----

**[licensing].[fn_ApplyFilter]**

Parameters

Name

Data Type

Max Length (Bytes)

@operand1

sql_variant

8016

@operator

nvarchar(2)

4

@operand2

sql_variant

8016

SQL Script

CREATE FUNCTION [licensing].[fn_ApplyFilter]

(

@operand1 sql variant


-----

@operand2 sql_variant

)

RETURNS BIT

AS

BEGIN

IF (@operator = '= ' AND @operand1 = @operand2) RETURN 1

ELSE IF (@operator = '> ' AND @operand1 > @operand2)
RETURN 1

ELSE IF (@operator = '>=' AND @operand1 >= @operand2)
RETURN 1

ELSE IF (@operator = '< ' AND @operand1 < @operand2)
RETURN 1

ELSE IF (@operator = '<=' AND @operand1 <= @operand2)
RETURN 1

ELSE IF (@operator = '<>' AND @operand1 <> @operand2)
RETURN 1

RETURN 0

END

GO

Uses

[licensing]

Used By


-----

**[mft].[fn_GetChunkingMachineStatusId]**

Parameters

Name

Data Type

Max Length (Bytes)

@chunkingmachinestatusdescription

nvarchar(50)

100

SQL Script

CREATE FUNCTION [mft].[fn_GetChunkingMachineStatusId]

(

@chunkingmachinestatusdescription nvarchar(50)

)

RETURNS INT

AS

BEGIN

DECLARE @chunkingmachinestatusid int


-----

if @chunkingmachinestatusdescription = 'READY TO PROCESS'

set @chunkingmachinestatusid = 0

else if @chunkingmachinestatusdescription = 'PROCESSING'

set @chunkingmachinestatusid = 1

else if @chunkingmachinestatusdescription = 'READY TO
DOWNLOAD'

set @chunkingmachinestatusid = 2

else if @chunkingmachinestatusdescription = 'DOWNLOAD
COMPLETED'

set @chunkingmachinestatusid = 10

else if @chunkingmachinestatusdescription = 'READY TO CLEAN'

set @chunkingmachinestatusid = 11

else if @chunkingmachinestatusdescription = 'CLEANING'

set @chunkingmachinestatusid = 12

else if @chunkingmachinestatusdescription = 'CLEAN COMPLETED'

set @chunkingmachinestatusid = 13

else if @chunkingmachinestatusdescription = 'OPERATION
CANCELLED'

set @chunkingmachinestatusid = 20

else if @chunkingmachinestatusdescription = 'ERROR'

set @chunkingmachinestatusid = 30

else


-----

RETURN @chunkingmachinestatusid

END

GO

Uses

[mft]

Used By

[mft].[p_check_download_available]

[mft].[p_chunkingmachine_book]

[mft].[p_chunkingmachine_completed]

[mft].[p_chunkingmachine_insert]

[mft].[p_cleaningmachine_bookchunking]

[mft].[p_cleaningmachinenotcompleted_bookchunking]

[mft].[p_cleaningmachinenotcompleted_bookchunkingmoving]

[mft].[p_get_activity_from_chunking]

**[mft].[fn_GetMergeMachineStatusId]**

Parameters

Name


-----

Max Length (Bytes)

@mergemachinestatusdescription

nvarchar(50)

100

SQL Script

CREATE FUNCTION [mft].[fn_GetMergeMachineStatusId]

(

@mergemachinestatusdescription nvarchar(50)

)

RETURNS INT

AS

BEGIN

DECLARE @mergemachinestatusid int

set @mergemachinestatusdescription =
UPPER(@mergemachinestatusdescription)

if @mergemachinestatusdescription = 'CLIENT UPLOADING'

set @mergemachinestatusid = -1

else if @mergemachinestatusdescription = 'READY TO PROCESS'

set @mergemachinestatusid = 0

else if @mergemachinestatusdescription = 'PROCESSING'


-----

else if @mergemachinestatusdescription = 'READY TO MERGE'

set @mergemachinestatusid = 2

else if @mergemachinestatusdescription = 'MERGE COMPLETED'

set @mergemachinestatusid = 10

else if @mergemachinestatusdescription = 'READY TO CLEAN'

set @mergemachinestatusid = 11

else if @mergemachinestatusdescription = 'CLEANING'

set @mergemachinestatusid = 12

else if @mergemachinestatusdescription = 'CLEAN COMPLETED'

set @mergemachinestatusid = 13

else if @mergemachinestatusdescription = 'OPERATION
CANCELLED'

set @mergemachinestatusid = 20

else if @mergemachinestatusdescription = 'ERROR'

set @mergemachinestatusid = 30

else

set @mergemachinestatusid = -2

RETURN @mergemachinestatusid

END

GO


-----

[mft]

Used By

[mft].[p_check_upload_finished]

[mft].[p_cleaningmachine_bookmergemoving]

[mft].[p_cleaningmachine_bookmerging]

[mft].[p_cleaningmachinenotcompleted_bookmerging]

[mft].[p_get_activity_from_merge]

[mft].[p_mergemachine_book]

[mft].[p_mergemachine_insert]

[mft].[p_mergemachine_ready_to_process]

**[mft].[fn_GetStateMachineStatusId]**

Parameters

Name

Data Type

Max Length (Bytes)

@statemachinestatusdescription

nvarchar(50)

100


-----

create FUNCTION [mft].[fn_GetStateMachineStatusId]

(

@statemachinestatusdescription nvarchar(50)

)

RETURNS INT

AS

BEGIN

DECLARE @statemachinestatusid int

set @statemachinestatusdescription =
UPPER(@statemachinestatusdescription)

if @statemachinestatusdescription = 'NOT READY'

set @statemachinestatusid = 0

else if @statemachinestatusdescription = 'READY'

set @statemachinestatusid = 1

else if @statemachinestatusdescription = 'WORKING'

set @statemachinestatusid = 2

else if @statemachinestatusdescription = 'FINISHED'

set @statemachinestatusid = 10

else if @statemachinestatusdescription = 'ERROR'

set @statemachinestatusid = 11

else


-----

RETURN @statemachinestatusid

END

GO

Uses

[mft]

**[mft].[fn_GetStorageMachineStatusId]**

Parameters

Name

Data Type

Max Length (Bytes)

@storagemachinestatusdescription

nvarchar(50)

100

SQL Script

-==================================


-----

-- Description: <Description, ,>

-==================================

CREATE FUNCTION [mft].[fn_GetStorageMachineStatusId]

(

@storagemachinestatusdescription nvarchar(50)

)

RETURNS INT

AS

BEGIN

DECLARE @storagemachinestatusid int

set @storagemachinestatusdescription =
UPPER(@storagemachinestatusdescription)

if @storagemachinestatusdescription = 'READY TO PROCESS'

set @storagemachinestatusid = 0

else if @storagemachinestatusdescription = 'PROCESSING'

set @storagemachinestatusid = 1

else if @storagemachinestatusdescription = 'COMPLETED'

set @storagemachinestatusid = 2

else if @storagemachinestatusdescription = 'OPERATION
CANCELLED'

set @storagemachinestatusid = 20


-----

set @storagemachinestatusid = 30

else

set @storagemachinestatusid = -1

RETURN @storagemachinestatusid

END

GO

Uses

[mft]

Used By

[mft].[p_check_storageoperation_finished]

[mft].[p_get_activity_from_storage]

[mft].[p_storagemachine_book]

[mft].[p_storagemachine_insert]

[mft].[p_storageoperations_move_history]


-----

